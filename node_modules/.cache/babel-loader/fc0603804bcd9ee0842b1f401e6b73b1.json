{"ast":null,"code":"import { Mesh, AnimationMixer, AnimationClip } from 'three';\nvar MorphAnimMesh = function MorphAnimMesh(geometry, material) {\n  Mesh.call(this, geometry, material);\n  this.type = 'MorphAnimMesh';\n  this.mixer = new AnimationMixer(this);\n  this.activeAction = null;\n};\nMorphAnimMesh.prototype = Object.create(Mesh.prototype);\nMorphAnimMesh.prototype.constructor = MorphAnimMesh;\nMorphAnimMesh.prototype.setDirectionForward = function () {\n  this.mixer.timeScale = 1.0;\n};\nMorphAnimMesh.prototype.setDirectionBackward = function () {\n  this.mixer.timeScale = -1.0;\n};\nMorphAnimMesh.prototype.playAnimation = function (label, fps) {\n  if (this.activeAction) {\n    this.activeAction.stop();\n    this.activeAction = null;\n  }\n  var clip = AnimationClip.findByName(this, label);\n  if (clip) {\n    var action = this.mixer.clipAction(clip);\n    action.timeScale = clip.tracks.length * fps / clip.duration;\n    this.activeAction = action.play();\n  } else {\n    throw new Error('THREE.MorphAnimMesh: animations[' + label + '] undefined in .playAnimation()');\n  }\n};\nMorphAnimMesh.prototype.updateAnimation = function (delta) {\n  this.mixer.update(delta);\n};\nMorphAnimMesh.prototype.copy = function (source) {\n  Mesh.prototype.copy.call(this, source);\n  this.mixer = new AnimationMixer(this);\n  return this;\n};\nexport { MorphAnimMesh };","map":null,"metadata":{},"sourceType":"module"}