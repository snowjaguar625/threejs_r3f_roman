{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Node from './Node.js';\nvar VarNode = /*#__PURE__*/function (_Node) {\n  _inherits(VarNode, _Node);\n  function VarNode(node) {\n    var _this;\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var nodeType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    _classCallCheck(this, VarNode);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VarNode).call(this, nodeType));\n    _this.node = node;\n    _this.name = name;\n    return _this;\n  }\n  _createClass(VarNode, [{\n    key: \"getHash\",\n    value: function getHash(builder) {\n      return this.name || _get(_getPrototypeOf(VarNode.prototype), \"getHash\", this).call(this, builder);\n    }\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      return _get(_getPrototypeOf(VarNode.prototype), \"getNodeType\", this).call(this, builder) || this.node.getNodeType(builder);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var type = builder.getVectorType(this.getNodeType(builder));\n      var node = this.node;\n      var name = this.name;\n      var snippet = node.build(builder, type);\n      var nodeVar = builder.getVarFromNode(this, type);\n      if (name !== null) {\n        nodeVar.name = name;\n      }\n      var propertyName = builder.getPropertyName(nodeVar);\n      builder.addFlowCode(\"\".concat(propertyName, \" = \").concat(snippet));\n      return propertyName;\n    }\n  }]);\n  return VarNode;\n}(Node);\nVarNode.prototype.isVarNode = true;\nexport default VarNode;","map":null,"metadata":{},"sourceType":"module"}