{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nimport Node from '../core/Node.js';\nimport { vector } from '../core/NodeBuilder.js';\nvar SplitNode = /*#__PURE__*/function (_Node) {\n  _inherits(SplitNode, _Node);\n  function SplitNode(node) {\n    var _this;\n    var components = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n    _classCallCheck(this, SplitNode);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SplitNode).call(this));\n    _this.node = node;\n    _this.components = components;\n    return _this;\n  }\n  _createClass(SplitNode, [{\n    key: \"getVectorLength\",\n    value: function getVectorLength() {\n      var vectorLength = this.components.length;\n      var _iterator = _createForOfIteratorHelper(this.components),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var c = _step.value;\n          vectorLength = Math.max(vector.indexOf(c) + 1, vectorLength);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return vectorLength;\n    }\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      return builder.getTypeFromLength(this.components.length);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var node = this.node;\n      var nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));\n      if (nodeTypeLength > 1) {\n        var type = null;\n        var componentsLength = this.getVectorLength();\n        if (componentsLength >= nodeTypeLength) {\n          // need expand the input node\n          type = builder.getTypeFromLength(this.getVectorLength());\n        }\n        var nodeSnippet = node.build(builder, type);\n        return \"\".concat(nodeSnippet, \".\").concat(this.components);\n      } else {\n        // ignore components if node is a float\n        return node.build(builder);\n      }\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(data) {\n      _get(_getPrototypeOf(SplitNode.prototype), \"serialize\", this).call(this, data);\n      data.components = this.components;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data) {\n      _get(_getPrototypeOf(SplitNode.prototype), \"deserialize\", this).call(this, data);\n      this.components = data.components;\n    }\n  }]);\n  return SplitNode;\n}(Node);\nexport default SplitNode;","map":null,"metadata":{},"sourceType":"module"}