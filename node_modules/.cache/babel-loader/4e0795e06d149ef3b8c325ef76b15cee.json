{"ast":null,"code":"import { Color, ShaderMaterial, UniformsUtils, UniformsLib, BackSide } from 'three';\n\n/**\n * Reference: https://en.wikipedia.org/wiki/Cel_shading\n *\n * API\n *\n * 1. Traditional\n *\n * var effect = new OutlineEffect( renderer );\n *\n * function render() {\n *\n * \teffect.render( scene, camera );\n *\n * }\n *\n * 2. VR compatible\n *\n * var effect = new OutlineEffect( renderer );\n * var renderingOutline = false;\n *\n * scene.onAfterRender = function () {\n *\n * \tif ( renderingOutline ) return;\n *\n * \trenderingOutline = true;\n *\n * \teffect.renderOutline( scene, camera );\n *\n * \trenderingOutline = false;\n *\n * };\n *\n * function render() {\n *\n * \trenderer.render( scene, camera );\n *\n * }\n *\n * // How to set default outline parameters\n * new OutlineEffect( renderer, {\n * \tdefaultThickness: 0.01,\n * \tdefaultColor: [ 0, 0, 0 ],\n * \tdefaultAlpha: 0.8,\n * \tdefaultKeepAlive: true // keeps outline material in cache even if material is removed from scene\n * } );\n *\n * // How to set outline parameters for each material\n * material.userData.outlineParameters = {\n * \tthickness: 0.01,\n * \tcolor: [ 0, 0, 0 ]\n * \talpha: 0.8,\n * \tvisible: true,\n * \tkeepAlive: true\n * };\n */\n\nvar OutlineEffect = function OutlineEffect(renderer, parameters) {\n  parameters = parameters || {};\n  this.enabled = true;\n  var defaultThickness = parameters.defaultThickness !== undefined ? parameters.defaultThickness : 0.003;\n  var defaultColor = new Color().fromArray(parameters.defaultColor !== undefined ? parameters.defaultColor : [0, 0, 0]);\n  var defaultAlpha = parameters.defaultAlpha !== undefined ? parameters.defaultAlpha : 1.0;\n  var defaultKeepAlive = parameters.defaultKeepAlive !== undefined ? parameters.defaultKeepAlive : false; // object.material.uuid -> outlineMaterial or\n  // object.material[ n ].uuid -> outlineMaterial\n  // save at the outline material creation and release\n  // if it's unused removeThresholdCount frames\n  // unless keepAlive is true.\n\n  var cache = {};\n  var removeThresholdCount = 60; // outlineMaterial.uuid -> object.material or\n  // outlineMaterial.uuid -> object.material[ n ]\n  // save before render and release after render.\n\n  var originalMaterials = {}; // object.uuid -> originalOnBeforeRender\n  // save before render and release after render.\n\n  var originalOnBeforeRenders = {}; //this.cache = cache;  // for debug\n\n  var uniformsOutline = {\n    outlineThickness: {\n      value: defaultThickness\n    },\n    outlineColor: {\n      value: defaultColor\n    },\n    outlineAlpha: {\n      value: defaultAlpha\n    }\n  };\n  var vertexShader = ['#include <common>', '#include <uv_pars_vertex>', '#include <displacementmap_pars_vertex>', '#include <fog_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>', 'uniform float outlineThickness;', 'vec4 calculateOutline( vec4 pos, vec3 normal, vec4 skinned ) {', '\tfloat thickness = outlineThickness;', '\tconst float ratio = 1.0;',\n  // TODO: support outline thickness ratio for each vertex\n  '\tvec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + normal, 1.0 );',\n  // NOTE: subtract pos2 from pos because BackSide objectNormal is negative\n  '\tvec4 norm = normalize( pos - pos2 );', '\treturn pos + norm * thickness * pos.w * ratio;', '}', 'void main() {', '\t#include <uv_vertex>', '\t#include <beginnormal_vertex>', '\t#include <morphnormal_vertex>', '\t#include <skinbase_vertex>', '\t#include <skinnormal_vertex>', '\t#include <begin_vertex>', '\t#include <morphtarget_vertex>', '\t#include <skinning_vertex>', '\t#include <displacementmap_vertex>', '\t#include <project_vertex>', '\tvec3 outlineNormal = - objectNormal;',\n  // the outline material is always rendered with BackSide\n  '\tgl_Position = calculateOutline( gl_Position, outlineNormal, vec4( transformed, 1.0 ) );', '\t#include <logdepthbuf_vertex>', '\t#include <clipping_planes_vertex>', '\t#include <fog_vertex>', '}'].join('\\n');\n  var fragmentShader = ['#include <common>', '#include <fog_pars_fragment>', '#include <logdepthbuf_pars_fragment>', '#include <clipping_planes_pars_fragment>', 'uniform vec3 outlineColor;', 'uniform float outlineAlpha;', 'void main() {', '\t#include <clipping_planes_fragment>', '\t#include <logdepthbuf_fragment>', '\tgl_FragColor = vec4( outlineColor, outlineAlpha );', '\t#include <tonemapping_fragment>', '\t#include <encodings_fragment>', '\t#include <fog_fragment>', '\t#include <premultiplied_alpha_fragment>', '}'].join('\\n');\n  function createMaterial() {\n    return new ShaderMaterial({\n      type: 'OutlineEffect',\n      uniforms: UniformsUtils.merge([UniformsLib['fog'], UniformsLib['displacementmap'], uniformsOutline]),\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      side: BackSide\n    });\n  }\n  function getOutlineMaterialFromCache(originalMaterial) {\n    var data = cache[originalMaterial.uuid];\n    if (data === undefined) {\n      data = {\n        material: createMaterial(),\n        used: true,\n        keepAlive: defaultKeepAlive,\n        count: 0\n      };\n      cache[originalMaterial.uuid] = data;\n    }\n    data.used = true;\n    return data.material;\n  }\n  function getOutlineMaterial(originalMaterial) {\n    var outlineMaterial = getOutlineMaterialFromCache(originalMaterial);\n    originalMaterials[outlineMaterial.uuid] = originalMaterial;\n    updateOutlineMaterial(outlineMaterial, originalMaterial);\n    return outlineMaterial;\n  }\n  function isCompatible(object) {\n    var geometry = object.geometry;\n    var hasNormals = false;\n    if (object.geometry !== undefined) {\n      if (geometry.isBufferGeometry) {\n        hasNormals = geometry.attributes.normal !== undefined;\n      } else {\n        hasNormals = true; // the renderer always produces a normal attribute for Geometry\n      }\n    }\n\n    return object.isMesh === true && object.material !== undefined && hasNormals === true;\n  }\n  function setOutlineMaterial(object) {\n    if (isCompatible(object) === false) return;\n    if (Array.isArray(object.material)) {\n      for (var i = 0, il = object.material.length; i < il; i++) {\n        object.material[i] = getOutlineMaterial(object.material[i]);\n      }\n    } else {\n      object.material = getOutlineMaterial(object.material);\n    }\n    originalOnBeforeRenders[object.uuid] = object.onBeforeRender;\n    object.onBeforeRender = onBeforeRender;\n  }\n  function restoreOriginalMaterial(object) {\n    if (isCompatible(object) === false) return;\n    if (Array.isArray(object.material)) {\n      for (var i = 0, il = object.material.length; i < il; i++) {\n        object.material[i] = originalMaterials[object.material[i].uuid];\n      }\n    } else {\n      object.material = originalMaterials[object.material.uuid];\n    }\n    object.onBeforeRender = originalOnBeforeRenders[object.uuid];\n  }\n  function onBeforeRender(renderer, scene, camera, geometry, material) {\n    var originalMaterial = originalMaterials[material.uuid]; // just in case\n\n    if (originalMaterial === undefined) return;\n    updateUniforms(material, originalMaterial);\n  }\n  function updateUniforms(material, originalMaterial) {\n    var outlineParameters = originalMaterial.userData.outlineParameters;\n    material.uniforms.outlineAlpha.value = originalMaterial.opacity;\n    if (outlineParameters !== undefined) {\n      if (outlineParameters.thickness !== undefined) {\n        material.uniforms.outlineThickness.value = outlineParameters.thickness;\n      }\n      if (outlineParameters.color !== undefined) material.uniforms.outlineColor.value.fromArray(outlineParameters.color);\n      if (outlineParameters.alpha !== undefined) material.uniforms.outlineAlpha.value = outlineParameters.alpha;\n    }\n    if (originalMaterial.displacementMap) {\n      material.uniforms.displacementMap.value = originalMaterial.displacementMap;\n      material.uniforms.displacementScale.value = originalMaterial.displacementScale;\n      material.uniforms.displacementBias.value = originalMaterial.displacementBias;\n    }\n  }\n  function updateOutlineMaterial(material, originalMaterial) {\n    if (material.name === 'invisible') return;\n    var outlineParameters = originalMaterial.userData.outlineParameters;\n    material.skinning = originalMaterial.skinning;\n    material.morphTargets = originalMaterial.morphTargets;\n    material.morphNormals = originalMaterial.morphNormals;\n    material.fog = originalMaterial.fog;\n    material.toneMapped = originalMaterial.toneMapped;\n    material.premultipliedAlpha = originalMaterial.premultipliedAlpha;\n    material.displacementMap = originalMaterial.displacementMap;\n    if (outlineParameters !== undefined) {\n      if (originalMaterial.visible === false) {\n        material.visible = false;\n      } else {\n        material.visible = outlineParameters.visible !== undefined ? outlineParameters.visible : true;\n      }\n      material.transparent = outlineParameters.alpha !== undefined && outlineParameters.alpha < 1.0 ? true : originalMaterial.transparent;\n      if (outlineParameters.keepAlive !== undefined) {\n        cache[originalMaterial.uuid].keepAlive = outlineParameters.keepAlive;\n      }\n    } else {\n      material.transparent = originalMaterial.transparent;\n      material.visible = originalMaterial.visible;\n    }\n    if (originalMaterial.wireframe === true || originalMaterial.depthTest === false) material.visible = false;\n    if (originalMaterial.clippingPlanes) {\n      material.clipping = true;\n      material.clippingPlanes = originalMaterial.clippingPlanes;\n      material.clipIntersection = originalMaterial.clipIntersection;\n      material.clipShadows = originalMaterial.clipShadows;\n    }\n    material.version = originalMaterial.version; // update outline material if necessary\n  }\n\n  function cleanupCache() {\n    var keys; // clear originialMaterials\n\n    keys = Object.keys(originalMaterials);\n    for (var i = 0, il = keys.length; i < il; i++) {\n      originalMaterials[keys[i]] = undefined;\n    } // clear originalOnBeforeRenders\n\n    keys = Object.keys(originalOnBeforeRenders);\n    for (var _i = 0, _il = keys.length; _i < _il; _i++) {\n      originalOnBeforeRenders[keys[_i]] = undefined;\n    } // remove unused outlineMaterial from cache\n\n    keys = Object.keys(cache);\n    for (var _i2 = 0, _il2 = keys.length; _i2 < _il2; _i2++) {\n      var key = keys[_i2];\n      if (cache[key].used === false) {\n        cache[key].count++;\n        if (cache[key].keepAlive === false && cache[key].count > removeThresholdCount) {\n          delete cache[key];\n        }\n      } else {\n        cache[key].used = false;\n        cache[key].count = 0;\n      }\n    }\n  }\n  this.render = function (scene, camera) {\n    var renderTarget;\n    var forceClear = false;\n    if (arguments[2] !== undefined) {\n      console.warn('THREE.OutlineEffect.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n      renderTarget = arguments[2];\n    }\n    if (arguments[3] !== undefined) {\n      console.warn('THREE.OutlineEffect.render(): the forceClear argument has been removed. Use .clear() instead.');\n      forceClear = arguments[3];\n    }\n    if (renderTarget !== undefined) renderer.setRenderTarget(renderTarget);\n    if (forceClear) renderer.clear();\n    if (this.enabled === false) {\n      renderer.render(scene, camera);\n      return;\n    }\n    var currentAutoClear = renderer.autoClear;\n    renderer.autoClear = this.autoClear;\n    renderer.render(scene, camera);\n    renderer.autoClear = currentAutoClear;\n    this.renderOutline(scene, camera);\n  };\n  this.renderOutline = function (scene, camera) {\n    var currentAutoClear = renderer.autoClear;\n    var currentSceneAutoUpdate = scene.autoUpdate;\n    var currentSceneBackground = scene.background;\n    var currentShadowMapEnabled = renderer.shadowMap.enabled;\n    scene.autoUpdate = false;\n    scene.background = null;\n    renderer.autoClear = false;\n    renderer.shadowMap.enabled = false;\n    scene.traverse(setOutlineMaterial);\n    renderer.render(scene, camera);\n    scene.traverse(restoreOriginalMaterial);\n    cleanupCache();\n    scene.autoUpdate = currentSceneAutoUpdate;\n    scene.background = currentSceneBackground;\n    renderer.autoClear = currentAutoClear;\n    renderer.shadowMap.enabled = currentShadowMapEnabled;\n  };\n  /*\n   * See #9918\n   *\n   * The following property copies and wrapper methods enable\n   * OutlineEffect to be called from other *Effect, like\n   *\n   * effect = new StereoEffect( new OutlineEffect( renderer ) );\n   *\n   * function render () {\n   *\n   * \teffect.render( scene, camera );\n   *\n   * }\n   */\n\n  this.autoClear = renderer.autoClear;\n  this.domElement = renderer.domElement;\n  this.shadowMap = renderer.shadowMap;\n  this.clear = function (color, depth, stencil) {\n    renderer.clear(color, depth, stencil);\n  };\n  this.getPixelRatio = function () {\n    return renderer.getPixelRatio();\n  };\n  this.setPixelRatio = function (value) {\n    renderer.setPixelRatio(value);\n  };\n  this.getSize = function (target) {\n    return renderer.getSize(target);\n  };\n  this.setSize = function (width, height, updateStyle) {\n    renderer.setSize(width, height, updateStyle);\n  };\n  this.setViewport = function (x, y, width, height) {\n    renderer.setViewport(x, y, width, height);\n  };\n  this.setScissor = function (x, y, width, height) {\n    renderer.setScissor(x, y, width, height);\n  };\n  this.setScissorTest = function (boolean) {\n    renderer.setScissorTest(boolean);\n  };\n  this.setRenderTarget = function (renderTarget) {\n    renderer.setRenderTarget(renderTarget);\n  };\n};\nexport { OutlineEffect };","map":null,"metadata":{},"sourceType":"module"}