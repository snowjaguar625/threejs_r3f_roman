{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nfunction CycleRaycast(_ref) {\n  var onChanged = _ref.onChanged,\n    portal = _ref.portal,\n    _ref$preventDefault = _ref.preventDefault,\n    preventDefault = _ref$preventDefault === void 0 ? true : _ref$preventDefault,\n    _ref$scroll = _ref.scroll,\n    scroll = _ref$scroll === void 0 ? true : _ref$scroll,\n    _ref$keyCode = _ref.keyCode,\n    keyCode = _ref$keyCode === void 0 ? 9 : _ref$keyCode;\n  var cycle = React.useRef(0);\n  var raycaster = useThree(function (state) {\n    return state.raycaster;\n  });\n  var get = useThree(function (state) {\n    return state.get;\n  });\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  React.useEffect(function () {\n    var _portal$current;\n    var hits = [];\n    var lastEvent = undefined;\n    var prev = raycaster.filter;\n    var target = (_portal$current = portal == null ? void 0 : portal.current) !== null && _portal$current !== void 0 ? _portal$current : gl.domElement.parentNode; // Render custom status\n\n    var renderStatus = function renderStatus() {\n      return target && onChanged && onChanged(hits, Math.round(cycle.current) % hits.length);\n    }; // Overwrite the raycasters custom filter (this only exists in r3f)\n\n    raycaster.filter = function (intersections, state) {\n      // Reset cycle when the intersections change\n      var clone = _toConsumableArray(intersections);\n      if (clone.length !== hits.length || !hits.every(function (hit) {\n        return clone.map(function (e) {\n          return e.object.uuid;\n        }).includes(hit.object.uuid);\n      })) {\n        cycle.current = 0;\n        hits = clone;\n        renderStatus();\n      } // Run custom filter if there is one\n\n      if (prev) clone = prev(clone, state); // Cycle through the actual raycast intersects\n\n      for (var i = 0; i < Math.round(cycle.current) % clone.length; i++) {\n        var first = clone.shift();\n        clone = [].concat(_toConsumableArray(clone), [first]);\n      }\n      return clone;\n    }; // Cycle, refresh events and render status\n\n    var refresh = function refresh(fn) {\n      var _get$events$handlers, _get$events$handlers2;\n      cycle.current = fn(cycle.current); // Cancel hovered elements and fake a pointer-move\n\n      (_get$events$handlers = get().events.handlers) == null ? void 0 : _get$events$handlers.onPointerCancel(undefined);\n      (_get$events$handlers2 = get().events.handlers) == null ? void 0 : _get$events$handlers2.onPointerMove(lastEvent);\n      renderStatus();\n    }; // Key events\n\n    var tabEvent = function tabEvent(event) {\n      if (event.keyCode || event.which === keyCode) {\n        if (preventDefault) event.preventDefault();\n        if (hits.length > 1) refresh(function (current) {\n          return current + 1;\n        });\n      }\n    }; // Wheel events\n\n    var wheelEvent = function wheelEvent(event) {\n      if (preventDefault) event.preventDefault();\n      var delta = 0;\n      if (!event) event = window.event;\n      if (event.wheelDelta) delta = event.wheelDelta / 120;else if (event.detail) delta = -event.detail / 3;\n      if (hits.length > 1) refresh(function (current) {\n        return Math.abs(current - delta);\n      });\n    }; // Catch last move event and position custom status\n\n    var moveEvent = function moveEvent(event) {\n      return lastEvent = event;\n    };\n    document.addEventListener('pointermove', moveEvent, {\n      passive: true\n    });\n    if (scroll) document.addEventListener('wheel', wheelEvent);\n    if (keyCode !== undefined) document.addEventListener('keydown', tabEvent);\n    return function () {\n      // Clean up\n      raycaster.filter = prev;\n      if (keyCode !== undefined) document.removeEventListener('keydown', tabEvent);\n      if (scroll) document.removeEventListener('wheel', wheelEvent);\n      document.removeEventListener('pointermove', moveEvent);\n    };\n  }, [gl, get, raycaster, preventDefault, scroll, keyCode]);\n  return null;\n}\nexport { CycleRaycast };","map":null,"metadata":{},"sourceType":"module"}