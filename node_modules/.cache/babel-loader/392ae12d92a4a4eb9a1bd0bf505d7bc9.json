{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from 'three';\n\n/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @class TDSLoader\n * @constructor\n */\nvar TDSLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(TDSLoader, _Loader);\n  function TDSLoader(manager) {\n    var _this;\n    _classCallCheck(this, TDSLoader);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TDSLoader).call(this, manager));\n    _this.debug = false;\n    _this.group = null;\n    _this.position = 0;\n    _this.materials = [];\n    _this.meshes = [];\n    return _this;\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  _createClass(TDSLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (data) {\n        try {\n          onLoad(scope.parse(data, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n    /**\n     * Parse arraybuffer data and load 3ds file.\n     *\n     * @method parse\n     * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n     * @param {String} path Path for external resources.\n     * @return {Group} Group loaded from 3ds file.\n     */\n  }, {\n    key: \"parse\",\n    value: function parse(arraybuffer, path) {\n      this.group = new Group();\n      this.position = 0;\n      this.materials = [];\n      this.meshes = [];\n      this.readFile(arraybuffer, path);\n      for (var i = 0; i < this.meshes.length; i++) {\n        this.group.add(this.meshes[i]);\n      }\n      return this.group;\n    }\n    /**\n     * Decode file content to read 3ds data.\n     *\n     * @method readFile\n     * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n     * @param {String} path Path for external resources.\n     */\n  }, {\n    key: \"readFile\",\n    value: function readFile(arraybuffer, path) {\n      var data = new DataView(arraybuffer);\n      var chunk = this.readChunk(data);\n      if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n        var next = this.nextChunk(data, chunk);\n        while (next !== 0) {\n          if (next === M3D_VERSION) {\n            var version = this.readDWord(data);\n            this.debugMessage('3DS file version: ' + version);\n          } else if (next === MDATA) {\n            this.resetPosition(data);\n            this.readMeshData(data, path);\n          } else {\n            this.debugMessage('Unknown main chunk: ' + next.toString(16));\n          }\n          next = this.nextChunk(data, chunk);\n        }\n      }\n      this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n    }\n    /**\n     * Read mesh data chunk.\n     *\n     * @method readMeshData\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     */\n  }, {\n    key: \"readMeshData\",\n    value: function readMeshData(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      while (next !== 0) {\n        if (next === MESH_VERSION) {\n          var version = +this.readDWord(data);\n          this.debugMessage('Mesh Version: ' + version);\n        } else if (next === MASTER_SCALE) {\n          var scale = this.readFloat(data);\n          this.debugMessage('Master scale: ' + scale);\n          this.group.scale.set(scale, scale, scale);\n        } else if (next === NAMED_OBJECT) {\n          this.debugMessage('Named Object');\n          this.resetPosition(data);\n          this.readNamedObject(data);\n        } else if (next === MAT_ENTRY) {\n          this.debugMessage('Material');\n          this.resetPosition(data);\n          this.readMaterialEntry(data, path);\n        } else {\n          this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n    }\n    /**\n     * Read named object chunk.\n     *\n     * @method readNamedObject\n     * @param {Dataview} data Dataview in use.\n     */\n  }, {\n    key: \"readNamedObject\",\n    value: function readNamedObject(data) {\n      var chunk = this.readChunk(data);\n      var name = this.readString(data, 64);\n      chunk.cur = this.position;\n      var next = this.nextChunk(data, chunk);\n      while (next !== 0) {\n        if (next === N_TRI_OBJECT) {\n          this.resetPosition(data);\n          var mesh = this.readMesh(data);\n          mesh.name = name;\n          this.meshes.push(mesh);\n        } else {\n          this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n      this.endChunk(chunk);\n    }\n    /**\n     * Read material data chunk and add it to the material list.\n     *\n     * @method readMaterialEntry\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     */\n  }, {\n    key: \"readMaterialEntry\",\n    value: function readMaterialEntry(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var material = new MeshPhongMaterial();\n      while (next !== 0) {\n        if (next === MAT_NAME) {\n          material.name = this.readString(data, 64);\n          this.debugMessage('   Name: ' + material.name);\n        } else if (next === MAT_WIRE) {\n          this.debugMessage('   Wireframe');\n          material.wireframe = true;\n        } else if (next === MAT_WIRE_SIZE) {\n          var value = this.readByte(data);\n          material.wireframeLinewidth = value;\n          this.debugMessage('   Wireframe Thickness: ' + value);\n        } else if (next === MAT_TWO_SIDE) {\n          material.side = DoubleSide;\n          this.debugMessage('   DoubleSided');\n        } else if (next === MAT_ADDITIVE) {\n          this.debugMessage('   Additive Blending');\n          material.blending = AdditiveBlending;\n        } else if (next === MAT_DIFFUSE) {\n          this.debugMessage('   Diffuse Color');\n          material.color = this.readColor(data);\n        } else if (next === MAT_SPECULAR) {\n          this.debugMessage('   Specular Color');\n          material.specular = this.readColor(data);\n        } else if (next === MAT_AMBIENT) {\n          this.debugMessage('   Ambient color');\n          material.color = this.readColor(data);\n        } else if (next === MAT_SHININESS) {\n          var shininess = this.readPercentage(data);\n          material.shininess = shininess * 100;\n          this.debugMessage('   Shininess : ' + shininess);\n        } else if (next === MAT_TRANSPARENCY) {\n          var transparency = this.readPercentage(data);\n          material.opacity = 1 - transparency;\n          this.debugMessage('  Transparency : ' + transparency);\n          material.transparent = material.opacity < 1 ? true : false;\n        } else if (next === MAT_TEXMAP) {\n          this.debugMessage('   ColorMap');\n          this.resetPosition(data);\n          material.map = this.readMap(data, path);\n        } else if (next === MAT_BUMPMAP) {\n          this.debugMessage('   BumpMap');\n          this.resetPosition(data);\n          material.bumpMap = this.readMap(data, path);\n        } else if (next === MAT_OPACMAP) {\n          this.debugMessage('   OpacityMap');\n          this.resetPosition(data);\n          material.alphaMap = this.readMap(data, path);\n        } else if (next === MAT_SPECMAP) {\n          this.debugMessage('   SpecularMap');\n          this.resetPosition(data);\n          material.specularMap = this.readMap(data, path);\n        } else {\n          this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n      this.endChunk(chunk);\n      this.materials[material.name] = material;\n    }\n    /**\n     * Read mesh data chunk.\n     *\n     * @method readMesh\n     * @param {Dataview} data Dataview in use.\n     * @return {Mesh} The parsed mesh.\n     */\n  }, {\n    key: \"readMesh\",\n    value: function readMesh(data) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var geometry = new BufferGeometry();\n      var material = new MeshPhongMaterial();\n      var mesh = new Mesh(geometry, material);\n      mesh.name = 'mesh';\n      while (next !== 0) {\n        if (next === POINT_ARRAY) {\n          var points = this.readWord(data);\n          this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n          var vertices = [];\n          for (var i = 0; i < points; i++) {\n            vertices.push(this.readFloat(data));\n            vertices.push(this.readFloat(data));\n            vertices.push(this.readFloat(data));\n          }\n          geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n        } else if (next === FACE_ARRAY) {\n          this.resetPosition(data);\n          this.readFaceArray(data, mesh);\n        } else if (next === TEX_VERTS) {\n          var texels = this.readWord(data);\n          this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n          var uvs = [];\n          for (var _i = 0; _i < texels; _i++) {\n            uvs.push(this.readFloat(data));\n            uvs.push(this.readFloat(data));\n          }\n          geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n        } else if (next === MESH_MATRIX) {\n          this.debugMessage('   Tranformation Matrix (TODO)');\n          var values = [];\n          for (var _i2 = 0; _i2 < 12; _i2++) {\n            values[_i2] = this.readFloat(data);\n          }\n          var matrix = new Matrix4(); //X Line\n\n          matrix.elements[0] = values[0];\n          matrix.elements[1] = values[6];\n          matrix.elements[2] = values[3];\n          matrix.elements[3] = values[9]; //Y Line\n\n          matrix.elements[4] = values[2];\n          matrix.elements[5] = values[8];\n          matrix.elements[6] = values[5];\n          matrix.elements[7] = values[11]; //Z Line\n\n          matrix.elements[8] = values[1];\n          matrix.elements[9] = values[7];\n          matrix.elements[10] = values[4];\n          matrix.elements[11] = values[10]; //W Line\n\n          matrix.elements[12] = 0;\n          matrix.elements[13] = 0;\n          matrix.elements[14] = 0;\n          matrix.elements[15] = 1;\n          matrix.transpose();\n          var inverse = new Matrix4();\n          inverse.copy(matrix).invert();\n          geometry.applyMatrix4(inverse);\n          matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n        } else {\n          this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n      this.endChunk(chunk);\n      geometry.computeVertexNormals();\n      return mesh;\n    }\n    /**\n     * Read face array data chunk.\n     *\n     * @method readFaceArray\n     * @param {Dataview} data Dataview in use.\n     * @param {Mesh} mesh Mesh to be filled with the data read.\n     */\n  }, {\n    key: \"readFaceArray\",\n    value: function readFaceArray(data, mesh) {\n      var chunk = this.readChunk(data);\n      var faces = this.readWord(data);\n      this.debugMessage('   Faces: ' + faces);\n      var index = [];\n      for (var i = 0; i < faces; ++i) {\n        index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n        this.readWord(data); // visibility\n      }\n\n      mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n      var materialIndex = 0;\n      var start = 0;\n      while (this.position < chunk.end) {\n        var subchunk = this.readChunk(data);\n        if (subchunk.id === MSH_MAT_GROUP) {\n          this.debugMessage('      Material Group');\n          this.resetPosition(data);\n          var group = this.readMaterialGroup(data);\n          var count = group.index.length * 3; // assuming successive indices\n\n          mesh.geometry.addGroup(start, count, materialIndex);\n          start += count;\n          materialIndex++;\n          var material = this.materials[group.name];\n          if (Array.isArray(mesh.material) === false) mesh.material = [];\n          if (material !== undefined) {\n            mesh.material.push(material);\n          }\n        } else {\n          this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\n        }\n        this.endChunk(subchunk);\n      }\n      if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\n\n      this.endChunk(chunk);\n    }\n    /**\n     * Read texture map data chunk.\n     *\n     * @method readMap\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     * @return {Texture} Texture read from this data chunk.\n     */\n  }, {\n    key: \"readMap\",\n    value: function readMap(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var texture = {};\n      var loader = new TextureLoader(this.manager);\n      loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      while (next !== 0) {\n        if (next === MAT_MAPNAME) {\n          var name = this.readString(data, 128);\n          texture = loader.load(name);\n          this.debugMessage('      File: ' + path + name);\n        } else if (next === MAT_MAP_UOFFSET) {\n          texture.offset.x = this.readFloat(data);\n          this.debugMessage('      OffsetX: ' + texture.offset.x);\n        } else if (next === MAT_MAP_VOFFSET) {\n          texture.offset.y = this.readFloat(data);\n          this.debugMessage('      OffsetY: ' + texture.offset.y);\n        } else if (next === MAT_MAP_USCALE) {\n          texture.repeat.x = this.readFloat(data);\n          this.debugMessage('      RepeatX: ' + texture.repeat.x);\n        } else if (next === MAT_MAP_VSCALE) {\n          texture.repeat.y = this.readFloat(data);\n          this.debugMessage('      RepeatY: ' + texture.repeat.y);\n        } else {\n          this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n      this.endChunk(chunk);\n      return texture;\n    }\n    /**\n     * Read material group data chunk.\n     *\n     * @method readMaterialGroup\n     * @param {Dataview} data Dataview in use.\n     * @return {Object} Object with name and index of the object.\n     */\n  }, {\n    key: \"readMaterialGroup\",\n    value: function readMaterialGroup(data) {\n      this.readChunk(data);\n      var name = this.readString(data, 64);\n      var numFaces = this.readWord(data);\n      this.debugMessage('         Name: ' + name);\n      this.debugMessage('         Faces: ' + numFaces);\n      var index = [];\n      for (var i = 0; i < numFaces; ++i) {\n        index.push(this.readWord(data));\n      }\n      return {\n        name: name,\n        index: index\n      };\n    }\n    /**\n     * Read a color value.\n     *\n     * @method readColor\n     * @param {DataView} data Dataview.\n     * @return {Color} Color value read..\n     */\n  }, {\n    key: \"readColor\",\n    value: function readColor(data) {\n      var chunk = this.readChunk(data);\n      var color = new Color();\n      if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n        var r = this.readByte(data);\n        var g = this.readByte(data);\n        var b = this.readByte(data);\n        color.setRGB(r / 255, g / 255, b / 255);\n        this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n      } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n        var _r = this.readFloat(data);\n        var _g = this.readFloat(data);\n        var _b = this.readFloat(data);\n        color.setRGB(_r, _g, _b);\n        this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n      } else {\n        this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n      }\n      this.endChunk(chunk);\n      return color;\n    }\n    /**\n     * Read next chunk of data.\n     *\n     * @method readChunk\n     * @param {DataView} data Dataview.\n     * @return {Object} Chunk of data read.\n     */\n  }, {\n    key: \"readChunk\",\n    value: function readChunk(data) {\n      var chunk = {};\n      chunk.cur = this.position;\n      chunk.id = this.readWord(data);\n      chunk.size = this.readDWord(data);\n      chunk.end = chunk.cur + chunk.size;\n      chunk.cur += 6;\n      return chunk;\n    }\n    /**\n     * Set position to the end of the current chunk of data.\n     *\n     * @method endChunk\n     * @param {Object} chunk Data chunk.\n     */\n  }, {\n    key: \"endChunk\",\n    value: function endChunk(chunk) {\n      this.position = chunk.end;\n    }\n    /**\n     * Move to the next data chunk.\n     *\n     * @method nextChunk\n     * @param {DataView} data Dataview.\n     * @param {Object} chunk Data chunk.\n     */\n  }, {\n    key: \"nextChunk\",\n    value: function nextChunk(data, chunk) {\n      if (chunk.cur >= chunk.end) {\n        return 0;\n      }\n      this.position = chunk.cur;\n      try {\n        var next = this.readChunk(data);\n        chunk.cur += next.size;\n        return next.id;\n      } catch (e) {\n        this.debugMessage('Unable to read chunk at ' + this.position);\n        return 0;\n      }\n    }\n    /**\n     * Reset dataview position.\n     *\n     * @method resetPosition\n     */\n  }, {\n    key: \"resetPosition\",\n    value: function resetPosition() {\n      this.position -= 6;\n    }\n    /**\n     * Read byte value.\n     *\n     * @method readByte\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readByte\",\n    value: function readByte(data) {\n      var v = data.getUint8(this.position, true);\n      this.position += 1;\n      return v;\n    }\n    /**\n     * Read 32 bit float value.\n     *\n     * @method readFloat\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readFloat\",\n    value: function readFloat(data) {\n      try {\n        var v = data.getFloat32(this.position, true);\n        this.position += 4;\n        return v;\n      } catch (e) {\n        this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n      }\n    }\n    /**\n     * Read 32 bit signed integer value.\n     *\n     * @method readInt\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readInt\",\n    value: function readInt(data) {\n      var v = data.getInt32(this.position, true);\n      this.position += 4;\n      return v;\n    }\n    /**\n     * Read 16 bit signed integer value.\n     *\n     * @method readShort\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readShort\",\n    value: function readShort(data) {\n      var v = data.getInt16(this.position, true);\n      this.position += 2;\n      return v;\n    }\n    /**\n     * Read 64 bit unsigned integer value.\n     *\n     * @method readDWord\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readDWord\",\n    value: function readDWord(data) {\n      var v = data.getUint32(this.position, true);\n      this.position += 4;\n      return v;\n    }\n    /**\n     * Read 32 bit unsigned integer value.\n     *\n     * @method readWord\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readWord\",\n    value: function readWord(data) {\n      var v = data.getUint16(this.position, true);\n      this.position += 2;\n      return v;\n    }\n    /**\n     * Read string value.\n     *\n     * @method readString\n     * @param {DataView} data Dataview to read data from.\n     * @param {Number} maxLength Max size of the string to be read.\n     * @return {String} Data read from the dataview.\n     */\n  }, {\n    key: \"readString\",\n    value: function readString(data, maxLength) {\n      var s = '';\n      for (var i = 0; i < maxLength; i++) {\n        var c = this.readByte(data);\n        if (!c) {\n          break;\n        }\n        s += String.fromCharCode(c);\n      }\n      return s;\n    }\n    /**\n     * Read percentage value.\n     *\n     * @method readPercentage\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readPercentage\",\n    value: function readPercentage(data) {\n      var chunk = this.readChunk(data);\n      var value;\n      switch (chunk.id) {\n        case INT_PERCENTAGE:\n          value = this.readShort(data) / 100;\n          break;\n        case FLOAT_PERCENTAGE:\n          value = this.readFloat(data);\n          break;\n        default:\n          this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\n      }\n      this.endChunk(chunk);\n      return value;\n    }\n    /**\n     * Print debug message to the console.\n     *\n     * Is controlled by a flag to show or hide debug messages.\n     *\n     * @method debugMessage\n     * @param {Object} message Debug message to print to the console.\n     */\n  }, {\n    key: \"debugMessage\",\n    value: function debugMessage(message) {\n      if (this.debug) {\n        console.log(message);\n      }\n    }\n  }]);\n  return TDSLoader;\n}(Loader); // const NULL_CHUNK = 0x0000;\nvar M3DMAGIC = 0x4d4d; // const SMAGIC = 0x2D2D;\n// const LMAGIC = 0x2D3D;\n\nvar MLIBMAGIC = 0x3daa; // const MATMAGIC = 0x3DFF;\n\nvar CMAGIC = 0xc23d;\nvar M3D_VERSION = 0x0002; // const M3D_KFVERSION = 0x0005;\n\nvar COLOR_F = 0x0010;\nvar COLOR_24 = 0x0011;\nvar LIN_COLOR_24 = 0x0012;\nvar LIN_COLOR_F = 0x0013;\nvar INT_PERCENTAGE = 0x0030;\nvar FLOAT_PERCENTAGE = 0x0031;\nvar MDATA = 0x3d3d;\nvar MESH_VERSION = 0x3d3e;\nvar MASTER_SCALE = 0x0100; // const LO_SHADOW_BIAS = 0x1400;\n// const HI_SHADOW_BIAS = 0x1410;\n// const SHADOW_MAP_SIZE = 0x1420;\n// const SHADOW_SAMPLES = 0x1430;\n// const SHADOW_RANGE = 0x1440;\n// const SHADOW_FILTER = 0x1450;\n// const RAY_BIAS = 0x1460;\n// const O_CONSTS = 0x1500;\n// const AMBIENT_LIGHT = 0x2100;\n// const BIT_MAP = 0x1100;\n// const SOLID_BGND = 0x1200;\n// const V_GRADIENT = 0x1300;\n// const USE_BIT_MAP = 0x1101;\n// const USE_SOLID_BGND = 0x1201;\n// const USE_V_GRADIENT = 0x1301;\n// const FOG = 0x2200;\n// const FOG_BGND = 0x2210;\n// const LAYER_FOG = 0x2302;\n// const DISTANCE_CUE = 0x2300;\n// const DCUE_BGND = 0x2310;\n// const USE_FOG = 0x2201;\n// const USE_LAYER_FOG = 0x2303;\n// const USE_DISTANCE_CUE = 0x2301;\n\nvar MAT_ENTRY = 0xafff;\nvar MAT_NAME = 0xa000;\nvar MAT_AMBIENT = 0xa010;\nvar MAT_DIFFUSE = 0xa020;\nvar MAT_SPECULAR = 0xa030;\nvar MAT_SHININESS = 0xa040; // const MAT_SHIN2PCT = 0xA041;\n\nvar MAT_TRANSPARENCY = 0xa050; // const MAT_XPFALL = 0xA052;\n// const MAT_USE_XPFALL = 0xA240;\n// const MAT_REFBLUR = 0xA053;\n// const MAT_SHADING = 0xA100;\n// const MAT_USE_REFBLUR = 0xA250;\n// const MAT_SELF_ILLUM = 0xA084;\n\nvar MAT_TWO_SIDE = 0xa081; // const MAT_DECAL = 0xA082;\n\nvar MAT_ADDITIVE = 0xa083;\nvar MAT_WIRE = 0xa085; // const MAT_FACEMAP = 0xA088;\n// const MAT_TRANSFALLOFF_IN = 0xA08A;\n// const MAT_PHONGSOFT = 0xA08C;\n// const MAT_WIREABS = 0xA08E;\n\nvar MAT_WIRE_SIZE = 0xa087;\nvar MAT_TEXMAP = 0xa200; // const MAT_SXP_TEXT_DATA = 0xA320;\n// const MAT_TEXMASK = 0xA33E;\n// const MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// const MAT_TEX2MAP = 0xA33A;\n// const MAT_SXP_TEXT2_DATA = 0xA321;\n// const MAT_TEX2MASK = 0xA340;\n// const MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nvar MAT_OPACMAP = 0xa210; // const MAT_SXP_OPAC_DATA = 0xA322;\n// const MAT_OPACMASK = 0xA342;\n// const MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nvar MAT_BUMPMAP = 0xa230; // const MAT_SXP_BUMP_DATA = 0xA324;\n// const MAT_BUMPMASK = 0xA344;\n// const MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nvar MAT_SPECMAP = 0xa204; // const MAT_SXP_SPEC_DATA = 0xA325;\n// const MAT_SPECMASK = 0xA348;\n// const MAT_SXP_SPECMASK_DATA = 0xA332;\n// const MAT_SHINMAP = 0xA33C;\n// const MAT_SXP_SHIN_DATA = 0xA326;\n// const MAT_SHINMASK = 0xA346;\n// const MAT_SXP_SHINMASK_DATA = 0xA334;\n// const MAT_SELFIMAP = 0xA33D;\n// const MAT_SXP_SELFI_DATA = 0xA328;\n// const MAT_SELFIMASK = 0xA34A;\n// const MAT_SXP_SELFIMASK_DATA = 0xA336;\n// const MAT_REFLMAP = 0xA220;\n// const MAT_REFLMASK = 0xA34C;\n// const MAT_SXP_REFLMASK_DATA = 0xA338;\n// const MAT_ACUBIC = 0xA310;\n\nvar MAT_MAPNAME = 0xa300; // const MAT_MAP_TILING = 0xA351;\n// const MAT_MAP_TEXBLUR = 0xA353;\n\nvar MAT_MAP_USCALE = 0xa354;\nvar MAT_MAP_VSCALE = 0xa356;\nvar MAT_MAP_UOFFSET = 0xa358;\nvar MAT_MAP_VOFFSET = 0xa35a; // const MAT_MAP_ANG = 0xA35C;\n// const MAT_MAP_COL1 = 0xA360;\n// const MAT_MAP_COL2 = 0xA362;\n// const MAT_MAP_RCOL = 0xA364;\n// const MAT_MAP_GCOL = 0xA366;\n// const MAT_MAP_BCOL = 0xA368;\n\nvar NAMED_OBJECT = 0x4000; // const N_DIRECT_LIGHT = 0x4600;\n// const DL_OFF = 0x4620;\n// const DL_OUTER_RANGE = 0x465A;\n// const DL_INNER_RANGE = 0x4659;\n// const DL_MULTIPLIER = 0x465B;\n// const DL_EXCLUDE = 0x4654;\n// const DL_ATTENUATE = 0x4625;\n// const DL_SPOTLIGHT = 0x4610;\n// const DL_SPOT_ROLL = 0x4656;\n// const DL_SHADOWED = 0x4630;\n// const DL_LOCAL_SHADOW2 = 0x4641;\n// const DL_SEE_CONE = 0x4650;\n// const DL_SPOT_RECTANGULAR = 0x4651;\n// const DL_SPOT_ASPECT = 0x4657;\n// const DL_SPOT_PROJECTOR = 0x4653;\n// const DL_SPOT_OVERSHOOT = 0x4652;\n// const DL_RAY_BIAS = 0x4658;\n// const DL_RAYSHAD = 0x4627;\n// const N_CAMERA = 0x4700;\n// const CAM_SEE_CONE = 0x4710;\n// const CAM_RANGES = 0x4720;\n// const OBJ_HIDDEN = 0x4010;\n// const OBJ_VIS_LOFTER = 0x4011;\n// const OBJ_DOESNT_CAST = 0x4012;\n// const OBJ_DONT_RECVSHADOW = 0x4017;\n// const OBJ_MATTE = 0x4013;\n// const OBJ_FAST = 0x4014;\n// const OBJ_PROCEDURAL = 0x4015;\n// const OBJ_FROZEN = 0x4016;\n\nvar N_TRI_OBJECT = 0x4100;\nvar POINT_ARRAY = 0x4110; // const POINT_FLAG_ARRAY = 0x4111;\n\nvar FACE_ARRAY = 0x4120;\nvar MSH_MAT_GROUP = 0x4130; // const SMOOTH_GROUP = 0x4150;\n// const MSH_BOXMAP = 0x4190;\n\nvar TEX_VERTS = 0x4140;\nvar MESH_MATRIX = 0x4160; // const MESH_COLOR = 0x4165;\n\nexport { TDSLoader };","map":null,"metadata":{},"sourceType":"module"}