{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\nvar ThreeMFLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(ThreeMFLoader, _Loader);\n  function ThreeMFLoader(manager) {\n    var _this;\n    _classCallCheck(this, ThreeMFLoader);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThreeMFLoader).call(this, manager));\n    _this.availableExtensions = [];\n    return _this;\n  }\n  _createClass(ThreeMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var scope = this;\n      var textureLoader = new TextureLoader(this.manager);\n      function loadDocument(data) {\n        var zip = null;\n        var file = null;\n        var relsName;\n        var modelRelsName;\n        var modelPartNames = [];\n        var texturesPartNames = [];\n        var modelRels;\n        var modelParts = {};\n        var printTicketParts = {};\n        var texturesParts = {};\n        var otherParts = {};\n        try {\n          zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n        for (file in zip) {\n          if (file.match(/\\_rels\\/.rels$/)) {\n            relsName = file;\n          } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n            modelRelsName = file;\n          } else if (file.match(/^3D\\/.*\\.model$/)) {\n            modelPartNames.push(file);\n          } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ;else if (file.match(/^3D\\/Textures?\\/.*/)) {\n            texturesPartNames.push(file);\n          } else if (file.match(/^3D\\/Other\\/.*/)) ;\n        } //\n\n        var relsView = zip[relsName];\n        var relsFileText = LoaderUtils.decodeText(relsView);\n        var rels = parseRelsXml(relsFileText); //\n\n        if (modelRelsName) {\n          var _relsView = zip[modelRelsName];\n          var _relsFileText = LoaderUtils.decodeText(_relsView);\n          modelRels = parseRelsXml(_relsFileText);\n        } //\n\n        for (var i = 0; i < modelPartNames.length; i++) {\n          var modelPart = modelPartNames[i];\n          var view = zip[modelPart];\n          var fileText = LoaderUtils.decodeText(view);\n          var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n          if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n            console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n          }\n          var modelNode = xmlData.querySelector('model');\n          var extensions = {};\n          for (var _i = 0; _i < modelNode.attributes.length; _i++) {\n            var attr = modelNode.attributes[_i];\n            if (attr.name.match(/^xmlns:(.+)$/)) {\n              extensions[attr.value] = RegExp.$1;\n            }\n          }\n          var modelData = parseModelNode(modelNode);\n          modelData['xml'] = modelNode;\n          if (0 < Object.keys(extensions).length) {\n            modelData['extensions'] = extensions;\n          }\n          modelParts[modelPart] = modelData;\n        } //\n\n        for (var _i2 = 0; _i2 < texturesPartNames.length; _i2++) {\n          var texturesPartName = texturesPartNames[_i2];\n          texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n        }\n        return {\n          rels: rels,\n          modelRels: modelRels,\n          model: modelParts,\n          printTicket: printTicketParts,\n          texture: texturesParts,\n          other: otherParts\n        };\n      }\n      function parseRelsXml(relsFileText) {\n        var relationships = [];\n        var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n        var relsNodes = relsXmlData.querySelectorAll('Relationship');\n        for (var i = 0; i < relsNodes.length; i++) {\n          var relsNode = relsNodes[i];\n          var relationship = {\n            target: relsNode.getAttribute('Target'),\n            //required\n            id: relsNode.getAttribute('Id'),\n            //required\n            type: relsNode.getAttribute('Type') //required\n          };\n\n          relationships.push(relationship);\n        }\n        return relationships;\n      }\n      function parseMetadataNodes(metadataNodes) {\n        var metadataData = {};\n        for (var i = 0; i < metadataNodes.length; i++) {\n          var metadataNode = metadataNodes[i];\n          var name = metadataNode.getAttribute('name');\n          var validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n          if (0 <= validNames.indexOf(name)) {\n            metadataData[name] = metadataNode.textContent;\n          }\n        }\n        return metadataData;\n      }\n      function parseBasematerialsNode(basematerialsNode) {\n        var basematerialsData = {\n          id: basematerialsNode.getAttribute('id'),\n          // required\n          basematerials: []\n        };\n        var basematerialNodes = basematerialsNode.querySelectorAll('base');\n        for (var i = 0; i < basematerialNodes.length; i++) {\n          var basematerialNode = basematerialNodes[i];\n          var basematerialData = parseBasematerialNode(basematerialNode);\n          basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n          basematerialsData.basematerials.push(basematerialData);\n        }\n        return basematerialsData;\n      }\n      function parseTexture2DNode(texture2DNode) {\n        var texture2dData = {\n          id: texture2DNode.getAttribute('id'),\n          // required\n          path: texture2DNode.getAttribute('path'),\n          // required\n          contenttype: texture2DNode.getAttribute('contenttype'),\n          // required\n          tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n          tilestylev: texture2DNode.getAttribute('tilestylev'),\n          filter: texture2DNode.getAttribute('filter')\n        };\n        return texture2dData;\n      }\n      function parseTextures2DGroupNode(texture2DGroupNode) {\n        var texture2DGroupData = {\n          id: texture2DGroupNode.getAttribute('id'),\n          // required\n          texid: texture2DGroupNode.getAttribute('texid'),\n          // required\n          displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n        };\n        var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n        var uvs = [];\n        for (var i = 0; i < tex2coordNodes.length; i++) {\n          var tex2coordNode = tex2coordNodes[i];\n          var u = tex2coordNode.getAttribute('u');\n          var v = tex2coordNode.getAttribute('v');\n          uvs.push(parseFloat(u), parseFloat(v));\n        }\n        texture2DGroupData['uvs'] = new Float32Array(uvs);\n        return texture2DGroupData;\n      }\n      function parseColorGroupNode(colorGroupNode) {\n        var colorGroupData = {\n          id: colorGroupNode.getAttribute('id'),\n          // required\n          displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n        };\n        var colorNodes = colorGroupNode.querySelectorAll('color');\n        var colors = [];\n        var colorObject = new Color();\n        for (var i = 0; i < colorNodes.length; i++) {\n          var colorNode = colorNodes[i];\n          var color = colorNode.getAttribute('color');\n          colorObject.setStyle(color.substring(0, 7));\n          colorObject.convertSRGBToLinear(); // color is in sRGB\n\n          colors.push(colorObject.r, colorObject.g, colorObject.b);\n        }\n        colorGroupData['colors'] = new Float32Array(colors);\n        return colorGroupData;\n      }\n      function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n        var metallicDisplaypropertiesData = {\n          id: metallicDisplaypropetiesNode.getAttribute('id') // required\n        };\n\n        var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n        var metallicData = [];\n        for (var i = 0; i < metallicNodes.length; i++) {\n          var metallicNode = metallicNodes[i];\n          metallicData.push({\n            name: metallicNode.getAttribute('name'),\n            // required\n            metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n            // required\n            roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n          });\n        }\n\n        metallicDisplaypropertiesData.data = metallicData;\n        return metallicDisplaypropertiesData;\n      }\n      function parseBasematerialNode(basematerialNode) {\n        var basematerialData = {};\n        basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n        basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n        basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n        return basematerialData;\n      }\n      function parseMeshNode(meshNode) {\n        var meshData = {};\n        var vertices = [];\n        var vertexNodes = meshNode.querySelectorAll('vertices vertex');\n        for (var i = 0; i < vertexNodes.length; i++) {\n          var vertexNode = vertexNodes[i];\n          var x = vertexNode.getAttribute('x');\n          var y = vertexNode.getAttribute('y');\n          var z = vertexNode.getAttribute('z');\n          vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n        }\n        meshData['vertices'] = new Float32Array(vertices);\n        var triangleProperties = [];\n        var triangles = [];\n        var triangleNodes = meshNode.querySelectorAll('triangles triangle');\n        for (var _i3 = 0; _i3 < triangleNodes.length; _i3++) {\n          var triangleNode = triangleNodes[_i3];\n          var v1 = triangleNode.getAttribute('v1');\n          var v2 = triangleNode.getAttribute('v2');\n          var v3 = triangleNode.getAttribute('v3');\n          var p1 = triangleNode.getAttribute('p1');\n          var p2 = triangleNode.getAttribute('p2');\n          var p3 = triangleNode.getAttribute('p3');\n          var pid = triangleNode.getAttribute('pid');\n          var triangleProperty = {};\n          triangleProperty['v1'] = parseInt(v1, 10);\n          triangleProperty['v2'] = parseInt(v2, 10);\n          triangleProperty['v3'] = parseInt(v3, 10);\n          triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n          if (p1) {\n            triangleProperty['p1'] = parseInt(p1, 10);\n          }\n          if (p2) {\n            triangleProperty['p2'] = parseInt(p2, 10);\n          }\n          if (p3) {\n            triangleProperty['p3'] = parseInt(p3, 10);\n          }\n          if (pid) {\n            triangleProperty['pid'] = pid;\n          }\n          if (0 < Object.keys(triangleProperty).length) {\n            triangleProperties.push(triangleProperty);\n          }\n        }\n        meshData['triangleProperties'] = triangleProperties;\n        meshData['triangles'] = new Uint32Array(triangles);\n        return meshData;\n      }\n      function parseComponentsNode(componentsNode) {\n        var components = [];\n        var componentNodes = componentsNode.querySelectorAll('component');\n        for (var i = 0; i < componentNodes.length; i++) {\n          var componentNode = componentNodes[i];\n          var componentData = parseComponentNode(componentNode);\n          components.push(componentData);\n        }\n        return components;\n      }\n      function parseComponentNode(componentNode) {\n        var componentData = {};\n        componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n        var transform = componentNode.getAttribute('transform');\n        if (transform) {\n          componentData['transform'] = parseTransform(transform);\n        }\n        return componentData;\n      }\n      function parseTransform(transform) {\n        var t = [];\n        transform.split(' ').forEach(function (s) {\n          t.push(parseFloat(s));\n        });\n        var matrix = new Matrix4();\n        matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n        return matrix;\n      }\n      function parseObjectNode(objectNode) {\n        var objectData = {\n          type: objectNode.getAttribute('type')\n        };\n        var id = objectNode.getAttribute('id');\n        if (id) {\n          objectData['id'] = id;\n        }\n        var pid = objectNode.getAttribute('pid');\n        if (pid) {\n          objectData['pid'] = pid;\n        }\n        var pindex = objectNode.getAttribute('pindex');\n        if (pindex) {\n          objectData['pindex'] = pindex;\n        }\n        var thumbnail = objectNode.getAttribute('thumbnail');\n        if (thumbnail) {\n          objectData['thumbnail'] = thumbnail;\n        }\n        var partnumber = objectNode.getAttribute('partnumber');\n        if (partnumber) {\n          objectData['partnumber'] = partnumber;\n        }\n        var name = objectNode.getAttribute('name');\n        if (name) {\n          objectData['name'] = name;\n        }\n        var meshNode = objectNode.querySelector('mesh');\n        if (meshNode) {\n          objectData['mesh'] = parseMeshNode(meshNode);\n        }\n        var componentsNode = objectNode.querySelector('components');\n        if (componentsNode) {\n          objectData['components'] = parseComponentsNode(componentsNode);\n        }\n        return objectData;\n      }\n      function parseResourcesNode(resourcesNode) {\n        var resourcesData = {};\n        resourcesData['basematerials'] = {};\n        var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n        for (var i = 0; i < basematerialsNodes.length; i++) {\n          var basematerialsNode = basematerialsNodes[i];\n          var basematerialsData = parseBasematerialsNode(basematerialsNode);\n          resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n        } //\n\n        resourcesData['texture2d'] = {};\n        var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n        for (var _i4 = 0; _i4 < textures2DNodes.length; _i4++) {\n          var textures2DNode = textures2DNodes[_i4];\n          var texture2DData = parseTexture2DNode(textures2DNode);\n          resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n        } //\n\n        resourcesData['colorgroup'] = {};\n        var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n        for (var _i5 = 0; _i5 < colorGroupNodes.length; _i5++) {\n          var colorGroupNode = colorGroupNodes[_i5];\n          var colorGroupData = parseColorGroupNode(colorGroupNode);\n          resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n        } //\n\n        resourcesData['pbmetallicdisplayproperties'] = {};\n        var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n        for (var _i6 = 0; _i6 < pbmetallicdisplaypropertiesNodes.length; _i6++) {\n          var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[_i6];\n          var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n          resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n        } //\n\n        resourcesData['texture2dgroup'] = {};\n        var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n        for (var _i7 = 0; _i7 < textures2DGroupNodes.length; _i7++) {\n          var textures2DGroupNode = textures2DGroupNodes[_i7];\n          var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n          resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n        } //\n\n        resourcesData['object'] = {};\n        var objectNodes = resourcesNode.querySelectorAll('object');\n        for (var _i8 = 0; _i8 < objectNodes.length; _i8++) {\n          var objectNode = objectNodes[_i8];\n          var objectData = parseObjectNode(objectNode);\n          resourcesData['object'][objectData['id']] = objectData;\n        }\n        return resourcesData;\n      }\n      function parseBuildNode(buildNode) {\n        var buildData = [];\n        var itemNodes = buildNode.querySelectorAll('item');\n        for (var i = 0; i < itemNodes.length; i++) {\n          var itemNode = itemNodes[i];\n          var buildItem = {\n            objectId: itemNode.getAttribute('objectid')\n          };\n          var transform = itemNode.getAttribute('transform');\n          if (transform) {\n            buildItem['transform'] = parseTransform(transform);\n          }\n          buildData.push(buildItem);\n        }\n        return buildData;\n      }\n      function parseModelNode(modelNode) {\n        var modelData = {\n          unit: modelNode.getAttribute('unit') || 'millimeter'\n        };\n        var metadataNodes = modelNode.querySelectorAll('metadata');\n        if (metadataNodes) {\n          modelData['metadata'] = parseMetadataNodes(metadataNodes);\n        }\n        var resourcesNode = modelNode.querySelector('resources');\n        if (resourcesNode) {\n          modelData['resources'] = parseResourcesNode(resourcesNode);\n        }\n        var buildNode = modelNode.querySelector('build');\n        if (buildNode) {\n          modelData['build'] = parseBuildNode(buildNode);\n        }\n        return modelData;\n      }\n      function buildTexture(texture2dgroup, objects, modelData, textureData) {\n        var texid = texture2dgroup.texid;\n        var texture2ds = modelData.resources.texture2d;\n        var texture2d = texture2ds[texid];\n        if (texture2d) {\n          var _data = textureData[texture2d.path];\n          var type = texture2d.contenttype;\n          var blob = new Blob([_data], {\n            type: type\n          });\n          var sourceURI = URL.createObjectURL(blob);\n          var texture = textureLoader.load(sourceURI, function () {\n            URL.revokeObjectURL(sourceURI);\n          });\n          texture.encoding = sRGBEncoding; // texture parameters\n\n          switch (texture2d.tilestyleu) {\n            case 'wrap':\n              texture.wrapS = RepeatWrapping;\n              break;\n            case 'mirror':\n              texture.wrapS = MirroredRepeatWrapping;\n              break;\n            case 'none':\n            case 'clamp':\n              texture.wrapS = ClampToEdgeWrapping;\n              break;\n            default:\n              texture.wrapS = RepeatWrapping;\n          }\n          switch (texture2d.tilestylev) {\n            case 'wrap':\n              texture.wrapT = RepeatWrapping;\n              break;\n            case 'mirror':\n              texture.wrapT = MirroredRepeatWrapping;\n              break;\n            case 'none':\n            case 'clamp':\n              texture.wrapT = ClampToEdgeWrapping;\n              break;\n            default:\n              texture.wrapT = RepeatWrapping;\n          }\n          switch (texture2d.filter) {\n            case 'auto':\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearMipmapLinearFilter;\n              break;\n            case 'linear':\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearFilter;\n              break;\n            case 'nearest':\n              texture.magFilter = NearestFilter;\n              texture.minFilter = NearestFilter;\n              break;\n            default:\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearMipmapLinearFilter;\n          }\n          return texture;\n        } else {\n          return null;\n        }\n      }\n      function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n        var objectPindex = objectData.pindex;\n        var materialMap = {};\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n          if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n          materialMap[pindex].push(triangleProperty);\n        } //\n\n        var keys = Object.keys(materialMap);\n        var meshes = [];\n        for (var _i9 = 0, _l = keys.length; _i9 < _l; _i9++) {\n          var materialIndex = keys[_i9];\n          var trianglePropertiesProps = materialMap[materialIndex];\n          var basematerialData = basematerials.basematerials[materialIndex];\n          var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n          var geometry = new BufferGeometry();\n          var positionData = [];\n          var vertices = meshData.vertices;\n          for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n            var _triangleProperty = trianglePropertiesProps[j];\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 2]);\n          }\n          geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n          var mesh = new Mesh(geometry, material);\n          meshes.push(mesh);\n        }\n        return meshes;\n      }\n      function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n        // geometry\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var uvData = [];\n        var vertices = meshData.vertices;\n        var uvs = texture2dgroup.uvs;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n          uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n        }\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n        var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n        var material = new MeshPhongMaterial({\n          map: texture,\n          flatShading: true\n        }); // mesh\n\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData) {\n        // geometry\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var colorData = [];\n        var vertices = meshData.vertices;\n        var colors = colorgroup.colors;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var v1 = triangleProperty.v1;\n          var v2 = triangleProperty.v2;\n          var v3 = triangleProperty.v3;\n          positionData.push(vertices[v1 * 3 + 0]);\n          positionData.push(vertices[v1 * 3 + 1]);\n          positionData.push(vertices[v1 * 3 + 2]);\n          positionData.push(vertices[v2 * 3 + 0]);\n          positionData.push(vertices[v2 * 3 + 1]);\n          positionData.push(vertices[v2 * 3 + 2]);\n          positionData.push(vertices[v3 * 3 + 0]);\n          positionData.push(vertices[v3 * 3 + 1]);\n          positionData.push(vertices[v3 * 3 + 2]); //\n\n          var p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n          var p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n          var p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n          colorData.push(colors[p1 * 3 + 0]);\n          colorData.push(colors[p1 * 3 + 1]);\n          colorData.push(colors[p1 * 3 + 2]);\n          colorData.push(colors[p2 * 3 + 0]);\n          colorData.push(colors[p2 * 3 + 1]);\n          colorData.push(colors[p2 * 3 + 2]);\n          colorData.push(colors[p3 * 3 + 0]);\n          colorData.push(colors[p3 * 3 + 1]);\n          colorData.push(colors[p3 * 3 + 2]);\n        }\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n        var material = new MeshPhongMaterial({\n          vertexColors: true,\n          flatShading: true\n        }); // mesh\n\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildDefaultMesh(meshData) {\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n        geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n        var material = new MeshPhongMaterial({\n          color: 0xaaaaff,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n        var keys = Object.keys(resourceMap);\n        var meshes = [];\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var resourceId = keys[i];\n          var triangleProperties = resourceMap[resourceId];\n          var resourceType = getResourceType(resourceId, modelData);\n          switch (resourceType) {\n            case 'material':\n              var basematerials = modelData.resources.basematerials[resourceId];\n              var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\n              for (var j = 0, jl = newMeshes.length; j < jl; j++) {\n                meshes.push(newMeshes[j]);\n              }\n              break;\n            case 'texture':\n              var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n              meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\n              break;\n            case 'vertexColors':\n              var colorgroup = modelData.resources.colorgroup[resourceId];\n              meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData));\n              break;\n            case 'default':\n              meshes.push(buildDefaultMesh(meshData));\n              break;\n            default:\n              console.error('THREE.3MFLoader: Unsupported resource type.');\n          }\n        }\n        return meshes;\n      }\n      function getResourceType(pid, modelData) {\n        if (modelData.resources.texture2dgroup[pid] !== undefined) {\n          return 'texture';\n        } else if (modelData.resources.basematerials[pid] !== undefined) {\n          return 'material';\n        } else if (modelData.resources.colorgroup[pid] !== undefined) {\n          return 'vertexColors';\n        } else if (pid === 'default') {\n          return 'default';\n        } else {\n          return undefined;\n        }\n      }\n      function analyzeObject(modelData, meshData, objectData) {\n        var resourceMap = {};\n        var triangleProperties = meshData['triangleProperties'];\n        var objectPid = objectData.pid;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n          if (pid === undefined) pid = 'default';\n          if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n          resourceMap[pid].push(triangleProperty);\n        }\n        return resourceMap;\n      }\n      function buildGroup(meshData, objects, modelData, textureData, objectData) {\n        var group = new Group();\n        var resourceMap = analyzeObject(modelData, meshData, objectData);\n        var meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\n        for (var i = 0, l = meshes.length; i < l; i++) {\n          group.add(meshes[i]);\n        }\n        return group;\n      }\n      function applyExtensions(extensions, meshData, modelXml) {\n        if (!extensions) {\n          return;\n        }\n        var availableExtensions = [];\n        var keys = Object.keys(extensions);\n        for (var i = 0; i < keys.length; i++) {\n          var ns = keys[i];\n          for (var j = 0; j < scope.availableExtensions.length; j++) {\n            var extension = scope.availableExtensions[j];\n            if (extension.ns === ns) {\n              availableExtensions.push(extension);\n            }\n          }\n        }\n        for (var _i10 = 0; _i10 < availableExtensions.length; _i10++) {\n          var _extension = availableExtensions[_i10];\n          _extension.apply(modelXml, extensions[_extension['ns']], meshData);\n        }\n      }\n      function getBuild(data, objects, modelData, textureData, objectData, builder) {\n        if (data.build !== undefined) return data.build;\n        data.build = builder(data, objects, modelData, textureData, objectData);\n        return data.build;\n      }\n      function buildBasematerial(materialData, objects, modelData) {\n        var material;\n        var displaypropertiesid = materialData.displaypropertiesid;\n        var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n        if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n          // metallic display property, use StandardMaterial\n          var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n          var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n          material = new MeshStandardMaterial({\n            flatShading: true,\n            roughness: metallicData.roughness,\n            metalness: metallicData.metallicness\n          });\n        } else {\n          // otherwise use PhongMaterial\n          material = new MeshPhongMaterial({\n            flatShading: true\n          });\n        }\n        material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n        var displaycolor = materialData.displaycolor;\n        var color = displaycolor.substring(0, 7);\n        material.color.setStyle(color);\n        material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n        // process alpha if set\n\n        if (displaycolor.length === 9) {\n          material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n        }\n        return material;\n      }\n      function buildComposite(compositeData, objects, modelData, textureData) {\n        var composite = new Group();\n        for (var j = 0; j < compositeData.length; j++) {\n          var component = compositeData[j];\n          var _build = objects[component.objectId];\n          if (_build === undefined) {\n            buildObject(component.objectId, objects, modelData, textureData);\n            _build = objects[component.objectId];\n          }\n          var object3D = _build.clone(); // apply component transform\n\n          var transform = component.transform;\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n          composite.add(object3D);\n        }\n        return composite;\n      }\n      function buildObject(objectId, objects, modelData, textureData) {\n        var objectData = modelData['resources']['object'][objectId];\n        if (objectData['mesh']) {\n          var meshData = objectData['mesh'];\n          var extensions = modelData['extensions'];\n          var modelXml = modelData['xml'];\n          applyExtensions(extensions, meshData, modelXml);\n          objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n        } else {\n          var compositeData = objectData['components'];\n          objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n        }\n      }\n      function buildObjects(data3mf) {\n        var modelsData = data3mf.model;\n        var modelRels = data3mf.modelRels;\n        var objects = {};\n        var modelsKeys = Object.keys(modelsData);\n        var textureData = {}; // evaluate model relationships to textures\n\n        if (modelRels) {\n          for (var i = 0, l = modelRels.length; i < l; i++) {\n            var modelRel = modelRels[i];\n            var textureKey = modelRel.target.substring(1);\n            if (data3mf.texture[textureKey]) {\n              textureData[modelRel.target] = data3mf.texture[textureKey];\n            }\n          }\n        } // start build\n\n        for (var _i11 = 0; _i11 < modelsKeys.length; _i11++) {\n          var modelsKey = modelsKeys[_i11];\n          var modelData = modelsData[modelsKey];\n          var objectIds = Object.keys(modelData['resources']['object']);\n          for (var j = 0; j < objectIds.length; j++) {\n            var objectId = objectIds[j];\n            buildObject(objectId, objects, modelData, textureData);\n          }\n        }\n        return objects;\n      }\n      function fetch3DModelPart(rels) {\n        for (var i = 0; i < rels.length; i++) {\n          var rel = rels[i];\n          var extension = rel.target.split('.').pop();\n          if (extension.toLowerCase() === 'model') return rel;\n        }\n      }\n      function build(objects, data3mf) {\n        var group = new Group();\n        var relationship = fetch3DModelPart(data3mf['rels']);\n        var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n        for (var i = 0; i < buildData.length; i++) {\n          var buildItem = buildData[i];\n          var object3D = objects[buildItem['objectId']]; // apply transform\n\n          var transform = buildItem['transform'];\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n          group.add(object3D);\n        }\n        return group;\n      }\n      var data3mf = loadDocument(data);\n      var objects = buildObjects(data3mf);\n      return build(objects, data3mf);\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extension) {\n      this.availableExtensions.push(extension);\n    }\n  }]);\n  return ThreeMFLoader;\n}(Loader);\nexport { ThreeMFLoader };","map":null,"metadata":{},"sourceType":"module"}