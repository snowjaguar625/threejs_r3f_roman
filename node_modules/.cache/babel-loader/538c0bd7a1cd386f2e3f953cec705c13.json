{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\nvar SimplexNoise =\n// To remove the need for index wrapping, double the permutation table length\n// A lookup table to traverse the simplex around a given point in 4D.\n// Details can be found where this table is used, in the 4D noise method.\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nfunction SimplexNoise() {\n  var _this = this;\n  var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math;\n  _classCallCheck(this, SimplexNoise);\n  _defineProperty(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n  _defineProperty(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n  _defineProperty(this, \"p\", []);\n  _defineProperty(this, \"perm\", []);\n  _defineProperty(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n  _defineProperty(this, \"dot\", function (g, x, y) {\n    return g[0] * x + g[1] * y;\n  });\n  _defineProperty(this, \"dot3\", function (g, x, y, z) {\n    return g[0] * x + g[1] * y + g[2] * z;\n  });\n  _defineProperty(this, \"dot4\", function (g, x, y, z, w) {\n    return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n  });\n  _defineProperty(this, \"noise\", function (xin, yin) {\n    var n0;\n    var n1;\n    var n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n    var t = (i + j) * G2;\n    var X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n    var Y0 = j - t;\n    var x0 = xin - X0; // The x,y distances from the cell origin\n\n    var y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n    var i1 = 0; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n    var j1 = 1;\n    if (x0 > y0) {\n      i1 = 1;\n      j1 = 0;\n    } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n    var y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var gi0 = _this.perm[ii + _this.perm[jj]] % 12;\n    var gi1 = _this.perm[ii + i1 + _this.perm[jj + j1]] % 12;\n    var gi2 = _this.perm[ii + 1 + _this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\n\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 < 0) {\n      n0 = 0.0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot(_this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 < 0) {\n      n1 = 0.0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot(_this.grad3[gi1], x1, y1);\n    }\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 < 0) {\n      n2 = 0.0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot(_this.grad3[gi2], x2, y2);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n    return 70.0 * (n0 + n1 + n2);\n  });\n  _defineProperty(this, \"noise3d\", function (xin, yin, zin) {\n    // Noise contributions from the four corners\n    var n0;\n    var n1;\n    var n2;\n    var n3; // Skew the input space to determine which simplex cell we're in\n\n    var F3 = 1.0 / 3.0;\n    var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n    var G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n    var t = (i + j + k) * G3;\n    var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n    var Y0 = j - t;\n    var Z0 = k - t;\n    var x0 = xin - X0; // The x,y,z distances from the cell origin\n\n    var y0 = yin - Y0;\n    var z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n\n    var i1;\n    var j1;\n    var k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n    var i2;\n    var j2;\n    var k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0; // X Y Z order\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1; // X Z Y order\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } // Z X Y order\n    } else {\n      // x0<y0\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1; // Z Y X order\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1; // Y Z X order\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // Y X Z order\n    } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n\n    var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n    var y2 = y0 - j2 + 2.0 * G3;\n    var z2 = z0 - k2 + 2.0 * G3;\n    var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n    var y3 = y0 - 1.0 + 3.0 * G3;\n    var z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var kk = k & 255;\n    var gi0 = _this.perm[ii + _this.perm[jj + _this.perm[kk]]] % 12;\n    var gi1 = _this.perm[ii + i1 + _this.perm[jj + j1 + _this.perm[kk + k1]]] % 12;\n    var gi2 = _this.perm[ii + i2 + _this.perm[jj + j2 + _this.perm[kk + k2]]] % 12;\n    var gi3 = _this.perm[ii + 1 + _this.perm[jj + 1 + _this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) {\n      n0 = 0.0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot3(_this.grad3[gi0], x0, y0, z0);\n    }\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) {\n      n1 = 0.0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot3(_this.grad3[gi1], x1, y1, z1);\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) {\n      n2 = 0.0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot3(_this.grad3[gi2], x2, y2, z2);\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) {\n      n3 = 0.0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * _this.dot3(_this.grad3[gi3], x3, y3, z3);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n\n    return 32.0 * (n0 + n1 + n2 + n3);\n  });\n  _defineProperty(this, \"noise4d\", function (x, y, z, w) {\n    // For faster and easier lookups\n    var grad4 = _this.grad4;\n    var simplex = _this.simplex;\n    var perm = _this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n    var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n    var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n    var n0;\n    var n1;\n    var n2;\n    var n3;\n    var n4; // Noise contributions from the five corners\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n    var s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n    var i = Math.floor(x + s);\n    var j = Math.floor(y + s);\n    var k = Math.floor(z + s);\n    var l = Math.floor(w + s);\n    var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n    var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n    var Y0 = j - t;\n    var Z0 = k - t;\n    var W0 = l - t;\n    var x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n    var y0 = y - Y0;\n    var z0 = z - Z0;\n    var w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n    // To find out which of the 24 possible simplices we're in, we need to\n    // determine the magnitude ordering of x0, y0, z0 and w0.\n    // The method below is a good way of finding the ordering of x,y,z,w and\n    // then find the correct traversal order for the simplex we’re in.\n    // First, six pair-wise comparisons are performed between each possible pair\n    // of the four coordinates, and the results are used to add up binary bits\n    // for an integer index.\n\n    var c1 = x0 > y0 ? 32 : 0;\n    var c2 = x0 > z0 ? 16 : 0;\n    var c3 = y0 > z0 ? 8 : 0;\n    var c4 = x0 > w0 ? 4 : 0;\n    var c5 = y0 > w0 ? 2 : 0;\n    var c6 = z0 > w0 ? 1 : 0;\n    var c = c1 + c2 + c3 + c4 + c5 + c6; // The integer offsets for the second simplex corner\n\n    var i1;\n    var j1;\n    var k1;\n    var l1; // The integer offsets for the third simplex corner\n\n    var i2;\n    var j2;\n    var k2;\n    var l2; // The integer offsets for the fourth simplex corner\n\n    var i3;\n    var j3;\n    var k3;\n    var l3; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n    i1 = simplex[c][0] >= 3 ? 1 : 0;\n    j1 = simplex[c][1] >= 3 ? 1 : 0;\n    k1 = simplex[c][2] >= 3 ? 1 : 0;\n    l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n    i2 = simplex[c][0] >= 2 ? 1 : 0;\n    j2 = simplex[c][1] >= 2 ? 1 : 0;\n    k2 = simplex[c][2] >= 2 ? 1 : 0;\n    l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n    i3 = simplex[c][0] >= 1 ? 1 : 0;\n    j3 = simplex[c][1] >= 1 ? 1 : 0;\n    k3 = simplex[c][2] >= 1 ? 1 : 0;\n    l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n    var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n    var y1 = y0 - j1 + G4;\n    var z1 = z0 - k1 + G4;\n    var w1 = w0 - l1 + G4;\n    var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n    var y2 = y0 - j2 + 2.0 * G4;\n    var z2 = z0 - k2 + 2.0 * G4;\n    var w2 = w0 - l2 + 2.0 * G4;\n    var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n    var y3 = y0 - j3 + 3.0 * G4;\n    var z3 = z0 - k3 + 3.0 * G4;\n    var w3 = w0 - l3 + 3.0 * G4;\n    var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n    var y4 = y0 - 1.0 + 4.0 * G4;\n    var z4 = z0 - 1.0 + 4.0 * G4;\n    var w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var kk = k & 255;\n    var ll = l & 255;\n    var gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n    var gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n    var gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n    var gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n    var gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n    if (t0 < 0) {\n      n0 = 0.0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot4(grad4[gi0], x0, y0, z0, w0);\n    }\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n    if (t1 < 0) {\n      n1 = 0.0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot4(grad4[gi1], x1, y1, z1, w1);\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n    if (t2 < 0) {\n      n2 = 0.0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot4(grad4[gi2], x2, y2, z2, w2);\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n    if (t3 < 0) {\n      n3 = 0.0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * _this.dot4(grad4[gi3], x3, y3, z3, w3);\n    }\n    var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n    if (t4 < 0) {\n      n4 = 0.0;\n    } else {\n      t4 *= t4;\n      n4 = t4 * t4 * _this.dot4(grad4[gi4], x4, y4, z4, w4);\n    } // Sum up and scale the result to cover the range [-1,1]\n\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n  });\n  for (var i = 0; i < 256; i++) {\n    this.p[i] = Math.floor(r.random() * 256);\n  }\n  for (var _i = 0; _i < 512; _i++) {\n    this.perm[_i] = this.p[_i & 255];\n  }\n};\nexport { SimplexNoise };","map":null,"metadata":{},"sourceType":"module"}