{"ast":null,"code":"import _slicedToArray from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _construct from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useGizmoContext } from './GizmoHelper.js';\nimport { Vector3, CanvasTexture } from 'three';\nvar colors = {\n  bg: '#f0f0f0',\n  hover: '#999',\n  text: 'black',\n  stroke: 'black'\n};\nvar defaultFaces = ['Right', 'Left', 'Top', 'Bottom', 'Front', 'Back'];\nvar makePositionVector = function makePositionVector(xyz) {\n  return _construct(Vector3, _toConsumableArray(xyz)).multiplyScalar(0.38);\n};\nvar corners = [[1, 1, 1], [1, 1, -1], [1, -1, 1], [1, -1, -1], [-1, 1, 1], [-1, 1, -1], [-1, -1, 1], [-1, -1, -1]].map(makePositionVector);\nvar cornerDimensions = [0.25, 0.25, 0.25];\nvar edges = [[1, 1, 0], [1, 0, 1], [1, 0, -1], [1, -1, 0], [0, 1, 1], [0, 1, -1], [0, -1, 1], [0, -1, -1], [-1, 1, 0], [-1, 0, 1], [-1, 0, -1], [-1, -1, 0]].map(makePositionVector);\nvar edgeDimensions = edges.map(function (edge) {\n  return edge.toArray().map(function (axis) {\n    return axis == 0 ? 0.5 : 0.25;\n  });\n});\nvar FaceMaterial = function FaceMaterial(_ref) {\n  var hover = _ref.hover,\n    index = _ref.index,\n    _ref$font = _ref.font,\n    font = _ref$font === void 0 ? '20px Inter var, Arial, sans-serif' : _ref$font,\n    _ref$faces = _ref.faces,\n    faces = _ref$faces === void 0 ? defaultFaces : _ref$faces,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? colors.bg : _ref$color,\n    _ref$hoverColor = _ref.hoverColor,\n    hoverColor = _ref$hoverColor === void 0 ? colors.hover : _ref$hoverColor,\n    _ref$textColor = _ref.textColor,\n    textColor = _ref$textColor === void 0 ? colors.text : _ref$textColor,\n    _ref$strokeColor = _ref.strokeColor,\n    strokeColor = _ref$strokeColor === void 0 ? colors.stroke : _ref$strokeColor,\n    _ref$opacity = _ref.opacity,\n    opacity = _ref$opacity === void 0 ? 1 : _ref$opacity;\n  var texture = React.useMemo(function () {\n    var canvas = document.createElement('canvas');\n    canvas.width = 128;\n    canvas.height = 128;\n    var context = canvas.getContext('2d');\n    context.fillStyle = color;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    context.strokeStyle = strokeColor;\n    context.strokeRect(0, 0, canvas.width, canvas.height);\n    context.font = font;\n    context.textAlign = 'center';\n    context.fillStyle = textColor;\n    context.fillText(faces[index].toUpperCase(), 64, 76);\n    return new CanvasTexture(canvas);\n  }, [index, font, color, textColor, strokeColor]);\n  return /*#__PURE__*/React.createElement(\"meshLambertMaterial\", {\n    map: texture,\n    attachArray: \"material\",\n    color: hover ? hoverColor : 'white',\n    transparent: true,\n    opacity: opacity\n  });\n};\nvar FaceCube = function FaceCube(props) {\n  var _useGizmoContext = useGizmoContext(),\n    tweenCamera = _useGizmoContext.tweenCamera,\n    raycast = _useGizmoContext.raycast;\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    hover = _React$useState2[0],\n    setHover = _React$useState2[1];\n  var handlePointerOut = function handlePointerOut(e) {\n    e.stopPropagation();\n    setHover(null);\n  };\n  var handleClick = function handleClick(e) {\n    e.stopPropagation();\n    tweenCamera(e.face.normal);\n  };\n  var handlePointerMove = function handlePointerMove(e) {\n    e.stopPropagation();\n    setHover(Math.floor(e.faceIndex / 2));\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    raycast: raycast,\n    onPointerOut: handlePointerOut,\n    onPointerMove: handlePointerMove,\n    onClick: props.onClick || handleClick\n  }, _toConsumableArray(Array(6)).map(function (_, index) {\n    return /*#__PURE__*/React.createElement(FaceMaterial, _extends({\n      key: index,\n      index: index,\n      hover: hover === index\n    }, props));\n  }), /*#__PURE__*/React.createElement(\"boxGeometry\", null));\n};\nvar EdgeCube = function EdgeCube(_ref2) {\n  var onClick = _ref2.onClick,\n    dimensions = _ref2.dimensions,\n    position = _ref2.position,\n    _ref2$hoverColor = _ref2.hoverColor,\n    hoverColor = _ref2$hoverColor === void 0 ? colors.hover : _ref2$hoverColor;\n  var _useGizmoContext2 = useGizmoContext(),\n    tweenCamera = _useGizmoContext2.tweenCamera,\n    raycast = _useGizmoContext2.raycast;\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    hover = _React$useState4[0],\n    setHover = _React$useState4[1];\n  var handlePointerOut = function handlePointerOut(e) {\n    e.stopPropagation();\n    setHover(false);\n  };\n  var handlePointerOver = function handlePointerOver(e) {\n    e.stopPropagation();\n    setHover(true);\n  };\n  var handleClick = function handleClick(e) {\n    e.stopPropagation();\n    tweenCamera(position);\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    scale: 1.01,\n    position: position,\n    raycast: raycast,\n    onPointerOver: handlePointerOver,\n    onPointerOut: handlePointerOut,\n    onClick: onClick || handleClick\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    color: hover ? hoverColor : 'white',\n    transparent: true,\n    opacity: 0.6,\n    visible: hover\n  }), /*#__PURE__*/React.createElement(\"boxGeometry\", {\n    args: dimensions\n  }));\n};\nvar GizmoViewcube = function GizmoViewcube(props) {\n  return /*#__PURE__*/React.createElement(\"group\", {\n    scale: [60, 60, 60]\n  }, /*#__PURE__*/React.createElement(FaceCube, props), edges.map(function (edge, index) {\n    return /*#__PURE__*/React.createElement(EdgeCube, _extends({\n      key: index,\n      position: edge,\n      dimensions: edgeDimensions[index]\n    }, props));\n  }), corners.map(function (corner, index) {\n    return /*#__PURE__*/React.createElement(EdgeCube, _extends({\n      key: index,\n      position: corner,\n      dimensions: cornerDimensions\n    }, props));\n  }), /*#__PURE__*/React.createElement(\"ambientLight\", {\n    intensity: 0.5\n  }), /*#__PURE__*/React.createElement(\"pointLight\", {\n    position: [10, 10, 10],\n    intensity: 0.5\n  }));\n};\nexport { GizmoViewcube };","map":null,"metadata":{},"sourceType":"module"}