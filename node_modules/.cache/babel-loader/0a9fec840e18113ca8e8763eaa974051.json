{"ast":null,"code":"import { Vector3, Vector2, Triangle, DoubleSide, BackSide } from 'three';\n\n// Ripped and modified From THREE.js Mesh raycast\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\nvar vA = /* @__PURE__ */new Vector3();\nvar vB = /* @__PURE__ */new Vector3();\nvar vC = /* @__PURE__ */new Vector3();\nvar uvA = /* @__PURE__ */new Vector2();\nvar uvB = /* @__PURE__ */new Vector2();\nvar uvC = /* @__PURE__ */new Vector2();\nvar intersectionPoint = /* @__PURE__ */new Vector3();\nfunction checkIntersection(ray, pA, pB, pC, point, side) {\n  var intersect;\n  if (side === BackSide) {\n    intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n  } else {\n    intersect = ray.intersectTriangle(pA, pB, pC, side !== DoubleSide, point);\n  }\n  if (intersect === null) return null;\n  var distance = ray.origin.distanceTo(point);\n  return {\n    distance: distance,\n    point: point.clone()\n  };\n}\nfunction checkBufferGeometryIntersection(ray, position, uv, a, b, c, side) {\n  vA.fromBufferAttribute(position, a);\n  vB.fromBufferAttribute(position, b);\n  vC.fromBufferAttribute(position, c);\n  var intersection = checkIntersection(ray, vA, vB, vC, intersectionPoint, side);\n  if (intersection) {\n    if (uv) {\n      uvA.fromBufferAttribute(uv, a);\n      uvB.fromBufferAttribute(uv, b);\n      uvC.fromBufferAttribute(uv, c);\n      intersection.uv = Triangle.getUV(intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2());\n    }\n    var face = {\n      a: a,\n      b: b,\n      c: c,\n      normal: new Vector3(),\n      materialIndex: 0\n    };\n    Triangle.getNormal(vA, vB, vC, face.normal);\n    intersection.face = face;\n    intersection.faceIndex = a;\n  }\n  return intersection;\n}\n\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\nfunction intersectTri(geo, side, ray, tri, intersections) {\n  var triOffset = tri * 3;\n  var a = geo.index.getX(triOffset);\n  var b = geo.index.getX(triOffset + 1);\n  var c = geo.index.getX(triOffset + 2);\n  var intersection = checkBufferGeometryIntersection(ray, geo.attributes.position, geo.attributes.uv, a, b, c, side);\n  if (intersection) {\n    intersection.faceIndex = tri;\n    if (intersections) intersections.push(intersection);\n    return intersection;\n  }\n  return null;\n}\nexport { intersectTri };","map":null,"metadata":{},"sourceType":"module"}