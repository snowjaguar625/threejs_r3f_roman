{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nvar SSAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(SSAOPass, _Pass);\n  function SSAOPass(scene, camera, width, height) {\n    var _this;\n    _classCallCheck(this, SSAOPass);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SSAOPass).call(this));\n    _this.width = width !== undefined ? width : 512;\n    _this.height = height !== undefined ? height : 512;\n    _this.clear = true;\n    _this.camera = camera;\n    _this.scene = scene;\n    _this.kernelRadius = 8;\n    _this.kernelSize = 32;\n    _this.kernel = [];\n    _this.noiseTexture = null;\n    _this.output = 0;\n    _this.minDistance = 0.005;\n    _this.maxDistance = 0.1;\n    _this._visibilityCache = new Map(); //\n\n    _this.generateSampleKernel();\n    _this.generateRandomKernelRotations(); // beauty render target\n\n    var depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height); // normal render target with depth buffer\n\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    }); // ssao render target\n\n    _this.ssaoRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.blurRenderTarget = _this.ssaoRenderTarget.clone(); // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n    }\n    _this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssaoMaterial.uniforms['tDiffuse'].value = _this.beautyRenderTarget.texture;\n    _this.ssaoMaterial.uniforms['tNormal'].value = _this.normalRenderTarget.texture;\n    _this.ssaoMaterial.uniforms['tDepth'].value = _this.normalRenderTarget.depthTexture;\n    _this.ssaoMaterial.uniforms['tNoise'].value = _this.noiseTexture;\n    _this.ssaoMaterial.uniforms['kernel'].value = _this.kernel;\n    _this.ssaoMaterial.uniforms['cameraNear'].value = _this.camera.near;\n    _this.ssaoMaterial.uniforms['cameraFar'].value = _this.camera.far;\n    _this.ssaoMaterial.uniforms['resolution'].value.set(_this.width, _this.height);\n    _this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(_this.camera.projectionMatrix);\n    _this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(_this.camera.projectionMatrixInverse); // normal material\n\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending; // blur material\n\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms['tDiffuse'].value = _this.ssaoRenderTarget.texture;\n    _this.blurMaterial.uniforms['resolution'].value.set(_this.width, _this.height); // material for rendering the depth\n\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms['tDepth'].value = _this.normalRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms['cameraNear'].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms['cameraFar'].value = _this.camera.far; // material for rendering the content of a render target\n\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n  _createClass(SSAOPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      // dispose render targets\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.ssaoRenderTarget.dispose();\n      this.blurRenderTarget.dispose(); // dispose materials\n\n      this.normalMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer\n    /*, readBuffer, deltaTime, maskActive */) {\n      if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\n\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n      this.restoreVisibility(); // render SSAO\n\n      this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n      this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n      this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n      this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n      switch (this.output) {\n        case SSAOPass.OUTPUT.SSAO:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Blur:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Default:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = CustomBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn('THREE.SSAOPass: Unknown output type.');\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      // save original state\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget); // setup pass state\n\n      renderer.autoClear = false;\n      if (clearColor !== undefined && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0.0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer); // restore original state\n\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== undefined && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0.0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null; // restore original state\n\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.beautyRenderTarget.setSize(width, height);\n      this.ssaoRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n      this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms['resolution'].value.set(width, height);\n    }\n  }, {\n    key: \"generateSampleKernel\",\n    value: function generateSampleKernel() {\n      var kernelSize = this.kernelSize;\n      var kernel = this.kernel;\n      for (var i = 0; i < kernelSize; i++) {\n        var sample = new Vector3();\n        sample.x = Math.random() * 2 - 1;\n        sample.y = Math.random() * 2 - 1;\n        sample.z = Math.random();\n        sample.normalize();\n        var scale = i / kernelSize;\n        scale = MathUtils.lerp(0.1, 1, scale * scale);\n        sample.multiplyScalar(scale);\n        kernel.push(sample);\n      }\n    }\n  }, {\n    key: \"generateRandomKernelRotations\",\n    value: function generateRandomKernelRotations() {\n      var width = 4,\n        height = 4;\n      if (SimplexNoise === undefined) {\n        console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n      }\n      var simplex = new SimplexNoise();\n      var size = width * height;\n      var data = new Float32Array(size);\n      for (var i = 0; i < size; i++) {\n        var x = Math.random() * 2 - 1;\n        var y = Math.random() * 2 - 1;\n        var z = 0;\n        data[i] = simplex.noise3d(x, y, z);\n      }\n      this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n      this.noiseTexture.wrapS = RepeatWrapping;\n      this.noiseTexture.wrapT = RepeatWrapping;\n      this.noiseTexture.needsUpdate = true;\n    }\n  }, {\n    key: \"overrideVisibility\",\n    value: function overrideVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        cache.set(object, object.visible);\n        if (object.isPoints || object.isLine) object.visible = false;\n      });\n    }\n  }, {\n    key: \"restoreVisibility\",\n    value: function restoreVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        var visible = cache.get(object);\n        object.visible = visible;\n      });\n      cache.clear();\n    }\n  }]);\n  return SSAOPass;\n}(Pass);\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\nexport { SSAOPass };","map":null,"metadata":{},"sourceType":"module"}