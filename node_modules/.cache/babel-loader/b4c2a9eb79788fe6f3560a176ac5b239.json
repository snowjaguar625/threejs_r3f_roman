{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport { ShaderNode, sub, mul, pow, vec3, lessThanEqual, mix, join } from '../ShaderNode.js';\nimport { LinearEncoding, sRGBEncoding } from 'three';\nvar LinearToLinear = new ShaderNode(function (inputs) {\n  return inputs.value;\n});\nvar LinearTosRGB = new ShaderNode(function (inputs) {\n  var value = inputs.value;\n  var rgb = value.rgb;\n  var a = sub(mul(pow(value.rgb, vec3(0.41666)), 1.055), vec3(0.055));\n  var b = mul(rgb, 12.92);\n  var factor = vec3(lessThanEqual(rgb, vec3(0.0031308)));\n  var rgbResult = mix(a, b, factor);\n  return join(rgbResult.r, rgbResult.g, rgbResult.b, value.a);\n});\nvar EncodingLib = {\n  LinearToLinear: LinearToLinear,\n  LinearTosRGB: LinearTosRGB\n};\nvar ColorSpaceNode = /*#__PURE__*/function (_Node) {\n  _inherits(ColorSpaceNode, _Node);\n  function ColorSpaceNode(method, node) {\n    var _this;\n    _classCallCheck(this, ColorSpaceNode);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColorSpaceNode).call(this, 'vec4'));\n    _this.method = method;\n    _this.node = node;\n    return _this;\n  }\n  _createClass(ColorSpaceNode, [{\n    key: \"fromEncoding\",\n    value: function fromEncoding(encoding) {\n      var method = null;\n      if (encoding === LinearEncoding) {\n        method = 'Linear';\n      } else if (encoding === sRGBEncoding) {\n        method = 'sRGB';\n      }\n      this.method = 'LinearTo' + method;\n      return this;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var type = this.getNodeType(builder);\n      var method = this.method;\n      var node = this.node;\n      if (method !== ColorSpaceNode.LINEAR_TO_LINEAR) {\n        var encodingFunctionNode = EncodingLib[method];\n        return encodingFunctionNode({\n          value: node\n        }).build(builder, type);\n      } else {\n        return node.build(builder, type);\n      }\n    }\n  }]);\n  return ColorSpaceNode;\n}(Node);\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_LINEAR\", 'LinearToLinear');\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_SRGB\", 'LinearTosRGB');\nexport default ColorSpaceNode;\nexport { LinearToLinear, LinearTosRGB };","map":null,"metadata":{},"sourceType":"module"}