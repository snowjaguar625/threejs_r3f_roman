{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Loader, FileLoader, BufferGeometry, Vector3, Float32BufferAttribute, AnimationClip } from 'three';\nvar _normalData = [[-0.525731, 0.0, 0.850651], [-0.442863, 0.238856, 0.864188], [-0.295242, 0.0, 0.955423], [-0.309017, 0.5, 0.809017], [-0.16246, 0.262866, 0.951056], [0.0, 0.0, 1.0], [0.0, 0.850651, 0.525731], [-0.147621, 0.716567, 0.681718], [0.147621, 0.716567, 0.681718], [0.0, 0.525731, 0.850651], [0.309017, 0.5, 0.809017], [0.525731, 0.0, 0.850651], [0.295242, 0.0, 0.955423], [0.442863, 0.238856, 0.864188], [0.16246, 0.262866, 0.951056], [-0.681718, 0.147621, 0.716567], [-0.809017, 0.309017, 0.5], [-0.587785, 0.425325, 0.688191], [-0.850651, 0.525731, 0.0], [-0.864188, 0.442863, 0.238856], [-0.716567, 0.681718, 0.147621], [-0.688191, 0.587785, 0.425325], [-0.5, 0.809017, 0.309017], [-0.238856, 0.864188, 0.442863], [-0.425325, 0.688191, 0.587785], [-0.716567, 0.681718, -0.147621], [-0.5, 0.809017, -0.309017], [-0.525731, 0.850651, 0.0], [0.0, 0.850651, -0.525731], [-0.238856, 0.864188, -0.442863], [0.0, 0.955423, -0.295242], [-0.262866, 0.951056, -0.16246], [0.0, 1.0, 0.0], [0.0, 0.955423, 0.295242], [-0.262866, 0.951056, 0.16246], [0.238856, 0.864188, 0.442863], [0.262866, 0.951056, 0.16246], [0.5, 0.809017, 0.309017], [0.238856, 0.864188, -0.442863], [0.262866, 0.951056, -0.16246], [0.5, 0.809017, -0.309017], [0.850651, 0.525731, 0.0], [0.716567, 0.681718, 0.147621], [0.716567, 0.681718, -0.147621], [0.525731, 0.850651, 0.0], [0.425325, 0.688191, 0.587785], [0.864188, 0.442863, 0.238856], [0.688191, 0.587785, 0.425325], [0.809017, 0.309017, 0.5], [0.681718, 0.147621, 0.716567], [0.587785, 0.425325, 0.688191], [0.955423, 0.295242, 0.0], [1.0, 0.0, 0.0], [0.951056, 0.16246, 0.262866], [0.850651, -0.525731, 0.0], [0.955423, -0.295242, 0.0], [0.864188, -0.442863, 0.238856], [0.951056, -0.16246, 0.262866], [0.809017, -0.309017, 0.5], [0.681718, -0.147621, 0.716567], [0.850651, 0.0, 0.525731], [0.864188, 0.442863, -0.238856], [0.809017, 0.309017, -0.5], [0.951056, 0.16246, -0.262866], [0.525731, 0.0, -0.850651], [0.681718, 0.147621, -0.716567], [0.681718, -0.147621, -0.716567], [0.850651, 0.0, -0.525731], [0.809017, -0.309017, -0.5], [0.864188, -0.442863, -0.238856], [0.951056, -0.16246, -0.262866], [0.147621, 0.716567, -0.681718], [0.309017, 0.5, -0.809017], [0.425325, 0.688191, -0.587785], [0.442863, 0.238856, -0.864188], [0.587785, 0.425325, -0.688191], [0.688191, 0.587785, -0.425325], [-0.147621, 0.716567, -0.681718], [-0.309017, 0.5, -0.809017], [0.0, 0.525731, -0.850651], [-0.525731, 0.0, -0.850651], [-0.442863, 0.238856, -0.864188], [-0.295242, 0.0, -0.955423], [-0.16246, 0.262866, -0.951056], [0.0, 0.0, -1.0], [0.295242, 0.0, -0.955423], [0.16246, 0.262866, -0.951056], [-0.442863, -0.238856, -0.864188], [-0.309017, -0.5, -0.809017], [-0.16246, -0.262866, -0.951056], [0.0, -0.850651, -0.525731], [-0.147621, -0.716567, -0.681718], [0.147621, -0.716567, -0.681718], [0.0, -0.525731, -0.850651], [0.309017, -0.5, -0.809017], [0.442863, -0.238856, -0.864188], [0.16246, -0.262866, -0.951056], [0.238856, -0.864188, -0.442863], [0.5, -0.809017, -0.309017], [0.425325, -0.688191, -0.587785], [0.716567, -0.681718, -0.147621], [0.688191, -0.587785, -0.425325], [0.587785, -0.425325, -0.688191], [0.0, -0.955423, -0.295242], [0.0, -1.0, 0.0], [0.262866, -0.951056, -0.16246], [0.0, -0.850651, 0.525731], [0.0, -0.955423, 0.295242], [0.238856, -0.864188, 0.442863], [0.262866, -0.951056, 0.16246], [0.5, -0.809017, 0.309017], [0.716567, -0.681718, 0.147621], [0.525731, -0.850651, 0.0], [-0.238856, -0.864188, -0.442863], [-0.5, -0.809017, -0.309017], [-0.262866, -0.951056, -0.16246], [-0.850651, -0.525731, 0.0], [-0.716567, -0.681718, -0.147621], [-0.716567, -0.681718, 0.147621], [-0.525731, -0.850651, 0.0], [-0.5, -0.809017, 0.309017], [-0.238856, -0.864188, 0.442863], [-0.262866, -0.951056, 0.16246], [-0.864188, -0.442863, 0.238856], [-0.809017, -0.309017, 0.5], [-0.688191, -0.587785, 0.425325], [-0.681718, -0.147621, 0.716567], [-0.442863, -0.238856, 0.864188], [-0.587785, -0.425325, 0.688191], [-0.309017, -0.5, 0.809017], [-0.147621, -0.716567, 0.681718], [-0.425325, -0.688191, 0.587785], [-0.16246, -0.262866, 0.951056], [0.442863, -0.238856, 0.864188], [0.16246, -0.262866, 0.951056], [0.309017, -0.5, 0.809017], [0.147621, -0.716567, 0.681718], [0.0, -0.525731, 0.850651], [0.425325, -0.688191, 0.587785], [0.587785, -0.425325, 0.688191], [0.688191, -0.587785, 0.425325], [-0.955423, 0.295242, 0.0], [-0.951056, 0.16246, 0.262866], [-1.0, 0.0, 0.0], [-0.850651, 0.0, 0.525731], [-0.955423, -0.295242, 0.0], [-0.951056, -0.16246, 0.262866], [-0.864188, 0.442863, -0.238856], [-0.951056, 0.16246, -0.262866], [-0.809017, 0.309017, -0.5], [-0.864188, -0.442863, -0.238856], [-0.951056, -0.16246, -0.262866], [-0.809017, -0.309017, -0.5], [-0.681718, 0.147621, -0.716567], [-0.681718, -0.147621, -0.716567], [-0.850651, 0.0, -0.525731], [-0.688191, 0.587785, -0.425325], [-0.587785, 0.425325, -0.688191], [-0.425325, 0.688191, -0.587785], [-0.425325, -0.688191, -0.587785], [-0.587785, -0.425325, -0.688191], [-0.688191, -0.587785, -0.425325]];\nvar MD2Loader = /*#__PURE__*/function (_Loader) {\n  _inherits(MD2Loader, _Loader);\n  function MD2Loader(manager) {\n    _classCallCheck(this, MD2Loader);\n    return _possibleConstructorReturn(this, _getPrototypeOf(MD2Loader).call(this, manager));\n  }\n  _createClass(MD2Loader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(buffer) {\n      var data = new DataView(buffer); // http://tfc.duke.free.fr/coding/md2-specs-en.html\n\n      var header = {};\n      var headerNames = ['ident', 'version', 'skinwidth', 'skinheight', 'framesize', 'num_skins', 'num_vertices', 'num_st', 'num_tris', 'num_glcmds', 'num_frames', 'offset_skins', 'offset_st', 'offset_tris', 'offset_frames', 'offset_glcmds', 'offset_end'];\n      for (var i = 0; i < headerNames.length; i++) {\n        header[headerNames[i]] = data.getInt32(i * 4, true);\n      }\n      if (header.ident !== 844121161 || header.version !== 8) {\n        console.error('Not a valid MD2 file');\n        return;\n      }\n      if (header.offset_end !== data.byteLength) {\n        console.error('Corrupted MD2 file');\n        return;\n      } //\n\n      var geometry = new BufferGeometry(); // uvs\n\n      var uvsTemp = [];\n      var offset = header.offset_st;\n      for (var _i = 0, l = header.num_st; _i < l; _i++) {\n        var u = data.getInt16(offset + 0, true);\n        var v = data.getInt16(offset + 2, true);\n        uvsTemp.push(u / header.skinwidth, 1 - v / header.skinheight);\n        offset += 4;\n      } // triangles\n\n      offset = header.offset_tris;\n      var vertexIndices = [];\n      var uvIndices = [];\n      for (var _i2 = 0, _l = header.num_tris; _i2 < _l; _i2++) {\n        vertexIndices.push(data.getUint16(offset + 0, true), data.getUint16(offset + 2, true), data.getUint16(offset + 4, true));\n        uvIndices.push(data.getUint16(offset + 6, true), data.getUint16(offset + 8, true), data.getUint16(offset + 10, true));\n        offset += 12;\n      } // frames\n\n      var translation = new Vector3();\n      var scale = new Vector3();\n      var string = [];\n      var frames = [];\n      offset = header.offset_frames;\n      for (var _i3 = 0, _l2 = header.num_frames; _i3 < _l2; _i3++) {\n        scale.set(data.getFloat32(offset + 0, true), data.getFloat32(offset + 4, true), data.getFloat32(offset + 8, true));\n        translation.set(data.getFloat32(offset + 12, true), data.getFloat32(offset + 16, true), data.getFloat32(offset + 20, true));\n        offset += 24;\n        for (var j = 0; j < 16; j++) {\n          var character = data.getUint8(offset + j, true);\n          if (character === 0) break;\n          string[j] = character;\n        }\n        var frame = {\n          name: String.fromCharCode.apply(null, string),\n          vertices: [],\n          normals: []\n        };\n        offset += 16;\n        for (var _j = 0; _j < header.num_vertices; _j++) {\n          var x = data.getUint8(offset++, true);\n          var y = data.getUint8(offset++, true);\n          var z = data.getUint8(offset++, true);\n          var n = _normalData[data.getUint8(offset++, true)];\n          x = x * scale.x + translation.x;\n          y = y * scale.y + translation.y;\n          z = z * scale.z + translation.z;\n          frame.vertices.push(x, z, y); // convert to Y-up\n\n          frame.normals.push(n[0], n[2], n[1]); // convert to Y-up\n        }\n\n        frames.push(frame);\n      } // static\n\n      var positions = [];\n      var normals = [];\n      var uvs = [];\n      var verticesTemp = frames[0].vertices;\n      var normalsTemp = frames[0].normals;\n      for (var _i4 = 0, _l3 = vertexIndices.length; _i4 < _l3; _i4++) {\n        var vertexIndex = vertexIndices[_i4];\n        var stride = vertexIndex * 3; //\n\n        var _x = verticesTemp[stride];\n        var _y = verticesTemp[stride + 1];\n        var _z = verticesTemp[stride + 2];\n        positions.push(_x, _y, _z); //\n\n        var nx = normalsTemp[stride];\n        var ny = normalsTemp[stride + 1];\n        var nz = normalsTemp[stride + 2];\n        normals.push(nx, ny, nz); //\n\n        var uvIndex = uvIndices[_i4];\n        stride = uvIndex * 2;\n        var _u = uvsTemp[stride];\n        var _v = uvsTemp[stride + 1];\n        uvs.push(_u, _v);\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // animation\n\n      var morphPositions = [];\n      var morphNormals = [];\n      for (var _i5 = 0, _l4 = frames.length; _i5 < _l4; _i5++) {\n        var _frame = frames[_i5];\n        var attributeName = _frame.name;\n        if (_frame.vertices.length > 0) {\n          var _positions = [];\n          for (var _j2 = 0, jl = vertexIndices.length; _j2 < jl; _j2++) {\n            var _vertexIndex = vertexIndices[_j2];\n            var _stride = _vertexIndex * 3;\n            var _x2 = _frame.vertices[_stride];\n            var _y2 = _frame.vertices[_stride + 1];\n            var _z2 = _frame.vertices[_stride + 2];\n            _positions.push(_x2, _y2, _z2);\n          }\n          var positionAttribute = new Float32BufferAttribute(_positions, 3);\n          positionAttribute.name = attributeName;\n          morphPositions.push(positionAttribute);\n        }\n        if (_frame.normals.length > 0) {\n          var _normals = [];\n          for (var _j3 = 0, _jl = vertexIndices.length; _j3 < _jl; _j3++) {\n            var _vertexIndex2 = vertexIndices[_j3];\n            var _stride2 = _vertexIndex2 * 3;\n            var _nx = _frame.normals[_stride2];\n            var _ny = _frame.normals[_stride2 + 1];\n            var _nz = _frame.normals[_stride2 + 2];\n            _normals.push(_nx, _ny, _nz);\n          }\n          var normalAttribute = new Float32BufferAttribute(_normals, 3);\n          normalAttribute.name = attributeName;\n          morphNormals.push(normalAttribute);\n        }\n      }\n      geometry.morphAttributes.position = morphPositions;\n      geometry.morphAttributes.normal = morphNormals;\n      geometry.morphTargetsRelative = false;\n      geometry.animations = AnimationClip.CreateClipsFromMorphTargetSequences(frames, 10);\n      return geometry;\n    }\n  }]);\n  return MD2Loader;\n}(Loader);\nexport { MD2Loader };","map":null,"metadata":{},"sourceType":"module"}