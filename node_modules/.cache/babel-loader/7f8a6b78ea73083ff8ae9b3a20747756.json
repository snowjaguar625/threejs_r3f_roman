{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Node from '../core/Node.js';\nimport PropertyNode from '../core/PropertyNode.js';\nimport ContextNode from '../core/ContextNode.js';\nvar CondNode = /*#__PURE__*/function (_Node) {\n  _inherits(CondNode, _Node);\n  function CondNode(node, ifNode, elseNode) {\n    var _this;\n    _classCallCheck(this, CondNode);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CondNode).call(this));\n    _this.node = node;\n    _this.ifNode = ifNode;\n    _this.elseNode = elseNode;\n    return _this;\n  }\n  _createClass(CondNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      var ifType = this.ifNode.getNodeType(builder);\n      var elseType = this.elseNode.getNodeType(builder);\n      if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {\n        return elseType;\n      }\n      return ifType;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var type = this.getNodeType(builder);\n      var context = {\n        temp: false\n      };\n      var nodeProperty = new PropertyNode(null, type).build(builder);\n      var nodeSnippet = new ContextNode(this.node\n        /*, context*/).build(builder, 'bool'),\n        ifSnippet = new ContextNode(this.ifNode, context).build(builder, type),\n        elseSnippet = new ContextNode(this.elseNode, context).build(builder, type);\n      builder.addFlowCode(\"if ( \".concat(nodeSnippet, \" ) {\\n\\n\\t\\t\").concat(nodeProperty, \" = \").concat(ifSnippet, \";\\n\\n\\t} else {\\n\\n\\t\\t\").concat(nodeProperty, \" = \").concat(elseSnippet, \";\\n\\n\\t}\"));\n      return nodeProperty;\n    }\n  }]);\n  return CondNode;\n}(Node);\nexport default CondNode;","map":null,"metadata":{},"sourceType":"module"}