{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Loader, FileLoader, Vector3, DataTexture, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three';\n\n// https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\nvar LUTCubeLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LUTCubeLoader, _Loader);\n  function LUTCubeLoader() {\n    _classCallCheck(this, LUTCubeLoader);\n    return _possibleConstructorReturn(this, _getPrototypeOf(LUTCubeLoader).apply(this, arguments));\n  }\n  _createClass(LUTCubeLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('text');\n      loader.load(url, function (text) {\n        try {\n          onLoad(_this.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          _this.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(str) {\n      // Remove empty lines and comments\n      str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n      var title = null;\n      var size = null;\n      var domainMin = new Vector3(0, 0, 0);\n      var domainMax = new Vector3(1, 1, 1);\n      var lines = str.split(/[\\n\\r]+/g);\n      var data = null;\n      var currIndex = 0;\n      for (var i = 0, l = lines.length; i < l; i++) {\n        var line = lines[i].trim();\n        var split = line.split(/\\s/g);\n        switch (split[0]) {\n          case 'TITLE':\n            title = line.substring(7, line.length - 1);\n            break;\n          case 'LUT_3D_SIZE':\n            // TODO: A .CUBE LUT file specifies floating point values and could be represented with\n            // more precision than can be captured with Uint8Array.\n            var sizeToken = split[1];\n            size = parseFloat(sizeToken);\n            data = new Uint8Array(size * size * size * 4);\n            break;\n          case 'DOMAIN_MIN':\n            domainMin.x = parseFloat(split[1]);\n            domainMin.y = parseFloat(split[2]);\n            domainMin.z = parseFloat(split[3]);\n            break;\n          case 'DOMAIN_MAX':\n            domainMax.x = parseFloat(split[1]);\n            domainMax.y = parseFloat(split[2]);\n            domainMax.z = parseFloat(split[3]);\n            break;\n          default:\n            var r = parseFloat(split[0]);\n            var g = parseFloat(split[1]);\n            var b = parseFloat(split[2]);\n            if (r > 1.0 || r < 0.0 || g > 1.0 || g < 0.0 || b > 1.0 || b < 0.0) {\n              throw new Error('LUTCubeLoader : Non normalized values not supported.');\n            }\n            data[currIndex + 0] = r * 255;\n            data[currIndex + 1] = g * 255;\n            data[currIndex + 2] = b * 255;\n            data[currIndex + 3] = 255;\n            currIndex += 4;\n        }\n      }\n      var texture = new DataTexture();\n      texture.image.data = data;\n      texture.image.width = size;\n      texture.image.height = size * size;\n      texture.type = UnsignedByteType;\n      texture.magFilter = LinearFilter;\n      texture.minFilter = LinearFilter;\n      texture.wrapS = ClampToEdgeWrapping;\n      texture.wrapT = ClampToEdgeWrapping;\n      texture.generateMipmaps = false;\n      var texture3D = new DataTexture3D();\n      texture3D.image.data = data;\n      texture3D.image.width = size;\n      texture3D.image.height = size;\n      texture3D.image.depth = size;\n      texture3D.type = UnsignedByteType;\n      texture3D.magFilter = LinearFilter;\n      texture3D.minFilter = LinearFilter;\n      texture3D.wrapS = ClampToEdgeWrapping;\n      texture3D.wrapT = ClampToEdgeWrapping;\n      texture3D.wrapR = ClampToEdgeWrapping;\n      texture3D.generateMipmaps = false;\n      return {\n        title: title,\n        size: size,\n        domainMin: domainMin,\n        domainMax: domainMax,\n        texture: texture,\n        texture3D: texture3D\n      };\n    }\n  }]);\n  return LUTCubeLoader;\n}(Loader);\nexport { LUTCubeLoader };","map":null,"metadata":{},"sourceType":"module"}