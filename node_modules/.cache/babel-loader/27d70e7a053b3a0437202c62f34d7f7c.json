{"ast":null,"code":"import _asyncToGenerator from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction AmmoPhysics() {\n  return _AmmoPhysics.apply(this, arguments);\n}\nfunction _AmmoPhysics() {\n  _AmmoPhysics = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var AmmoLib, frameRate, collisionConfiguration, dispatcher, broadphase, solver, world, worldTransform, getShape, meshes, meshMap, addMesh, handleMesh, handleInstancedMesh, setMeshPosition, lastTime, step;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            step = function _step() {\n              var time = performance.now();\n              if (lastTime > 0) {\n                var delta = (time - lastTime) / 1000; // console.time( 'world.step' );\n\n                world.stepSimulation(delta, 10); // console.timeEnd( 'world.step' );\n              }\n\n              lastTime = time; //\n\n              for (var i = 0, l = meshes.length; i < l; i++) {\n                var mesh = meshes[i];\n                if (mesh.isInstancedMesh) {\n                  var array = mesh.instanceMatrix.array;\n                  var bodies = meshMap.get(mesh);\n                  for (var j = 0; j < bodies.length; j++) {\n                    var body = bodies[j];\n                    var motionState = body.getMotionState();\n                    motionState.getWorldTransform(worldTransform);\n                    var position = worldTransform.getOrigin();\n                    var quaternion = worldTransform.getRotation();\n                    compose(position, quaternion, array, j * 16);\n                  }\n                  mesh.instanceMatrix.needsUpdate = true;\n                } else if (mesh.isMesh) {\n                  var _body2 = meshMap.get(mesh);\n                  var _motionState = _body2.getMotionState();\n                  _motionState.getWorldTransform(worldTransform);\n                  var _position = worldTransform.getOrigin();\n                  var _quaternion = worldTransform.getRotation();\n                  mesh.position.set(_position.x(), _position.y(), _position.z());\n                  mesh.quaternion.set(_quaternion.x(), _quaternion.y(), _quaternion.z(), _quaternion.w());\n                }\n              }\n            };\n            setMeshPosition = function _setMeshPosition(mesh, position) {\n              var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n              if (mesh.isInstancedMesh) {\n                var bodies = meshMap.get(mesh);\n                var body = bodies[index];\n                body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n                body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n                worldTransform.setIdentity();\n                worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n                body.setWorldTransform(worldTransform);\n              } else if (mesh.isMesh) {\n                var _body = meshMap.get(mesh);\n                _body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n                _body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n                worldTransform.setIdentity();\n                worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n                _body.setWorldTransform(worldTransform);\n              }\n            };\n            handleInstancedMesh = function _handleInstancedMesh(mesh, mass, shape) {\n              var array = mesh.instanceMatrix.array;\n              var bodies = [];\n              for (var i = 0; i < mesh.count; i++) {\n                var index = i * 16;\n                var transform = new AmmoLib.btTransform();\n                transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n                var motionState = new AmmoLib.btDefaultMotionState(transform);\n                var localInertia = new AmmoLib.btVector3(0, 0, 0);\n                shape.calculateLocalInertia(mass, localInertia);\n                var rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n                var body = new AmmoLib.btRigidBody(rbInfo);\n                world.addRigidBody(body);\n                bodies.push(body);\n              }\n              if (mass > 0) {\n                mesh.instanceMatrix.setUsage(35048); // THREE.DynamicDrawUsage = 35048\n\n                meshes.push(mesh);\n                meshMap.set(mesh, bodies);\n              }\n            };\n            handleMesh = function _handleMesh(mesh, mass, shape) {\n              var position = mesh.position;\n              var quaternion = mesh.quaternion;\n              var transform = new AmmoLib.btTransform();\n              transform.setIdentity();\n              transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n              transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n              var motionState = new AmmoLib.btDefaultMotionState(transform);\n              var localInertia = new AmmoLib.btVector3(0, 0, 0);\n              shape.calculateLocalInertia(mass, localInertia);\n              var rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n              var body = new AmmoLib.btRigidBody(rbInfo); // body.setFriction( 4 );\n\n              world.addRigidBody(body);\n              if (mass > 0) {\n                meshes.push(mesh);\n                meshMap.set(mesh, body);\n              }\n            };\n            addMesh = function _addMesh(mesh) {\n              var mass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n              var shape = getShape(mesh.geometry);\n              if (shape !== null) {\n                if (mesh.isInstancedMesh) {\n                  handleInstancedMesh(mesh, mass, shape);\n                } else if (mesh.isMesh) {\n                  handleMesh(mesh, mass, shape);\n                }\n              }\n            };\n            getShape = function _getShape(geometry) {\n              var parameters = geometry.parameters; // TODO change type to is*\n\n              if (geometry.type === 'BoxGeometry') {\n                var sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n                var sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n                var sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n                var shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n                shape.setMargin(0.05);\n                return shape;\n              } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\n                var radius = parameters.radius !== undefined ? parameters.radius : 1;\n                var _shape = new AmmoLib.btSphereShape(radius);\n                _shape.setMargin(0.05);\n                return _shape;\n              }\n              return null;\n            };\n            if (!('Ammo' in window === false)) {\n              _context.next = 9;\n              break;\n            }\n            console.error(\"AmmoPhysics: Couldn't find Ammo.js\");\n            return _context.abrupt(\"return\");\n          case 9:\n            _context.next = 11;\n            return Ammo();\n          case 11:\n            AmmoLib = _context.sent;\n            // eslint-disable-line no-undef\n            frameRate = 60;\n            collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n            dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n            broadphase = new AmmoLib.btDbvtBroadphase();\n            solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n            world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n            world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n            worldTransform = new AmmoLib.btTransform(); //\n            meshes = [];\n            meshMap = new WeakMap();\n            //\n            lastTime = 0;\n            // animate\n\n            setInterval(step, 1000 / frameRate);\n            return _context.abrupt(\"return\", {\n              addMesh: addMesh,\n              setMeshPosition: setMeshPosition // addCompoundMesh\n            });\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _AmmoPhysics.apply(this, arguments);\n}\nfunction compose(position, quaternion, array, index) {\n  var x = quaternion.x(),\n    y = quaternion.y(),\n    z = quaternion.z(),\n    w = quaternion.w();\n  var x2 = x + x,\n    y2 = y + y,\n    z2 = z + z;\n  var xx = x * x2,\n    xy = x * y2,\n    xz = x * z2;\n  var yy = y * y2,\n    yz = y * z2,\n    zz = z * z2;\n  var wx = w * x2,\n    wy = w * y2,\n    wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\nexport { AmmoPhysics };","map":null,"metadata":{},"sourceType":"module"}