{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { BufferGeometry, Mesh, Points } from 'three';\n\n/**\n * Export draco compressed files from threejs geometry objects.\n *\n * Draco files are compressed and usually are smaller than conventional 3D file formats.\n *\n * The exporter receives a options object containing\n *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n *  - encoderMethod\n *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n *  - exportUvs\n *  - exportNormals\n */\nvar DRACOExporter = /*#__PURE__*/function () {\n  function DRACOExporter() {\n    _classCallCheck(this, DRACOExporter);\n  }\n  _createClass(DRACOExporter, [{\n    key: \"parse\",\n    // Encoder methods\n    // Geometry type\n    // Attribute type\n    value: function parse(object) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        decodeSpeed: 5,\n        encodeSpeed: 5,\n        encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n        quantization: [16, 8, 8, 8, 8],\n        exportUvs: true,\n        exportNormals: true,\n        exportColor: false\n      };\n      if (object instanceof BufferGeometry && object.isBufferGeometry) {\n        throw new Error('DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.');\n      }\n      if (DracoEncoderModule === undefined) {\n        throw new Error('THREE.DRACOExporter: required the draco_encoder to work.');\n      }\n      var geometry = object.geometry;\n      var dracoEncoder = DracoEncoderModule();\n      var encoder = new dracoEncoder.Encoder();\n      var builder;\n      var dracoObject;\n      if (!geometry.isBufferGeometry) {\n        throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.');\n      }\n      if (object instanceof Mesh && object.isMesh) {\n        builder = new dracoEncoder.MeshBuilder();\n        dracoObject = new dracoEncoder.Mesh();\n        var vertices = geometry.getAttribute('position'); // @ts-expect-error\n\n        builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n        var faces = geometry.getIndex();\n        if (faces !== null) {\n          // @ts-expect-error\n          builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n        } else {\n          var _faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n          for (var i = 0; i < _faces.length; i++) {\n            _faces[i] = i;\n          }\n          builder.AddFacesToMesh(dracoObject, vertices.count, _faces);\n        }\n        if (options.exportNormals) {\n          var normals = geometry.getAttribute('normal');\n          if (normals !== undefined) {\n            // @ts-expect-error\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n          }\n        }\n        if (options.exportUvs) {\n          var uvs = geometry.getAttribute('uv');\n          if (uvs !== undefined) {\n            // @ts-expect-error\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n          }\n        }\n        if (options.exportColor) {\n          var colors = geometry.getAttribute('color');\n          if (colors !== undefined) {\n            // @ts-expect-error\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n          }\n        }\n      } else if (object instanceof Points && object.isPoints) {\n        // @ts-expect-error\n        builder = new dracoEncoder.PointCloudBuilder(); // @ts-expect-error\n\n        dracoObject = new dracoEncoder.PointCloud();\n        var _vertices = geometry.getAttribute('position');\n        builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, _vertices.count, _vertices.itemSize, _vertices.array);\n        if (options.exportColor) {\n          var _colors = geometry.getAttribute('color');\n          if (_colors !== undefined) {\n            builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, _colors.count, _colors.itemSize, _colors.array);\n          }\n        }\n      } else {\n        throw new Error('DRACOExporter: Unsupported object type.');\n      } //Compress using draco encoder\n\n      var encodedData = new dracoEncoder.DracoInt8Array(); //Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n      var encodeSpeed = options.encodeSpeed !== undefined ? options.encodeSpeed : 5;\n      var decodeSpeed = options.decodeSpeed !== undefined ? options.decodeSpeed : 5;\n      encoder.SetSpeedOptions(encodeSpeed, decodeSpeed); // Sets the desired encoding method for a given geometry.\n\n      if (options.encoderMethod !== undefined) {\n        encoder.SetEncodingMethod(options.encoderMethod);\n      } // Sets the quantization (number of bits used to represent) compression options for a named attribute.\n      // The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n\n      if (options.quantization !== undefined) {\n        for (var _i = 0; _i < 5; _i++) {\n          if (options.quantization[_i] !== undefined) {\n            encoder.SetAttributeQuantization(_i, options.quantization[_i]);\n          }\n        }\n      }\n      var length;\n      if (object instanceof Mesh && object.isMesh) {\n        length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n      } else {\n        // @ts-expect-error\n        length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n      }\n      dracoEncoder.destroy(dracoObject);\n      if (length === 0) {\n        throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n      } //Copy encoded data to buffer.\n\n      var outputData = new Int8Array(new ArrayBuffer(length));\n      for (var _i2 = 0; _i2 < length; _i2++) {\n        outputData[_i2] = encodedData.GetValue(_i2);\n      }\n      dracoEncoder.destroy(encodedData);\n      dracoEncoder.destroy(encoder);\n      dracoEncoder.destroy(builder);\n      return outputData;\n    }\n  }]);\n  return DRACOExporter;\n}();\n_defineProperty(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n_defineProperty(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n_defineProperty(DRACOExporter, \"POINT_CLOUD\", 0);\n_defineProperty(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n_defineProperty(DRACOExporter, \"INVALID\", -1);\n_defineProperty(DRACOExporter, \"POSITION\", 0);\n_defineProperty(DRACOExporter, \"NORMAL\", 1);\n_defineProperty(DRACOExporter, \"COLOR\", 2);\n_defineProperty(DRACOExporter, \"TEX_COORD\", 3);\n_defineProperty(DRACOExporter, \"GENERIC\", 4);\nexport { DRACOExporter };","map":null,"metadata":{},"sourceType":"module"}