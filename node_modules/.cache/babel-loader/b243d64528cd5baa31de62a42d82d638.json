{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { MeshStandardMaterial } from 'three';\nvar MeshReflectorMaterial = /*#__PURE__*/function (_MeshStandardMaterial) {\n  _inherits(MeshReflectorMaterial, _MeshStandardMaterial);\n  function MeshReflectorMaterial() {\n    var _this;\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, MeshReflectorMaterial);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MeshReflectorMaterial).call(this, parameters));\n    _this._debug = {\n      value: 0\n    };\n    _this._tDepth = {\n      value: null\n    };\n    _this._distortionMap = {\n      value: null\n    };\n    _this._tDiffuse = {\n      value: null\n    };\n    _this._u_mipmap_0 = {\n      value: null\n    };\n    _this._u_mipmap_1 = {\n      value: null\n    };\n    _this._u_mipmap_2 = {\n      value: null\n    };\n    _this._u_mipmap_3 = {\n      value: null\n    };\n    _this._u_mipmap_4 = {\n      value: null\n    };\n    _this._u_mipmap_5 = {\n      value: null\n    };\n    _this._u_mipmap_6 = {\n      value: null\n    };\n    _this._u_mipmap_7 = {\n      value: null\n    };\n    _this._u_mipmap_res_0 = {\n      value: null\n    };\n    _this._u_mipmap_res_1 = {\n      value: null\n    };\n    _this._u_mipmap_res_2 = {\n      value: null\n    };\n    _this._u_mipmap_res_3 = {\n      value: null\n    };\n    _this._u_mipmap_res_4 = {\n      value: null\n    };\n    _this._u_mipmap_res_5 = {\n      value: null\n    };\n    _this._u_mipmap_res_6 = {\n      value: null\n    };\n    _this._u_mipmap_res_7 = {\n      value: null\n    };\n    _this._textureMatrix = {\n      value: null\n    };\n    _this._mirror = {\n      value: 0.0\n    };\n    _this._mixBlur = {\n      value: 0.0\n    };\n    _this._blurStrength = {\n      value: 0.5\n    };\n    _this._minDepthThreshold = {\n      value: 0.9\n    };\n    _this._maxDepthThreshold = {\n      value: 1\n    };\n    _this._depthScale = {\n      value: 0\n    };\n    _this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    _this._distortion = {\n      value: 1\n    };\n    _this.setValues(parameters);\n    return _this;\n  }\n  _createClass(MeshReflectorMaterial, [{\n    key: \"onBeforeCompile\",\n    value: function onBeforeCompile(shader) {\n      var _shader$defines;\n      if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n        shader.defines.USE_UV = '';\n      }\n      shader.uniforms.debug = this._debug;\n      shader.uniforms.tDiffuse = this._tDiffuse;\n      shader.uniforms.tDepth = this._tDepth;\n      shader.uniforms.distortionMap = this._distortionMap;\n      shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n      shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n      shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n      shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n      shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n      shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n      shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n      shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n      shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n      shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n      shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n      shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n      shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n      shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n      shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n      shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n      shader.uniforms.textureMatrix = this._textureMatrix;\n      shader.uniforms.mirror = this._mirror;\n      shader.uniforms.mixBlur = this._mixBlur;\n      shader.uniforms.mixStrength = this._blurStrength;\n      shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n      shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n      shader.uniforms.depthScale = this._depthScale;\n      shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n      shader.uniforms.distortion = this._distortion;\n      shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \".concat(shader.vertexShader);\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n      shader.fragmentShader = \"\\n        uniform int debug;\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform sampler2D u_mipmap_0;\\n        uniform sampler2D u_mipmap_1;\\n        uniform sampler2D u_mipmap_2;\\n        uniform sampler2D u_mipmap_3;\\n        uniform sampler2D u_mipmap_4;\\n        uniform sampler2D u_mipmap_5;\\n        uniform sampler2D u_mipmap_6;\\n        uniform sampler2D u_mipmap_7;\\n        uniform vec2 u_mipmap_res_0;\\n        uniform vec2 u_mipmap_res_1;\\n        uniform vec2 u_mipmap_res_2;\\n        uniform vec2 u_mipmap_res_3;\\n        uniform vec2 u_mipmap_res_4;\\n        uniform vec2 u_mipmap_res_5;\\n        uniform vec2 u_mipmap_res_6;\\n        uniform vec2 u_mipmap_res_7;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;  \\n        \\n        // from http://www.java-gaming.org/index.php?topic=35123.0\\n        vec4 cubic( float v ) {\\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\\n          vec4 s = n * n * n;\\n          float x = s.x;\\n          float y = s.y - 4.0 * s.x;\\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\\n          float w = 6.0 - x - y - z;\\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\\n        }\\n        \\n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\\n          vec2 invTexSize = 1.0 / texSize;\\n          texCoords = texCoords * texSize - 0.5;\\n          vec2 fxy = fract( texCoords );\\n          texCoords -= fxy;\\n\\n          vec4 xcubic = cubic( fxy.x );\\n          vec4 ycubic = cubic( fxy.y );\\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\\n\\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\\n          offset *= invTexSize.xxyy;\\n        \\n          vec4 sample0 = texture2D( sampler, offset.xz);\\n          vec4 sample1 = texture2D( sampler, offset.yz);\\n          vec4 sample2 = texture2D( sampler, offset.xw);\\n          vec4 sample3 = texture2D( sampler, offset.yw);\\n        \\n          float sx = s.x / ( s.x + s.y );\\n          float sy = s.z / ( s.z + s.w );\\n\\n          return mix(\\n            mix(\\n              sample3,\\n              sample2,\\n              sx\\n            ),\\n            mix(\\n              sample1,\\n              sample0,\\n              sx\\n            ),\\n            sy\\n          );\\n        }\\n\\n\\n        \".concat(shader.fragmentShader);\n      shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n    \\n      float depthFactor = 1.0;\\n      float distortionFactor = 0.0;\\n      vec3 my_normal = vec3(0.0);\\n      float reflectorRoughnessFactor = roughness;\\n      vec3 coord = my_vUv.xyz / my_vUv.w;\\n\\n      #ifdef USE_DISTORTION\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      #ifdef USE_NORMALMAP\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\\n      #endif\\n\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n\\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\\n      proj_vUv.x += distortionFactor;\\n      proj_vUv.y += distortionFactor;\\n      \\n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth = texture2D(tDepth, proj_vUv);\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *= depthScale;\\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\\n      #endif\\n\\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\\n      vec4 mixedColor;\\n\\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\\n      if (_lod < 1.) {\\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        mixedColor = mix(one, two, _lod);\\n      } else if (_lod < 2.) {\\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        mixedColor = mix(one, two, _lod - 1.0);\\n      } else if (_lod < 3.) {\\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        mixedColor = mix(one, two, _lod - 2.0);\\n      } else if (_lod < 4.) {\\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        mixedColor = mix(one, two, _lod - 3.0);\\n      } else if (_lod < 5.) {\\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        mixedColor = mix(one, two, _lod - 4.0);\\n      } else if (_lod < 6.) {\\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        mixedColor = mix(one, two, _lod - 5.0);\\n      } else if (_lod < 7.) {\\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, two, _lod - 6.0);\\n      } else {\\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, baseColor, _lod - 7.0);\\n      }\\n\\n      mixedColor.rgb *= depthFactor;\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \\n      diffuseColor = sRGBToLinear(diffuseColor);\\n\\n      if (debug == 1) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\\n      }\\n      if (debug == 2) {\\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\\n      }\\n      if (debug == 3) {\\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\\n      }\\n      if (debug == 4) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\\n      }\\n      \");\n    }\n  }, {\n    key: \"tDiffuse\",\n    get: function get() {\n      return this._tDiffuse.value;\n    },\n    set: function set(v) {\n      this._tDiffuse.value = v;\n    }\n  }, {\n    key: \"tDepth\",\n    get: function get() {\n      return this._tDepth.value;\n    },\n    set: function set(v) {\n      this._tDepth.value = v;\n    }\n  }, {\n    key: \"distortionMap\",\n    get: function get() {\n      return this._distortionMap.value;\n    },\n    set: function set(v) {\n      this._distortionMap.value = v;\n    }\n  }, {\n    key: \"u_mipmap_0\",\n    get: function get() {\n      return this._u_mipmap_0.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_0.value = v;\n    }\n  }, {\n    key: \"u_mipmap_1\",\n    get: function get() {\n      return this._u_mipmap_1.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_1.value = v;\n    }\n  }, {\n    key: \"u_mipmap_2\",\n    get: function get() {\n      return this._u_mipmap_2.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_2.value = v;\n    }\n  }, {\n    key: \"u_mipmap_3\",\n    get: function get() {\n      return this._u_mipmap_3.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_3.value = v;\n    }\n  }, {\n    key: \"u_mipmap_4\",\n    get: function get() {\n      return this._u_mipmap_4.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_4.value = v;\n    }\n  }, {\n    key: \"u_mipmap_5\",\n    get: function get() {\n      return this._u_mipmap_5.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_5.value = v;\n    }\n  }, {\n    key: \"u_mipmap_6\",\n    get: function get() {\n      return this._u_mipmap_6.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_6.value = v;\n    }\n  }, {\n    key: \"u_mipmap_7\",\n    get: function get() {\n      return this._u_mipmap_7.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_7.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_0\",\n    get: function get() {\n      return this._u_mipmap_res_0.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_0.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_1\",\n    get: function get() {\n      return this._u_mipmap_res_1.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_1.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_2\",\n    get: function get() {\n      return this._u_mipmap_res_2.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_2.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_3\",\n    get: function get() {\n      return this._u_mipmap_res_3.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_3.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_4\",\n    get: function get() {\n      return this._u_mipmap_res_4.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_4.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_5\",\n    get: function get() {\n      return this._u_mipmap_res_5.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_5.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_6\",\n    get: function get() {\n      return this._u_mipmap_res_6.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_6.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_7\",\n    get: function get() {\n      return this._u_mipmap_res_7.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_7.value = v;\n    }\n  }, {\n    key: \"textureMatrix\",\n    get: function get() {\n      return this._textureMatrix.value;\n    },\n    set: function set(v) {\n      this._textureMatrix.value = v;\n    }\n  }, {\n    key: \"mirror\",\n    get: function get() {\n      return this._mirror.value;\n    },\n    set: function set(v) {\n      this._mirror.value = v;\n    }\n  }, {\n    key: \"mixBlur\",\n    get: function get() {\n      return this._mixBlur.value;\n    },\n    set: function set(v) {\n      this._mixBlur.value = v;\n    }\n  }, {\n    key: \"mixStrength\",\n    get: function get() {\n      return this._blurStrength.value;\n    },\n    set: function set(v) {\n      this._blurStrength.value = v;\n    }\n  }, {\n    key: \"minDepthThreshold\",\n    get: function get() {\n      return this._minDepthThreshold.value;\n    },\n    set: function set(v) {\n      this._minDepthThreshold.value = v;\n    }\n  }, {\n    key: \"maxDepthThreshold\",\n    get: function get() {\n      return this._maxDepthThreshold.value;\n    },\n    set: function set(v) {\n      this._maxDepthThreshold.value = v;\n    }\n  }, {\n    key: \"depthScale\",\n    get: function get() {\n      return this._depthScale.value;\n    },\n    set: function set(v) {\n      this._depthScale.value = v;\n    }\n  }, {\n    key: \"debug\",\n    get: function get() {\n      return this._debug.value;\n    },\n    set: function set(v) {\n      this._debug.value = v;\n    }\n  }, {\n    key: \"depthToBlurRatioBias\",\n    get: function get() {\n      return this._depthToBlurRatioBias.value;\n    },\n    set: function set(v) {\n      this._depthToBlurRatioBias.value = v;\n    }\n  }, {\n    key: \"distortion\",\n    get: function get() {\n      return this._distortion.value;\n    },\n    set: function set(v) {\n      this._distortion.value = v;\n    }\n  }]);\n  return MeshReflectorMaterial;\n}(MeshStandardMaterial);\nexport { MeshReflectorMaterial };","map":null,"metadata":{},"sourceType":"module"}