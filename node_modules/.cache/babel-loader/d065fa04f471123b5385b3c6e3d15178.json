{"ast":null,"code":"import _slicedToArray from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { CanvasTexture } from 'three';\nimport { useGizmoContext } from './GizmoHelper.js';\nfunction Axis(_ref) {\n  var color = _ref.color,\n    rotation = _ref.rotation;\n  return /*#__PURE__*/React.createElement(\"group\", {\n    rotation: rotation\n  }, /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [0.4, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"boxGeometry\", {\n    args: [0.8, 0.05, 0.05]\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    color: color,\n    toneMapped: false\n  })));\n}\nfunction AxisHead(_ref2) {\n  var onClick = _ref2.onClick,\n    font = _ref2.font,\n    disabled = _ref2.disabled,\n    arcStyle = _ref2.arcStyle,\n    label = _ref2.label,\n    labelColor = _ref2.labelColor,\n    props = _objectWithoutProperties(_ref2, [\"onClick\", \"font\", \"disabled\", \"arcStyle\", \"label\", \"labelColor\"]);\n  var texture = React.useMemo(function () {\n    var canvas = document.createElement('canvas');\n    canvas.width = 64;\n    canvas.height = 64;\n    var context = canvas.getContext('2d');\n    context.beginPath();\n    context.arc(32, 32, 16, 0, 2 * Math.PI);\n    context.closePath();\n    context.fillStyle = arcStyle;\n    context.fill();\n    if (label) {\n      context.font = font;\n      context.textAlign = 'center';\n      context.fillStyle = labelColor;\n      context.fillText(label, 32, 41);\n    }\n    return new CanvasTexture(canvas);\n  }, [arcStyle, label, labelColor, font]);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    active = _React$useState2[0],\n    setActive = _React$useState2[1];\n  var scale = (label ? 1 : 0.75) * (active ? 1.2 : 1);\n  var handlePointerOver = function handlePointerOver(e) {\n    e.stopPropagation();\n    setActive(true);\n  };\n  var handlePointerOut = function handlePointerOut(e) {\n    e.stopPropagation();\n    setActive(false);\n  };\n  return /*#__PURE__*/React.createElement(\"sprite\", _extends({\n    scale: scale,\n    onPointerOver: !disabled ? handlePointerOver : undefined,\n    onPointerOut: !disabled ? onClick || handlePointerOut : undefined\n  }, props), /*#__PURE__*/React.createElement(\"spriteMaterial\", {\n    map: texture,\n    alphaTest: 0.3,\n    opacity: label ? 1 : 0.75,\n    toneMapped: false\n  }));\n}\nvar GizmoViewport = function GizmoViewport(_ref3) {\n  var hideNegativeAxes = _ref3.hideNegativeAxes,\n    disabled = _ref3.disabled,\n    _ref3$font = _ref3.font,\n    font = _ref3$font === void 0 ? '18px Inter var, Arial, sans-serif' : _ref3$font,\n    _ref3$axisColors = _ref3.axisColors,\n    axisColors = _ref3$axisColors === void 0 ? ['#ff3653', '#0adb50', '#2c8fdf'] : _ref3$axisColors,\n    _ref3$labelColor = _ref3.labelColor,\n    labelColor = _ref3$labelColor === void 0 ? '#000' : _ref3$labelColor,\n    onClick = _ref3.onClick,\n    props = _objectWithoutProperties(_ref3, [\"hideNegativeAxes\", \"disabled\", \"font\", \"axisColors\", \"labelColor\", \"onClick\"]);\n  var _axisColors = _slicedToArray(axisColors, 3),\n    colorX = _axisColors[0],\n    colorY = _axisColors[1],\n    colorZ = _axisColors[2];\n  var _useGizmoContext = useGizmoContext(),\n    tweenCamera = _useGizmoContext.tweenCamera,\n    raycast = _useGizmoContext.raycast;\n  var axisHeadProps = {\n    font: font,\n    disabled: disabled,\n    labelColor: labelColor,\n    raycast: raycast,\n    onClick: onClick,\n    onPointerDown: !disabled ? function (e) {\n      tweenCamera(e.object.position);\n      e.stopPropagation();\n    } : undefined\n  };\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    scale: 40\n  }, props), /*#__PURE__*/React.createElement(Axis, {\n    color: colorX,\n    rotation: [0, 0, 0]\n  }), /*#__PURE__*/React.createElement(Axis, {\n    color: colorY,\n    rotation: [0, 0, Math.PI / 2]\n  }), /*#__PURE__*/React.createElement(Axis, {\n    color: colorZ,\n    rotation: [0, -Math.PI / 2, 0]\n  }), /*#__PURE__*/React.createElement(AxisHead, _extends({\n    arcStyle: colorX,\n    position: [1, 0, 0],\n    label: \"X\"\n  }, axisHeadProps)), /*#__PURE__*/React.createElement(AxisHead, _extends({\n    arcStyle: colorY,\n    position: [0, 1, 0],\n    label: \"Y\"\n  }, axisHeadProps)), /*#__PURE__*/React.createElement(AxisHead, _extends({\n    arcStyle: colorZ,\n    position: [0, 0, 1],\n    label: \"Z\"\n  }, axisHeadProps)), !hideNegativeAxes && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AxisHead, _extends({\n    arcStyle: colorX,\n    position: [-1, 0, 0]\n  }, axisHeadProps)), /*#__PURE__*/React.createElement(AxisHead, _extends({\n    arcStyle: colorY,\n    position: [0, -1, 0]\n  }, axisHeadProps)), /*#__PURE__*/React.createElement(AxisHead, _extends({\n    arcStyle: colorZ,\n    position: [0, 0, -1]\n  }, axisHeadProps))), /*#__PURE__*/React.createElement(\"ambientLight\", {\n    intensity: 0.5\n  }), /*#__PURE__*/React.createElement(\"pointLight\", {\n    position: [10, 10, 10],\n    intensity: 0.5\n  }));\n};\nexport { GizmoViewport };","map":null,"metadata":{},"sourceType":"module"}