{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Loader, FileLoader, BufferGeometry, Float32BufferAttribute } from 'three';\nvar PDBLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(PDBLoader, _Loader);\n  function PDBLoader(manager) {\n    _classCallCheck(this, PDBLoader);\n    return _possibleConstructorReturn(this, _getPrototypeOf(PDBLoader).call(this, manager));\n  }\n  _createClass(PDBLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    } // Based on CanvasMol PDB parser\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      function trim(text) {\n        return text.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n      }\n      function capitalize(text) {\n        return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase();\n      }\n      function hash(s, e) {\n        return 's' + Math.min(s, e) + 'e' + Math.max(s, e);\n      }\n      function parseBond(start, length, satom, i) {\n        var eatom = parseInt(lines[i].substr(start, length));\n        if (eatom) {\n          var h = hash(satom, eatom);\n          if (_bhash[h] === undefined) {\n            _bonds.push([satom - 1, eatom - 1, 1]);\n            _bhash[h] = _bonds.length - 1;\n          }\n        }\n      }\n      function buildGeometry() {\n        var build = {\n          geometryAtoms: new BufferGeometry(),\n          geometryBonds: new BufferGeometry(),\n          json: {\n            atoms: atoms\n          }\n        };\n        var geometryAtoms = build.geometryAtoms;\n        var geometryBonds = build.geometryBonds;\n        var verticesAtoms = [];\n        var colorsAtoms = [];\n        var verticesBonds = []; // atoms\n\n        for (var i = 0, l = atoms.length; i < l; i++) {\n          var atom = atoms[i];\n          var x = atom[0];\n          var y = atom[1];\n          var z = atom[2];\n          verticesAtoms.push(x, y, z);\n          var r = atom[3][0] / 255;\n          var g = atom[3][1] / 255;\n          var b = atom[3][2] / 255;\n          colorsAtoms.push(r, g, b);\n        } // bonds\n\n        for (var _i = 0, _l = _bonds.length; _i < _l; _i++) {\n          var bond = _bonds[_i];\n          var start = bond[0];\n          var end = bond[1];\n          var startAtom = _atomMap[start];\n          var endAtom = _atomMap[end];\n          var _x = startAtom[0];\n          var _y = startAtom[1];\n          var _z = startAtom[2];\n          verticesBonds.push(_x, _y, _z);\n          _x = endAtom[0];\n          _y = endAtom[1];\n          _z = endAtom[2];\n          verticesBonds.push(_x, _y, _z);\n        } // build geometry\n\n        geometryAtoms.setAttribute('position', new Float32BufferAttribute(verticesAtoms, 3));\n        geometryAtoms.setAttribute('color', new Float32BufferAttribute(colorsAtoms, 3));\n        geometryBonds.setAttribute('position', new Float32BufferAttribute(verticesBonds, 3));\n        return build;\n      }\n      var CPK = {\n        h: [255, 255, 255],\n        he: [217, 255, 255],\n        li: [204, 128, 255],\n        be: [194, 255, 0],\n        b: [255, 181, 181],\n        c: [144, 144, 144],\n        n: [48, 80, 248],\n        o: [255, 13, 13],\n        f: [144, 224, 80],\n        ne: [179, 227, 245],\n        na: [171, 92, 242],\n        mg: [138, 255, 0],\n        al: [191, 166, 166],\n        si: [240, 200, 160],\n        p: [255, 128, 0],\n        s: [255, 255, 48],\n        cl: [31, 240, 31],\n        ar: [128, 209, 227],\n        k: [143, 64, 212],\n        ca: [61, 255, 0],\n        sc: [230, 230, 230],\n        ti: [191, 194, 199],\n        v: [166, 166, 171],\n        cr: [138, 153, 199],\n        mn: [156, 122, 199],\n        fe: [224, 102, 51],\n        co: [240, 144, 160],\n        ni: [80, 208, 80],\n        cu: [200, 128, 51],\n        zn: [125, 128, 176],\n        ga: [194, 143, 143],\n        ge: [102, 143, 143],\n        as: [189, 128, 227],\n        se: [255, 161, 0],\n        br: [166, 41, 41],\n        kr: [92, 184, 209],\n        rb: [112, 46, 176],\n        sr: [0, 255, 0],\n        y: [148, 255, 255],\n        zr: [148, 224, 224],\n        nb: [115, 194, 201],\n        mo: [84, 181, 181],\n        tc: [59, 158, 158],\n        ru: [36, 143, 143],\n        rh: [10, 125, 140],\n        pd: [0, 105, 133],\n        ag: [192, 192, 192],\n        cd: [255, 217, 143],\n        in: [166, 117, 115],\n        sn: [102, 128, 128],\n        sb: [158, 99, 181],\n        te: [212, 122, 0],\n        i: [148, 0, 148],\n        xe: [66, 158, 176],\n        cs: [87, 23, 143],\n        ba: [0, 201, 0],\n        la: [112, 212, 255],\n        ce: [255, 255, 199],\n        pr: [217, 255, 199],\n        nd: [199, 255, 199],\n        pm: [163, 255, 199],\n        sm: [143, 255, 199],\n        eu: [97, 255, 199],\n        gd: [69, 255, 199],\n        tb: [48, 255, 199],\n        dy: [31, 255, 199],\n        ho: [0, 255, 156],\n        er: [0, 230, 117],\n        tm: [0, 212, 82],\n        yb: [0, 191, 56],\n        lu: [0, 171, 36],\n        hf: [77, 194, 255],\n        ta: [77, 166, 255],\n        w: [33, 148, 214],\n        re: [38, 125, 171],\n        os: [38, 102, 150],\n        ir: [23, 84, 135],\n        pt: [208, 208, 224],\n        au: [255, 209, 35],\n        hg: [184, 184, 208],\n        tl: [166, 84, 77],\n        pb: [87, 89, 97],\n        bi: [158, 79, 181],\n        po: [171, 92, 0],\n        at: [117, 79, 69],\n        rn: [66, 130, 150],\n        fr: [66, 0, 102],\n        ra: [0, 125, 0],\n        ac: [112, 171, 250],\n        th: [0, 186, 255],\n        pa: [0, 161, 255],\n        u: [0, 143, 255],\n        np: [0, 128, 255],\n        pu: [0, 107, 255],\n        am: [84, 92, 242],\n        cm: [120, 92, 227],\n        bk: [138, 79, 227],\n        cf: [161, 54, 212],\n        es: [179, 31, 212],\n        fm: [179, 31, 186],\n        md: [179, 13, 166],\n        no: [189, 13, 135],\n        lr: [199, 0, 102],\n        rf: [204, 0, 89],\n        db: [209, 0, 79],\n        sg: [217, 0, 69],\n        bh: [224, 0, 56],\n        hs: [230, 0, 46],\n        mt: [235, 0, 38],\n        ds: [235, 0, 38],\n        rg: [235, 0, 38],\n        cn: [235, 0, 38],\n        uut: [235, 0, 38],\n        uuq: [235, 0, 38],\n        uup: [235, 0, 38],\n        uuh: [235, 0, 38],\n        uus: [235, 0, 38],\n        uuo: [235, 0, 38]\n      };\n      var atoms = [];\n      var _bonds = [];\n      var _bhash = {};\n      var _atomMap = {}; // parse\n\n      var lines = text.split('\\n');\n      for (var i = 0, l = lines.length; i < l; i++) {\n        if (lines[i].substr(0, 4) === 'ATOM' || lines[i].substr(0, 6) === 'HETATM') {\n          var x = parseFloat(lines[i].substr(30, 7));\n          var y = parseFloat(lines[i].substr(38, 7));\n          var z = parseFloat(lines[i].substr(46, 7));\n          var index = parseInt(lines[i].substr(6, 5)) - 1;\n          var e = trim(lines[i].substr(76, 2)).toLowerCase();\n          if (e === '') {\n            e = trim(lines[i].substr(12, 2)).toLowerCase();\n          }\n          var atomData = [x, y, z, CPK[e], capitalize(e)];\n          atoms.push(atomData);\n          _atomMap[index] = atomData;\n        } else if (lines[i].substr(0, 6) === 'CONECT') {\n          var satom = parseInt(lines[i].substr(6, 5));\n          parseBond(11, 5, satom, i);\n          parseBond(16, 5, satom, i);\n          parseBond(21, 5, satom, i);\n          parseBond(26, 5, satom, i);\n        }\n      } // build and return geometry\n\n      return buildGeometry();\n    }\n  }]);\n  return PDBLoader;\n}(Loader);\nexport { PDBLoader };","map":null,"metadata":{},"sourceType":"module"}