{"ast":null,"code":"import { PerspectiveCamera, Vector3, Quaternion } from 'three';\n\n/**\n * peppers ghost effect based on http://www.instructables.com/id/Reflective-Prism/?ALLSTEPS\n */\n\nvar PeppersGhostEffect = function PeppersGhostEffect(renderer) {\n  var scope = this;\n  scope.cameraDistance = 15;\n  scope.reflectFromAbove = false; // Internals\n\n  var _halfWidth, _width, _height;\n  var _cameraF = new PerspectiveCamera(); //front\n\n  var _cameraB = new PerspectiveCamera(); //back\n\n  var _cameraL = new PerspectiveCamera(); //left\n\n  var _cameraR = new PerspectiveCamera(); //right\n\n  var _position = new Vector3();\n  var _quaternion = new Quaternion();\n  var _scale = new Vector3(); // Initialization\n\n  renderer.autoClear = false;\n  this.setSize = function (width, height) {\n    _halfWidth = width / 2;\n    if (width < height) {\n      _width = width / 3;\n      _height = width / 3;\n    } else {\n      _width = height / 3;\n      _height = height / 3;\n    }\n    renderer.setSize(width, height);\n  };\n  this.render = function (scene, camera) {\n    scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n    camera.matrixWorld.decompose(_position, _quaternion, _scale); // front\n\n    _cameraF.position.copy(_position);\n    _cameraF.quaternion.copy(_quaternion);\n    _cameraF.translateZ(scope.cameraDistance);\n    _cameraF.lookAt(scene.position); // back\n\n    _cameraB.position.copy(_position);\n    _cameraB.quaternion.copy(_quaternion);\n    _cameraB.translateZ(-scope.cameraDistance);\n    _cameraB.lookAt(scene.position);\n    _cameraB.rotation.z += 180 * (Math.PI / 180); // left\n\n    _cameraL.position.copy(_position);\n    _cameraL.quaternion.copy(_quaternion);\n    _cameraL.translateX(-scope.cameraDistance);\n    _cameraL.lookAt(scene.position);\n    _cameraL.rotation.x += 90 * (Math.PI / 180); // right\n\n    _cameraR.position.copy(_position);\n    _cameraR.quaternion.copy(_quaternion);\n    _cameraR.translateX(scope.cameraDistance);\n    _cameraR.lookAt(scene.position);\n    _cameraR.rotation.x += 90 * (Math.PI / 180);\n    renderer.clear();\n    renderer.setScissorTest(true);\n    renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraB);\n    } else {\n      renderer.render(scene, _cameraF);\n    }\n    renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraF);\n    } else {\n      renderer.render(scene, _cameraB);\n    }\n    renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraR);\n    } else {\n      renderer.render(scene, _cameraL);\n    }\n    renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n    renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraL);\n    } else {\n      renderer.render(scene, _cameraR);\n    }\n    renderer.setScissorTest(false);\n  };\n};\nexport { PeppersGhostEffect };","map":null,"metadata":{},"sourceType":"module"}