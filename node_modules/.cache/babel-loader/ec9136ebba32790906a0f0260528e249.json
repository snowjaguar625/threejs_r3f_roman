{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { Mesh, Vector3, Color, FrontSide, Plane, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, UniformsUtils, UniformsLib, ShaderMaterial } from 'three';\n\n/**\n * Work based on :\n * https://github.com/Slayvin: Flat mirror for three.js\n * https://home.adelphi.edu/~stemkoski/ : An implementation of water shader based on the flat mirror\n * http://29a.ch/ && http://29a.ch/slides/2012/webglwater/ : Water shader explanations in WebGL\n */\nvar Water = /*#__PURE__*/function (_Mesh) {\n  _inherits(Water, _Mesh);\n  function Water(geometry) {\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Water);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Water).call(this, geometry));\n    var scope = _assertThisInitialized(_assertThisInitialized(_this));\n    var textureWidth = options.textureWidth !== undefined ? options.textureWidth : 512;\n    var textureHeight = options.textureHeight !== undefined ? options.textureHeight : 512;\n    var clipBias = options.clipBias !== undefined ? options.clipBias : 0.0;\n    var alpha = options.alpha !== undefined ? options.alpha : 1.0;\n    var time = options.time !== undefined ? options.time : 0.0;\n    var normalSampler = options.waterNormals !== undefined ? options.waterNormals : null;\n    var sunDirection = options.sunDirection !== undefined ? options.sunDirection : new Vector3(0.70707, 0.70707, 0.0);\n    var sunColor = new Color(options.sunColor !== undefined ? options.sunColor : 0xffffff);\n    var waterColor = new Color(options.waterColor !== undefined ? options.waterColor : 0x7f7f7f);\n    var eye = options.eye !== undefined ? options.eye : new Vector3(0, 0, 0);\n    var distortionScale = options.distortionScale !== undefined ? options.distortionScale : 20.0;\n    var side = options.side !== undefined ? options.side : FrontSide;\n    var fog = options.fog !== undefined ? options.fog : false; //\n\n    var mirrorPlane = new Plane();\n    var normal = new Vector3();\n    var mirrorWorldPosition = new Vector3();\n    var cameraWorldPosition = new Vector3();\n    var rotationMatrix = new Matrix4();\n    var lookAtPosition = new Vector3(0, 0, -1);\n    var clipPlane = new Vector4();\n    var view = new Vector3();\n    var target = new Vector3();\n    var q = new Vector4();\n    var textureMatrix = new Matrix4();\n    var mirrorCamera = new PerspectiveCamera();\n    var renderTarget = new WebGLRenderTarget(textureWidth, textureHeight);\n    var mirrorShader = {\n      uniforms: UniformsUtils.merge([UniformsLib['fog'], UniformsLib['lights'], {\n        normalSampler: {\n          value: null\n        },\n        mirrorSampler: {\n          value: null\n        },\n        alpha: {\n          value: 1.0\n        },\n        time: {\n          value: 0.0\n        },\n        size: {\n          value: 1.0\n        },\n        distortionScale: {\n          value: 20.0\n        },\n        textureMatrix: {\n          value: new Matrix4()\n        },\n        sunColor: {\n          value: new Color(0x7f7f7f)\n        },\n        sunDirection: {\n          value: new Vector3(0.70707, 0.70707, 0)\n        },\n        eye: {\n          value: new Vector3()\n        },\n        waterColor: {\n          value: new Color(0x555555)\n        }\n      }]),\n      vertexShader: /* glsl */\"\\n\\t\\t\\t\\tuniform mat4 textureMatrix;\\n\\t\\t\\t\\tuniform float time;\\n\\n\\t\\t\\t\\tvarying vec4 mirrorCoord;\\n\\t\\t\\t\\tvarying vec4 worldPosition;\\n\\n\\t\\t\\t\\t#include <common>\\n\\t\\t\\t\\t#include <fog_pars_vertex>\\n\\t\\t\\t\\t#include <shadowmap_pars_vertex>\\n\\t\\t\\t\\t#include <logdepthbuf_pars_vertex>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t\\tworldPosition = mirrorCoord.xyzw;\\n\\t\\t\\t\\t\\tmirrorCoord = textureMatrix * mirrorCoord;\\n\\t\\t\\t\\t\\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * mvPosition;\\n\\n\\t\\t\\t\\t#include <beginnormal_vertex>\\n\\t\\t\\t\\t#include <defaultnormal_vertex>\\n\\t\\t\\t\\t#include <logdepthbuf_vertex>\\n\\t\\t\\t\\t#include <fog_vertex>\\n\\t\\t\\t\\t#include <shadowmap_vertex>\\n\\t\\t\\t}\",\n      fragmentShader: /* glsl */\"\\n\\t\\t\\t\\tuniform sampler2D mirrorSampler;\\n\\t\\t\\t\\tuniform float alpha;\\n\\t\\t\\t\\tuniform float time;\\n\\t\\t\\t\\tuniform float size;\\n\\t\\t\\t\\tuniform float distortionScale;\\n\\t\\t\\t\\tuniform sampler2D normalSampler;\\n\\t\\t\\t\\tuniform vec3 sunColor;\\n\\t\\t\\t\\tuniform vec3 sunDirection;\\n\\t\\t\\t\\tuniform vec3 eye;\\n\\t\\t\\t\\tuniform vec3 waterColor;\\n\\n\\t\\t\\t\\tvarying vec4 mirrorCoord;\\n\\t\\t\\t\\tvarying vec4 worldPosition;\\n\\n\\t\\t\\t\\tvec4 getNoise( vec2 uv ) {\\n\\t\\t\\t\\t\\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\\n\\t\\t\\t\\t\\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\\n\\t\\t\\t\\t\\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\\n\\t\\t\\t\\t\\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\\n\\t\\t\\t\\t\\tvec4 noise = texture2D( normalSampler, uv0 ) +\\n\\t\\t\\t\\t\\t\\ttexture2D( normalSampler, uv1 ) +\\n\\t\\t\\t\\t\\t\\ttexture2D( normalSampler, uv2 ) +\\n\\t\\t\\t\\t\\t\\ttexture2D( normalSampler, uv3 );\\n\\t\\t\\t\\t\\treturn noise * 0.5 - 1.0;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\\n\\t\\t\\t\\t\\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\\n\\t\\t\\t\\t\\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\\n\\t\\t\\t\\t\\tspecularColor += pow( direction, shiny ) * sunColor * spec;\\n\\t\\t\\t\\t\\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t#include <common>\\n\\t\\t\\t\\t#include <packing>\\n\\t\\t\\t\\t#include <bsdfs>\\n\\t\\t\\t\\t#include <fog_pars_fragment>\\n\\t\\t\\t\\t#include <logdepthbuf_pars_fragment>\\n\\t\\t\\t\\t#include <lights_pars_begin>\\n\\t\\t\\t\\t#include <shadowmap_pars_fragment>\\n\\t\\t\\t\\t#include <shadowmask_pars_fragment>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\t#include <logdepthbuf_fragment>\\n\\t\\t\\t\\t\\tvec4 noise = getNoise( worldPosition.xz * size );\\n\\t\\t\\t\\t\\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\\n\\n\\t\\t\\t\\t\\tvec3 diffuseLight = vec3(0.0);\\n\\t\\t\\t\\t\\tvec3 specularLight = vec3(0.0);\\n\\n\\t\\t\\t\\t\\tvec3 worldToEye = eye-worldPosition.xyz;\\n\\t\\t\\t\\t\\tvec3 eyeDirection = normalize( worldToEye );\\n\\t\\t\\t\\t\\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\\n\\n\\t\\t\\t\\t\\tfloat distance = length(worldToEye);\\n\\n\\t\\t\\t\\t\\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\\n\\t\\t\\t\\t\\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\\n\\n\\t\\t\\t\\t\\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\\n\\t\\t\\t\\t\\tfloat rf0 = 0.3;\\n\\t\\t\\t\\t\\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\\n\\t\\t\\t\\t\\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\\n\\t\\t\\t\\t\\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\\n\\t\\t\\t\\t\\tvec3 outgoingLight = albedo;\\n\\t\\t\\t\\t\\tgl_FragColor = vec4( outgoingLight, alpha );\\n\\n\\t\\t\\t\\t\\t#include <tonemapping_fragment>\\n\\t\\t\\t\\t\\t#include <fog_fragment>\\n\\t\\t\\t\\t}\"\n    };\n    var material = new ShaderMaterial({\n      fragmentShader: mirrorShader.fragmentShader,\n      vertexShader: mirrorShader.vertexShader,\n      uniforms: UniformsUtils.clone(mirrorShader.uniforms),\n      lights: true,\n      side: side,\n      fog: fog\n    });\n    material.uniforms['mirrorSampler'].value = renderTarget.texture;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n    material.uniforms['alpha'].value = alpha;\n    material.uniforms['time'].value = time;\n    material.uniforms['normalSampler'].value = normalSampler;\n    material.uniforms['sunColor'].value = sunColor;\n    material.uniforms['waterColor'].value = waterColor;\n    material.uniforms['sunDirection'].value = sunDirection;\n    material.uniforms['distortionScale'].value = distortionScale;\n    material.uniforms['eye'].value = eye;\n    scope.material = material;\n    scope.onBeforeRender = function (renderer, scene, camera) {\n      mirrorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(mirrorWorldPosition, cameraWorldPosition); // Avoid rendering when mirror is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(mirrorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(mirrorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(mirrorWorldPosition);\n      mirrorCamera.position.copy(view);\n      mirrorCamera.up.set(0, 1, 0);\n      mirrorCamera.up.applyMatrix4(rotationMatrix);\n      mirrorCamera.up.reflect(normal);\n      mirrorCamera.lookAt(target);\n      mirrorCamera.far = camera.far; // Used in WebGLBackground\n\n      mirrorCamera.updateMatrixWorld();\n      mirrorCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(mirrorCamera.projectionMatrix);\n      textureMatrix.multiply(mirrorCamera.matrixWorldInverse); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n      // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n      mirrorPlane.setFromNormalAndCoplanarPoint(normal, mirrorWorldPosition);\n      mirrorPlane.applyMatrix4(mirrorCamera.matrixWorldInverse);\n      clipPlane.set(mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant);\n      var projectionMatrix = mirrorCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n      clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w;\n      eye.setFromMatrixPosition(camera.matrixWorld); // Render\n\n      var currentRenderTarget = renderer.getRenderTarget();\n      var currentXrEnabled = renderer.xr.enabled;\n      var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      scope.visible = false;\n      renderer.xr.enabled = false; // Avoid camera modification and recursion\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, mirrorCamera);\n      scope.visible = true;\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      var viewport = camera.viewport;\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      }\n    };\n    return _this;\n  }\n  return Water;\n}(Mesh);\nWater.prototype.isWater = true;\nexport { Water };","map":null,"metadata":{},"sourceType":"module"}