{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { BufferGeometry, Float32BufferAttribute } from 'three';\nimport { ConvexHull } from '../math/ConvexHull.js';\nvar ConvexGeometry = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(ConvexGeometry, _BufferGeometry);\n  function ConvexGeometry() {\n    var _this;\n    var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classCallCheck(this, ConvexGeometry);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConvexGeometry).call(this)); // buffers\n\n    var vertices = [];\n    var normals = [];\n    if (ConvexHull === undefined) {\n      console.error('THREE.ConvexGeometry: ConvexGeometry relies on ConvexHull');\n    }\n    var convexHull = new ConvexHull().setFromPoints(points); // generate vertices and normals\n\n    var faces = convexHull.faces;\n    for (var i = 0; i < faces.length; i++) {\n      var face = faces[i];\n      var edge = face.edge; // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n      do {\n        var point = edge.head().point;\n        vertices.push(point.x, point.y, point.z);\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\n        edge = edge.next;\n      } while (edge !== face.edge);\n    } // build geometry\n\n    _this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    _this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    return _this;\n  }\n  return ConvexGeometry;\n}(BufferGeometry);\nexport { ConvexGeometry };","map":null,"metadata":{},"sourceType":"module"}