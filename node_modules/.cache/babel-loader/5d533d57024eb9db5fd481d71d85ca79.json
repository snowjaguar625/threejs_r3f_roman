{"ast":null,"code":"import { Object3D, Matrix4 } from 'three';\n\n/**\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\n */\n\nvar CSS3DObject = function CSS3DObject(element) {\n  Object3D.call(this);\n  this.element = element || document.createElement('div');\n  this.element.style.position = 'absolute';\n  this.element.style.pointerEvents = 'auto';\n  this.addEventListener('removed', function () {\n    this.traverse(function (object) {\n      if (object.element instanceof Element && object.element.parentNode !== null) {\n        object.element.parentNode.removeChild(object.element);\n      }\n    });\n  });\n};\nCSS3DObject.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: CSS3DObject,\n  copy: function copy(source, recursive) {\n    Object3D.prototype.copy.call(this, source, recursive);\n    this.element = source.element.cloneNode(true);\n    return this;\n  }\n});\nvar CSS3DSprite = function CSS3DSprite(element) {\n  CSS3DObject.call(this, element);\n};\nCSS3DSprite.prototype = Object.create(CSS3DObject.prototype);\nCSS3DSprite.prototype.constructor = CSS3DSprite; //\n\nvar CSS3DRenderer = function CSS3DRenderer() {\n  var _this = this;\n  var _width, _height;\n  var _widthHalf, _heightHalf;\n  var matrix = new Matrix4();\n  var cache = {\n    camera: {\n      fov: 0,\n      style: ''\n    },\n    objects: new WeakMap()\n  };\n  var domElement = document.createElement('div');\n  domElement.style.overflow = 'hidden';\n  this.domElement = domElement;\n  var cameraElement = document.createElement('div');\n  cameraElement.style.transformStyle = 'preserve-3d';\n  cameraElement.style.pointerEvents = 'none';\n  domElement.appendChild(cameraElement);\n  this.getSize = function () {\n    return {\n      width: _width,\n      height: _height\n    };\n  };\n  this.setSize = function (width, height) {\n    _width = width;\n    _height = height;\n    _widthHalf = _width / 2;\n    _heightHalf = _height / 2;\n    domElement.style.width = width + 'px';\n    domElement.style.height = height + 'px';\n    cameraElement.style.width = width + 'px';\n    cameraElement.style.height = height + 'px';\n  };\n  function epsilon(value) {\n    return Math.abs(value) < 1e-10 ? 0 : value;\n  }\n  function getCameraCSSMatrix(matrix) {\n    var elements = matrix.elements;\n    return 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(-elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(elements[6]) + ',' + epsilon(elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(-elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(-elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';\n  }\n  function getObjectCSSMatrix(matrix) {\n    var elements = matrix.elements;\n    var matrix3d = 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(-elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(-elements[6]) + ',' + epsilon(-elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';\n    return 'translate(-50%,-50%)' + matrix3d;\n  }\n  function renderObject(object, scene, camera, cameraCSSMatrix) {\n    if (object instanceof CSS3DObject) {\n      object.onBeforeRender(_this, scene, camera);\n      var style;\n      if (object instanceof CSS3DSprite) {\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\n        matrix.copy(camera.matrixWorldInverse);\n        matrix.transpose();\n        matrix.copyPosition(object.matrixWorld);\n        matrix.scale(object.scale);\n        matrix.elements[3] = 0;\n        matrix.elements[7] = 0;\n        matrix.elements[11] = 0;\n        matrix.elements[15] = 1;\n        style = getObjectCSSMatrix(matrix);\n      } else {\n        style = getObjectCSSMatrix(object.matrixWorld);\n      }\n      var element = object.element;\n      var cachedObject = cache.objects.get(object);\n      if (cachedObject === undefined || cachedObject.style !== style) {\n        element.style.transform = style;\n        var objectData = {\n          style: style\n        };\n        cache.objects.set(object, objectData);\n      }\n      element.style.display = object.visible ? '' : 'none';\n      if (element.parentNode !== cameraElement) {\n        cameraElement.appendChild(element);\n      }\n      object.onAfterRender(_this, scene, camera);\n    }\n    for (var i = 0, l = object.children.length; i < l; i++) {\n      renderObject(object.children[i], scene, camera);\n    }\n  }\n  this.render = function (scene, camera) {\n    var fov = camera.projectionMatrix.elements[5] * _heightHalf;\n    if (cache.camera.fov !== fov) {\n      domElement.style.perspective = camera.isPerspectiveCamera ? fov + 'px' : '';\n      cache.camera.fov = fov;\n    }\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n    if (camera.isOrthographicCamera) {\n      var tx = -(camera.right + camera.left) / 2;\n      var ty = (camera.top + camera.bottom) / 2;\n    }\n    var cameraCSSMatrix = camera.isOrthographicCamera ? 'scale(' + fov + ')' + 'translate(' + epsilon(tx) + 'px,' + epsilon(ty) + 'px)' + getCameraCSSMatrix(camera.matrixWorldInverse) : 'translateZ(' + fov + 'px)' + getCameraCSSMatrix(camera.matrixWorldInverse);\n    var style = cameraCSSMatrix + 'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';\n    if (cache.camera.style !== style) {\n      cameraElement.style.transform = style;\n      cache.camera.style = style;\n    }\n    renderObject(scene, scene, camera);\n  };\n};\nexport { CSS3DObject, CSS3DRenderer, CSS3DSprite };","map":null,"metadata":{},"sourceType":"module"}