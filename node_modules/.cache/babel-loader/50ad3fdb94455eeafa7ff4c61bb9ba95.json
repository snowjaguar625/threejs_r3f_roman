{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nimport CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\nvar FunctionNode = /*#__PURE__*/function (_CodeNode) {\n  _inherits(FunctionNode, _CodeNode);\n  function FunctionNode() {\n    var _this;\n    var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    _classCallCheck(this, FunctionNode);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FunctionNode).call(this, code));\n    _this.keywords = {};\n    return _this;\n  }\n  _createClass(FunctionNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      return this.getNodeFunction(builder).type;\n    }\n  }, {\n    key: \"getInputs\",\n    value: function getInputs(builder) {\n      return this.getNodeFunction(builder).inputs;\n    }\n  }, {\n    key: \"getNodeFunction\",\n    value: function getNodeFunction(builder) {\n      var nodeData = builder.getDataFromNode(this);\n      var nodeFunction = nodeData.nodeFunction;\n      if (nodeFunction === undefined) {\n        nodeFunction = builder.parser.parseFunction(this.code);\n        nodeData.nodeFunction = nodeFunction;\n      }\n      return nodeFunction;\n    }\n  }, {\n    key: \"call\",\n    value: function call() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new FunctionCallNode(this, parameters);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder, output) {\n      _get(_getPrototypeOf(FunctionNode.prototype), \"generate\", this).call(this, builder);\n      var nodeFunction = this.getNodeFunction(builder);\n      var name = nodeFunction.name;\n      var type = nodeFunction.type;\n      var nodeCode = builder.getCodeFromNode(this, type);\n      if (name !== '') {\n        // use a custom property name\n        nodeCode.name = name;\n      }\n      var propertyName = builder.getPropertyName(nodeCode);\n      var code = this.getNodeFunction(builder).getCode(propertyName);\n      var keywords = this.keywords;\n      var keywordsProperties = Object.keys(keywords);\n      if (keywordsProperties.length > 0) {\n        var _iterator = _createForOfIteratorHelper(keywordsProperties),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var property = _step.value;\n            var propertyRegExp = new RegExp(\"\\\\b\".concat(property, \"\\\\b\"), 'g');\n            var nodeProperty = keywords[property].build(builder, 'property');\n            code = code.replace(propertyRegExp, nodeProperty);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      nodeCode.code = code;\n      if (output === 'property') {\n        return propertyName;\n      } else {\n        return builder.format(\"\".concat(propertyName, \"()\"), type, output);\n      }\n    }\n  }]);\n  return FunctionNode;\n}(CodeNode);\nexport default FunctionNode;","map":null,"metadata":{},"sourceType":"module"}