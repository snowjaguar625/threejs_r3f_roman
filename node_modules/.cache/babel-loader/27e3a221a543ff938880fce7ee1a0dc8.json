{"ast":null,"code":"import { Color } from 'three';\nvar Lut = function Lut(colormap, numberofcolors) {\n  this.lut = [];\n  this.setColorMap(colormap, numberofcolors);\n  return this;\n};\nLut.prototype = {\n  constructor: Lut,\n  lut: [],\n  map: [],\n  n: 256,\n  minV: 0,\n  maxV: 1,\n  set: function set(value) {\n    if (value instanceof Lut) {\n      this.copy(value);\n    }\n    return this;\n  },\n  setMin: function setMin(min) {\n    this.minV = min;\n    return this;\n  },\n  setMax: function setMax(max) {\n    this.maxV = max;\n    return this;\n  },\n  setColorMap: function setColorMap(colormap, numberofcolors) {\n    this.map = ColorMapKeywords[colormap] || ColorMapKeywords.rainbow;\n    this.n = numberofcolors || 32;\n    var step = 1.0 / this.n;\n    this.lut.length = 0;\n    for (var i = 0; i <= 1; i += step) {\n      for (var j = 0; j < this.map.length - 1; j++) {\n        if (i >= this.map[j][0] && i < this.map[j + 1][0]) {\n          var min = this.map[j][0];\n          var max = this.map[j + 1][0];\n          var minColor = new Color(this.map[j][1]);\n          var maxColor = new Color(this.map[j + 1][1]);\n          var color = minColor.lerp(maxColor, (i - min) / (max - min));\n          this.lut.push(color);\n        }\n      }\n    }\n    return this;\n  },\n  copy: function copy(lut) {\n    this.lut = lut.lut;\n    this.map = lut.map;\n    this.n = lut.n;\n    this.minV = lut.minV;\n    this.maxV = lut.maxV;\n    return this;\n  },\n  getColor: function getColor(alpha) {\n    if (alpha <= this.minV) {\n      alpha = this.minV;\n    } else if (alpha >= this.maxV) {\n      alpha = this.maxV;\n    }\n    alpha = (alpha - this.minV) / (this.maxV - this.minV);\n    var colorPosition = Math.round(alpha * this.n);\n    colorPosition == this.n ? colorPosition -= 1 : colorPosition;\n    return this.lut[colorPosition];\n  },\n  addColorMap: function addColorMap(colormapName, arrayOfColors) {\n    ColorMapKeywords[colormapName] = arrayOfColors;\n  },\n  createCanvas: function createCanvas() {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = this.n;\n    this.updateCanvas(canvas);\n    return canvas;\n  },\n  updateCanvas: function updateCanvas(canvas) {\n    var ctx = canvas.getContext('2d', {\n      alpha: false\n    });\n    var imageData = ctx.getImageData(0, 0, 1, this.n);\n    var data = imageData.data;\n    var k = 0;\n    var step = 1.0 / this.n;\n    for (var i = 1; i >= 0; i -= step) {\n      for (var j = this.map.length - 1; j >= 0; j--) {\n        if (i < this.map[j][0] && i >= this.map[j - 1][0]) {\n          var min = this.map[j - 1][0];\n          var max = this.map[j][0];\n          var minColor = new Color(this.map[j - 1][1]);\n          var maxColor = new Color(this.map[j][1]);\n          var color = minColor.lerp(maxColor, (i - min) / (max - min));\n          data[k * 4] = Math.round(color.r * 255);\n          data[k * 4 + 1] = Math.round(color.g * 255);\n          data[k * 4 + 2] = Math.round(color.b * 255);\n          data[k * 4 + 3] = 255;\n          k += 1;\n        }\n      }\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n};\nvar ColorMapKeywords = {\n  rainbow: [[0.0, 0x0000ff], [0.2, 0x00ffff], [0.5, 0x00ff00], [0.8, 0xffff00], [1.0, 0xff0000]],\n  cooltowarm: [[0.0, 0x3c4ec2], [0.2, 0x9bbcff], [0.5, 0xdcdcdc], [0.8, 0xf6a385], [1.0, 0xb40426]],\n  blackbody: [[0.0, 0x000000], [0.2, 0x780000], [0.5, 0xe63200], [0.8, 0xffff00], [1.0, 0xffffff]],\n  grayscale: [[0.0, 0x000000], [0.2, 0x404040], [0.5, 0x7f7f80], [0.8, 0xbfbfbf], [1.0, 0xffffff]]\n};\nexport { ColorMapKeywords, Lut };","map":null,"metadata":{},"sourceType":"module"}