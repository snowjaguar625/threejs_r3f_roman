{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Group, BufferGeometry, BufferAttribute, LineSegments, LineBasicMaterial, Box3Helper, Box3, MeshBasicMaterial, DoubleSide, Mesh, PlaneGeometry } from 'three';\nvar CSMHelper = /*#__PURE__*/function (_Group) {\n  _inherits(CSMHelper, _Group);\n  function CSMHelper(csm) {\n    var _this;\n    _classCallCheck(this, CSMHelper);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CSMHelper).call(this));\n    _this.csm = csm;\n    _this.displayFrustum = true;\n    _this.displayPlanes = true;\n    _this.displayShadowBounds = true;\n    var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    var positions = new Float32Array(24);\n    var frustumGeometry = new BufferGeometry();\n    frustumGeometry.setIndex(new BufferAttribute(indices, 1));\n    frustumGeometry.setAttribute('position', new BufferAttribute(positions, 3, false));\n    var frustumLines = new LineSegments(frustumGeometry, new LineBasicMaterial());\n    _this.add(frustumLines);\n    _this.frustumLines = frustumLines;\n    _this.cascadeLines = [];\n    _this.cascadePlanes = [];\n    _this.shadowLines = [];\n    return _this;\n  }\n  _createClass(CSMHelper, [{\n    key: \"updateVisibility\",\n    value: function updateVisibility() {\n      var displayFrustum = this.displayFrustum;\n      var displayPlanes = this.displayPlanes;\n      var displayShadowBounds = this.displayShadowBounds;\n      var frustumLines = this.frustumLines;\n      var cascadeLines = this.cascadeLines;\n      var cascadePlanes = this.cascadePlanes;\n      var shadowLines = this.shadowLines;\n      for (var i = 0, l = cascadeLines.length; i < l; i++) {\n        var cascadeLine = cascadeLines[i];\n        var cascadePlane = cascadePlanes[i];\n        var shadowLineGroup = shadowLines[i];\n        cascadeLine.visible = displayFrustum;\n        cascadePlane.visible = displayFrustum && displayPlanes;\n        shadowLineGroup.visible = displayShadowBounds;\n      }\n      frustumLines.visible = displayFrustum;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var csm = this.csm;\n      var camera = csm.camera;\n      var cascades = csm.cascades;\n      var mainFrustum = csm.mainFrustum;\n      var frustums = csm.frustums;\n      var lights = csm.lights;\n      var frustumLines = this.frustumLines;\n      var frustumLinePositions = frustumLines.geometry.getAttribute('position');\n      var cascadeLines = this.cascadeLines;\n      var cascadePlanes = this.cascadePlanes;\n      var shadowLines = this.shadowLines;\n      this.position.copy(camera.position);\n      this.quaternion.copy(camera.quaternion);\n      this.scale.copy(camera.scale);\n      this.updateMatrixWorld(true);\n      while (cascadeLines.length > cascades) {\n        this.remove(cascadeLines.pop());\n        this.remove(cascadePlanes.pop());\n        this.remove(shadowLines.pop());\n      }\n      while (cascadeLines.length < cascades) {\n        var cascadeLine = new Box3Helper(new Box3(), 0xffffff);\n        var planeMat = new MeshBasicMaterial({\n          transparent: true,\n          opacity: 0.1,\n          depthWrite: false,\n          side: DoubleSide\n        });\n        var cascadePlane = new Mesh(new PlaneGeometry(), planeMat);\n        var shadowLineGroup = new Group();\n        var shadowLine = new Box3Helper(new Box3(), 0xffff00);\n        shadowLineGroup.add(shadowLine);\n        this.add(cascadeLine);\n        this.add(cascadePlane);\n        this.add(shadowLineGroup);\n        cascadeLines.push(cascadeLine);\n        cascadePlanes.push(cascadePlane);\n        shadowLines.push(shadowLineGroup);\n      }\n      for (var i = 0; i < cascades; i++) {\n        var frustum = frustums[i];\n        var light = lights[i];\n        var shadowCam = light.shadow.camera;\n        var _farVerts = frustum.vertices.far;\n        var _cascadeLine = cascadeLines[i];\n        var _cascadePlane = cascadePlanes[i];\n        var _shadowLineGroup = shadowLines[i];\n        var _shadowLine = _shadowLineGroup.children[0];\n        _cascadeLine.box.min.copy(_farVerts[2]);\n        _cascadeLine.box.max.copy(_farVerts[0]);\n        _cascadeLine.box.max.z += 1e-4;\n        _cascadePlane.position.addVectors(_farVerts[0], _farVerts[2]);\n        _cascadePlane.position.multiplyScalar(0.5);\n        _cascadePlane.scale.subVectors(_farVerts[0], _farVerts[2]);\n        _cascadePlane.scale.z = 1e-4;\n        this.remove(_shadowLineGroup);\n        _shadowLineGroup.position.copy(shadowCam.position);\n        _shadowLineGroup.quaternion.copy(shadowCam.quaternion);\n        _shadowLineGroup.scale.copy(shadowCam.scale);\n        _shadowLineGroup.updateMatrixWorld(true);\n        this.attach(_shadowLineGroup);\n        _shadowLine.box.min.set(shadowCam.bottom, shadowCam.left, -shadowCam.far);\n        _shadowLine.box.max.set(shadowCam.top, shadowCam.right, -shadowCam.near);\n      }\n      var nearVerts = mainFrustum.vertices.near;\n      var farVerts = mainFrustum.vertices.far;\n      frustumLinePositions.setXYZ(0, farVerts[0].x, farVerts[0].y, farVerts[0].z);\n      frustumLinePositions.setXYZ(1, farVerts[3].x, farVerts[3].y, farVerts[3].z);\n      frustumLinePositions.setXYZ(2, farVerts[2].x, farVerts[2].y, farVerts[2].z);\n      frustumLinePositions.setXYZ(3, farVerts[1].x, farVerts[1].y, farVerts[1].z);\n      frustumLinePositions.setXYZ(4, nearVerts[0].x, nearVerts[0].y, nearVerts[0].z);\n      frustumLinePositions.setXYZ(5, nearVerts[3].x, nearVerts[3].y, nearVerts[3].z);\n      frustumLinePositions.setXYZ(6, nearVerts[2].x, nearVerts[2].y, nearVerts[2].z);\n      frustumLinePositions.setXYZ(7, nearVerts[1].x, nearVerts[1].y, nearVerts[1].z);\n      frustumLinePositions.needsUpdate = true;\n    }\n  }]);\n  return CSMHelper;\n}(Group);\nexport { CSMHelper };","map":null,"metadata":{},"sourceType":"module"}