{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { EventDispatcher, MOUSE, Vector3, Vector2, Quaternion } from 'three';\nvar TrackballControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(TrackballControls, _EventDispatcher);\n  // internals\n  // events\n  function TrackballControls(object, _domElement) {\n    var _this;\n    _classCallCheck(this, TrackballControls);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrackballControls).call(this));\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"enabled\", true);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"screen\", {\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"rotateSpeed\", 1.0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"zoomSpeed\", 1.2);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"panSpeed\", 0.3);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"noRotate\", false);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"noZoom\", false);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"noPan\", false);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"staticMoving\", false);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dynamicDampingFactor\", 0.2);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"minDistance\", 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"maxDistance\", Infinity);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"keys\", ['KeyA'\n    /*A*/, 'KeyS'\n    /*S*/, 'KeyD'\n    /*D*/]);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"mouseButtons\", {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"object\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"domElement\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"cursorZoom\", false);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"target\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"mousePosition\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"STATE\", {\n      NONE: -1,\n      ROTATE: 0,\n      ZOOM: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_ZOOM_PAN: 4\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"EPS\", 0.000001);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"lastZoom\", 1);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"lastPosition\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"cursorVector\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"targetVector\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_state\", _this.STATE.NONE);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_keyState\", _this.STATE.NONE);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_eye\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_movePrev\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_moveCurr\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_lastAxis\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_lastAngle\", 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_zoomStart\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_zoomEnd\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_touchZoomDistanceStart\", 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_touchZoomDistanceEnd\", 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_panStart\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_panEnd\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"target0\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"position0\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"up0\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"zoom0\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"changeEvent\", {\n      type: 'change'\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"startEvent\", {\n      type: 'start'\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"endEvent\", {\n      type: 'end'\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onScreenVector\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getMouseOnScreen\", function (pageX, pageY) {\n      _this.onScreenVector.set((pageX - _this.screen.left) / _this.screen.width, (pageY - _this.screen.top) / _this.screen.height);\n      return _this.onScreenVector;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onCircleVector\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getMouseOnCircle\", function (pageX, pageY) {\n      _this.onCircleVector.set((pageX - _this.screen.width * 0.5 - _this.screen.left) / (_this.screen.width * 0.5), (_this.screen.height + 2 * (_this.screen.top - pageY)) / _this.screen.width // screen.width intentional\n      );\n\n      return _this.onCircleVector;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"axis\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"quaternion\", new Quaternion());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"eyeDirection\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"objectUpDirection\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"objectSidewaysDirection\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"moveDirection\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"angle\", 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"rotateCamera\", function () {\n      _this.moveDirection.set(_this._moveCurr.x - _this._movePrev.x, _this._moveCurr.y - _this._movePrev.y, 0);\n      _this.angle = _this.moveDirection.length();\n      if (_this.angle) {\n        _this._eye.copy(_this.object.position).sub(_this.target);\n        _this.eyeDirection.copy(_this._eye).normalize();\n        _this.objectUpDirection.copy(_this.object.up).normalize();\n        _this.objectSidewaysDirection.crossVectors(_this.objectUpDirection, _this.eyeDirection).normalize();\n        _this.objectUpDirection.setLength(_this._moveCurr.y - _this._movePrev.y);\n        _this.objectSidewaysDirection.setLength(_this._moveCurr.x - _this._movePrev.x);\n        _this.moveDirection.copy(_this.objectUpDirection.add(_this.objectSidewaysDirection));\n        _this.axis.crossVectors(_this.moveDirection, _this._eye).normalize();\n        _this.angle *= _this.rotateSpeed;\n        _this.quaternion.setFromAxisAngle(_this.axis, _this.angle);\n        _this._eye.applyQuaternion(_this.quaternion);\n        _this.object.up.applyQuaternion(_this.quaternion);\n        _this._lastAxis.copy(_this.axis);\n        _this._lastAngle = _this.angle;\n      } else if (!_this.staticMoving && _this._lastAngle) {\n        _this._lastAngle *= Math.sqrt(1.0 - _this.dynamicDampingFactor);\n        _this._eye.copy(_this.object.position).sub(_this.target);\n        _this.quaternion.setFromAxisAngle(_this._lastAxis, _this._lastAngle);\n        _this._eye.applyQuaternion(_this.quaternion);\n        _this.object.up.applyQuaternion(_this.quaternion);\n      }\n      _this._movePrev.copy(_this._moveCurr);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"zoomCamera\", function () {\n      var factor;\n      if (_this._state === _this.STATE.TOUCH_ZOOM_PAN) {\n        factor = _this._touchZoomDistanceStart / _this._touchZoomDistanceEnd;\n        _this._touchZoomDistanceStart = _this._touchZoomDistanceEnd;\n        if (_this.object.isPerspectiveCamera) {\n          _this._eye.multiplyScalar(factor);\n        } else if (_this.object.isOrthographicCamera) {\n          _this.object.zoom /= factor;\n          _this.object.updateProjectionMatrix();\n        } else {\n          console.warn('THREE.TrackballControls: Unsupported camera type');\n        }\n      } else {\n        factor = 1.0 + (_this._zoomEnd.y - _this._zoomStart.y) * _this.zoomSpeed;\n        if (Math.abs(factor - 1.0) > _this.EPS && factor > 0.0) {\n          if (_this.object.isPerspectiveCamera) {\n            if (factor > 1.0 && _this._eye.length() >= _this.maxDistance - _this.EPS) {\n              factor = 1.0;\n            }\n            _this._eye.multiplyScalar(factor);\n          } else if (_this.object.isOrthographicCamera) {\n            if (factor > 1.0 && _this.object.zoom < _this.maxDistance * _this.maxDistance) {\n              factor = 1.0;\n            }\n            _this.object.zoom /= factor;\n          } else {\n            console.warn('THREE.TrackballControls: Unsupported camera type');\n          }\n        }\n        if (_this.staticMoving) {\n          _this._zoomStart.copy(_this._zoomEnd);\n        } else {\n          _this._zoomStart.y += (_this._zoomEnd.y - _this._zoomStart.y) * _this.dynamicDampingFactor;\n        }\n        if (_this.cursorZoom) {\n          //determine 3D position of mouse cursor (on target plane)\n          _this.targetVector.copy(_this.target).project(_this.object);\n          var worldPos = _this.cursorVector.set(_this.mousePosition.x, _this.mousePosition.y, _this.targetVector.z).unproject(_this.object); //adjust target point so that \"point\" stays in place\n\n          _this.target.lerpVectors(worldPos, _this.target, factor);\n        } // Update the projection matrix after all properties are changed\n\n        if (_this.object.isOrthographicCamera) {\n          _this.object.updateProjectionMatrix();\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"mouseChange\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"objectUp\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"pan\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"panCamera\", function () {\n      if (!_this.domElement) return;\n      _this.mouseChange.copy(_this._panEnd).sub(_this._panStart);\n      if (_this.mouseChange.lengthSq() > _this.EPS) {\n        if (_this.object.isOrthographicCamera) {\n          var orthoObject = _this.object;\n          var scale_x = (orthoObject.right - orthoObject.left) / _this.object.zoom;\n          var scale_y = (orthoObject.top - orthoObject.bottom) / _this.object.zoom;\n          _this.mouseChange.x *= scale_x;\n          _this.mouseChange.y *= scale_y;\n        } else {\n          _this.mouseChange.multiplyScalar(_this._eye.length() * _this.panSpeed);\n        }\n        _this.pan.copy(_this._eye).cross(_this.object.up).setLength(_this.mouseChange.x);\n        _this.pan.add(_this.objectUp.copy(_this.object.up).setLength(_this.mouseChange.y));\n        _this.object.position.add(_this.pan);\n        _this.target.add(_this.pan);\n        if (_this.staticMoving) {\n          _this._panStart.copy(_this._panEnd);\n        } else {\n          _this._panStart.add(_this.mouseChange.subVectors(_this._panEnd, _this._panStart).multiplyScalar(_this.dynamicDampingFactor));\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"checkDistances\", function () {\n      if (!_this.noZoom || !_this.noPan) {\n        if (_this._eye.lengthSq() > _this.maxDistance * _this.maxDistance) {\n          _this.object.position.addVectors(_this.target, _this._eye.setLength(_this.maxDistance));\n          _this._zoomStart.copy(_this._zoomEnd);\n        }\n        if (_this._eye.lengthSq() < _this.minDistance * _this.minDistance) {\n          _this.object.position.addVectors(_this.target, _this._eye.setLength(_this.minDistance));\n          _this._zoomStart.copy(_this._zoomEnd);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleResize\", function () {\n      if (!_this.domElement) return;\n      var box = _this.domElement.getBoundingClientRect(); // adjustments come from similar code in the jquery offset() function\n\n      var d = _this.domElement.ownerDocument.documentElement;\n      _this.screen.left = box.left + window.pageXOffset - d.clientLeft;\n      _this.screen.top = box.top + window.pageYOffset - d.clientTop;\n      _this.screen.width = box.width;\n      _this.screen.height = box.height;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"update\", function () {\n      _this._eye.subVectors(_this.object.position, _this.target);\n      if (!_this.noRotate) {\n        _this.rotateCamera();\n      }\n      if (!_this.noZoom) {\n        _this.zoomCamera();\n      }\n      if (!_this.noPan) {\n        _this.panCamera();\n      }\n      _this.object.position.addVectors(_this.target, _this._eye);\n      if (_this.object.isPerspectiveCamera) {\n        _this.checkDistances();\n        _this.object.lookAt(_this.target);\n        if (_this.lastPosition.distanceToSquared(_this.object.position) > _this.EPS) {\n          _this.dispatchEvent(_this.changeEvent);\n          _this.lastPosition.copy(_this.object.position);\n        }\n      } else if (_this.object.isOrthographicCamera) {\n        _this.object.lookAt(_this.target);\n        if (_this.lastPosition.distanceToSquared(_this.object.position) > _this.EPS || _this.lastZoom !== _this.object.zoom) {\n          _this.dispatchEvent(_this.changeEvent);\n          _this.lastPosition.copy(_this.object.position);\n          _this.lastZoom = _this.object.zoom;\n        }\n      } else {\n        console.warn('THREE.TrackballControls: Unsupported camera type');\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"reset\", function () {\n      _this._state = _this.STATE.NONE;\n      _this._keyState = _this.STATE.NONE;\n      _this.target.copy(_this.target0);\n      _this.object.position.copy(_this.position0);\n      _this.object.up.copy(_this.up0);\n      _this.object.zoom = _this.zoom0;\n      _this.object.updateProjectionMatrix();\n      _this._eye.subVectors(_this.object.position, _this.target);\n      _this.object.lookAt(_this.target);\n      _this.dispatchEvent(_this.changeEvent);\n      _this.lastPosition.copy(_this.object.position);\n      _this.lastZoom = _this.object.zoom;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"keydown\", function (event) {\n      if (_this.enabled === false) return;\n      window.removeEventListener('keydown', _this.keydown);\n      if (_this._keyState !== _this.STATE.NONE) {\n        return;\n      } else if (event.code === _this.keys[_this.STATE.ROTATE] && !_this.noRotate) {\n        _this._keyState = _this.STATE.ROTATE;\n      } else if (event.code === _this.keys[_this.STATE.ZOOM] && !_this.noZoom) {\n        _this._keyState = _this.STATE.ZOOM;\n      } else if (event.code === _this.keys[_this.STATE.PAN] && !_this.noPan) {\n        _this._keyState = _this.STATE.PAN;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPointerDown\", function (event) {\n      if (_this.enabled === false) return;\n      switch (event.pointerType) {\n        case 'mouse':\n        case 'pen':\n          _this.onMouseDown(event);\n          break;\n        // TODO touch\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPointerMove\", function (event) {\n      if (_this.enabled === false) return;\n      switch (event.pointerType) {\n        case 'mouse':\n        case 'pen':\n          _this.onMouseMove(event);\n          break;\n        // TODO touch\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPointerUp\", function (event) {\n      if (_this.enabled === false) return;\n      switch (event.pointerType) {\n        case 'mouse':\n        case 'pen':\n          _this.onMouseUp();\n          break;\n        // TODO touch\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"keyup\", function () {\n      if (_this.enabled === false) return;\n      _this._keyState = _this.STATE.NONE;\n      window.addEventListener('keydown', _this.keydown);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseDown\", function (event) {\n      if (!_this.domElement) return;\n      if (_this._state === _this.STATE.NONE) {\n        switch (event.button) {\n          case _this.mouseButtons.LEFT:\n            _this._state = _this.STATE.ROTATE;\n            break;\n          case _this.mouseButtons.MIDDLE:\n            _this._state = _this.STATE.ZOOM;\n            break;\n          case _this.mouseButtons.RIGHT:\n            _this._state = _this.STATE.PAN;\n            break;\n          default:\n            _this._state = _this.STATE.NONE;\n        }\n      }\n      var state = _this._keyState !== _this.STATE.NONE ? _this._keyState : _this._state;\n      if (state === _this.STATE.ROTATE && !_this.noRotate) {\n        _this._moveCurr.copy(_this.getMouseOnCircle(event.pageX, event.pageY));\n        _this._movePrev.copy(_this._moveCurr);\n      } else if (state === _this.STATE.ZOOM && !_this.noZoom) {\n        _this._zoomStart.copy(_this.getMouseOnScreen(event.pageX, event.pageY));\n        _this._zoomEnd.copy(_this._zoomStart);\n      } else if (state === _this.STATE.PAN && !_this.noPan) {\n        _this._panStart.copy(_this.getMouseOnScreen(event.pageX, event.pageY));\n        _this._panEnd.copy(_this._panStart);\n      }\n      _this.domElement.ownerDocument.addEventListener('pointermove', _this.onPointerMove);\n      _this.domElement.ownerDocument.addEventListener('pointerup', _this.onPointerUp);\n      _this.dispatchEvent(_this.startEvent);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseMove\", function (event) {\n      if (_this.enabled === false) return;\n      var state = _this._keyState !== _this.STATE.NONE ? _this._keyState : _this._state;\n      if (state === _this.STATE.ROTATE && !_this.noRotate) {\n        _this._movePrev.copy(_this._moveCurr);\n        _this._moveCurr.copy(_this.getMouseOnCircle(event.pageX, event.pageY));\n      } else if (state === _this.STATE.ZOOM && !_this.noZoom) {\n        _this._zoomEnd.copy(_this.getMouseOnScreen(event.pageX, event.pageY));\n      } else if (state === _this.STATE.PAN && !_this.noPan) {\n        _this._panEnd.copy(_this.getMouseOnScreen(event.pageX, event.pageY));\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseUp\", function () {\n      if (!_this.domElement) return;\n      if (_this.enabled === false) return;\n      _this._state = _this.STATE.NONE;\n      _this.domElement.ownerDocument.removeEventListener('pointermove', _this.onPointerMove);\n      _this.domElement.ownerDocument.removeEventListener('pointerup', _this.onPointerUp);\n      _this.dispatchEvent(_this.endEvent);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"mousewheel\", function (event) {\n      if (_this.enabled === false) return;\n      if (_this.noZoom === true) return;\n      event.preventDefault();\n      switch (event.deltaMode) {\n        case 2:\n          // Zoom in pages\n          _this._zoomStart.y -= event.deltaY * 0.025;\n          break;\n        case 1:\n          // Zoom in lines\n          _this._zoomStart.y -= event.deltaY * 0.01;\n          break;\n        default:\n          // undefined, 0, assume pixels\n          _this._zoomStart.y -= event.deltaY * 0.00025;\n          break;\n      }\n      _this.mousePosition.x = event.offsetX / _this.screen.width * 2 - 1;\n      _this.mousePosition.y = -(event.offsetY / _this.screen.height) * 2 + 1;\n      _this.dispatchEvent(_this.startEvent);\n      _this.dispatchEvent(_this.endEvent);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"touchstart\", function (event) {\n      if (_this.enabled === false) return;\n      event.preventDefault();\n      switch (event.touches.length) {\n        case 1:\n          _this._state = _this.STATE.TOUCH_ROTATE;\n          _this._moveCurr.copy(_this.getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n          _this._movePrev.copy(_this._moveCurr);\n          break;\n        default:\n          // 2 or more\n          _this._state = _this.STATE.TOUCH_ZOOM_PAN;\n          var dx = event.touches[0].pageX - event.touches[1].pageX;\n          var dy = event.touches[0].pageY - event.touches[1].pageY;\n          _this._touchZoomDistanceEnd = _this._touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);\n          var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;\n          var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;\n          _this._panStart.copy(_this.getMouseOnScreen(x, y));\n          _this._panEnd.copy(_this._panStart);\n          break;\n      }\n      _this.dispatchEvent(_this.startEvent);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"touchmove\", function (event) {\n      if (_this.enabled === false) return;\n      event.preventDefault();\n      switch (event.touches.length) {\n        case 1:\n          _this._movePrev.copy(_this._moveCurr);\n          _this._moveCurr.copy(_this.getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n          break;\n        default:\n          // 2 or more\n          var dx = event.touches[0].pageX - event.touches[1].pageX;\n          var dy = event.touches[0].pageY - event.touches[1].pageY;\n          _this._touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);\n          var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;\n          var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;\n          _this._panEnd.copy(_this.getMouseOnScreen(x, y));\n          break;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"touchend\", function (event) {\n      if (_this.enabled === false) return;\n      switch (event.touches.length) {\n        case 0:\n          _this._state = _this.STATE.NONE;\n          break;\n        case 1:\n          _this._state = _this.STATE.TOUCH_ROTATE;\n          _this._moveCurr.copy(_this.getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n          _this._movePrev.copy(_this._moveCurr);\n          break;\n      }\n      _this.dispatchEvent(_this.endEvent);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"contextmenu\", function (event) {\n      if (_this.enabled === false) return;\n      event.preventDefault();\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"connect\", function (domElement) {\n      if (domElement === document) {\n        console.error('THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n      _this.domElement = domElement;\n      _this.domElement.addEventListener('contextmenu', _this.contextmenu);\n      _this.domElement.addEventListener('pointerdown', _this.onPointerDown);\n      _this.domElement.addEventListener('wheel', _this.mousewheel);\n      _this.domElement.addEventListener('touchstart', _this.touchstart);\n      _this.domElement.addEventListener('touchend', _this.touchend);\n      _this.domElement.addEventListener('touchmove', _this.touchmove);\n      _this.domElement.ownerDocument.addEventListener('pointermove', _this.onPointerMove);\n      _this.domElement.ownerDocument.addEventListener('pointerup', _this.onPointerUp);\n      window.addEventListener('keydown', _this.keydown);\n      window.addEventListener('keyup', _this.keyup);\n      _this.handleResize();\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dispose\", function () {\n      if (!_this.domElement) return;\n      _this.domElement.removeEventListener('contextmenu', _this.contextmenu);\n      _this.domElement.removeEventListener('pointerdown', _this.onPointerDown);\n      _this.domElement.removeEventListener('wheel', _this.mousewheel);\n      _this.domElement.removeEventListener('touchstart', _this.touchstart);\n      _this.domElement.removeEventListener('touchend', _this.touchend);\n      _this.domElement.removeEventListener('touchmove', _this.touchmove);\n      _this.domElement.ownerDocument.removeEventListener('pointermove', _this.onPointerMove);\n      _this.domElement.ownerDocument.removeEventListener('pointerup', _this.onPointerUp);\n      window.removeEventListener('keydown', _this.keydown);\n      window.removeEventListener('keyup', _this.keyup);\n    });\n    _this.object = object; // for reset\n\n    _this.target0 = _this.target.clone();\n    _this.position0 = _this.object.position.clone();\n    _this.up0 = _this.object.up.clone();\n    _this.zoom0 = _this.object.zoom; // connect events\n\n    if (_domElement !== undefined) _this.connect(_domElement); // force an update at start\n\n    _this.update();\n    return _this;\n  }\n  return TrackballControls;\n}(EventDispatcher);\nexport { TrackballControls };","map":null,"metadata":{},"sourceType":"module"}