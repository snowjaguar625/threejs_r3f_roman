{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { Mesh, Color, Vector2, LinearEncoding, TextureLoader, Matrix4, Clock, ShaderMaterial, UniformsUtils, UniformsLib, RepeatWrapping, Vector4 } from 'three';\nimport { Reflector } from './Reflector.js';\nimport { Refractor } from './Refractor.js';\n\n/**\n * References:\n *\thttp://www.valvesoftware.com/publications/2010/siggraph2010_vlachos_waterflow.pdf\n * \thttp://graphicsrunner.blogspot.de/2010/08/water-using-flow-maps.html\n *\n */\nvar Water2 = /*#__PURE__*/function (_Mesh) {\n  _inherits(Water2, _Mesh);\n  function Water2(geometry) {\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Water2);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Water2).call(this, geometry));\n    _this.type = 'Water';\n    var scope = _assertThisInitialized(_assertThisInitialized(_this));\n    var color = options.color !== undefined ? new Color(options.color) : new Color(0xffffff);\n    var textureWidth = options.textureWidth || 512;\n    var textureHeight = options.textureHeight || 512;\n    var clipBias = options.clipBias || 0;\n    var flowDirection = options.flowDirection || new Vector2(1, 0);\n    var flowSpeed = options.flowSpeed || 0.03;\n    var reflectivity = options.reflectivity || 0.02;\n    var scale = options.scale || 1;\n    var shader = options.shader || Water.WaterShader;\n    var encoding = options.encoding !== undefined ? options.encoding : LinearEncoding;\n    var textureLoader = new TextureLoader();\n    var flowMap = options.flowMap || undefined;\n    var normalMap0 = options.normalMap0 || textureLoader.load('textures/water/Water_1_M_Normal.jpg');\n    var normalMap1 = options.normalMap1 || textureLoader.load('textures/water/Water_2_M_Normal.jpg');\n    var cycle = 0.15; // a cycle of a flow map phase\n\n    var halfCycle = cycle * 0.5;\n    var textureMatrix = new Matrix4();\n    var clock = new Clock(); // internal components\n\n    if (Reflector === undefined) {\n      console.error('THREE.Water: Required component Reflector not found.');\n      return _possibleConstructorReturn(_this);\n    }\n    if (Refractor === undefined) {\n      console.error('THREE.Water: Required component Refractor not found.');\n      return _possibleConstructorReturn(_this);\n    }\n    var reflector = new Reflector(geometry, {\n      textureWidth: textureWidth,\n      textureHeight: textureHeight,\n      clipBias: clipBias,\n      encoding: encoding\n    });\n    var refractor = new Refractor(geometry, {\n      textureWidth: textureWidth,\n      textureHeight: textureHeight,\n      clipBias: clipBias,\n      encoding: encoding\n    });\n    reflector.matrixAutoUpdate = false;\n    refractor.matrixAutoUpdate = false; // material\n\n    _this.material = new ShaderMaterial({\n      uniforms: UniformsUtils.merge([UniformsLib['fog'], shader.uniforms]),\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      transparent: true,\n      fog: true\n    });\n    if (flowMap !== undefined) {\n      _this.material.defines.USE_FLOWMAP = '';\n      _this.material.uniforms['tFlowMap'] = {\n        type: 't',\n        value: flowMap\n      };\n    } else {\n      _this.material.uniforms['flowDirection'] = {\n        type: 'v2',\n        value: flowDirection\n      };\n    } // maps\n\n    normalMap0.wrapS = normalMap0.wrapT = RepeatWrapping;\n    normalMap1.wrapS = normalMap1.wrapT = RepeatWrapping;\n    _this.material.uniforms['tReflectionMap'].value = reflector.getRenderTarget().texture;\n    _this.material.uniforms['tRefractionMap'].value = refractor.getRenderTarget().texture;\n    _this.material.uniforms['tNormalMap0'].value = normalMap0;\n    _this.material.uniforms['tNormalMap1'].value = normalMap1; // water\n\n    _this.material.uniforms['color'].value = color;\n    _this.material.uniforms['reflectivity'].value = reflectivity;\n    _this.material.uniforms['textureMatrix'].value = textureMatrix; // inital values\n\n    _this.material.uniforms['config'].value.x = 0; // flowMapOffset0\n\n    _this.material.uniforms['config'].value.y = halfCycle; // flowMapOffset1\n\n    _this.material.uniforms['config'].value.z = halfCycle; // halfCycle\n\n    _this.material.uniforms['config'].value.w = scale; // scale\n    // functions\n\n    function updateTextureMatrix(camera) {\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(camera.projectionMatrix);\n      textureMatrix.multiply(camera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld);\n    }\n    function updateFlow() {\n      var delta = clock.getDelta();\n      var config = scope.material.uniforms['config'];\n      config.value.x += flowSpeed * delta; // flowMapOffset0\n\n      config.value.y = config.value.x + halfCycle; // flowMapOffset1\n      // Important: The distance between offsets should be always the value of \"halfCycle\".\n      // Moreover, both offsets should be in the range of [ 0, cycle ].\n      // This approach ensures a smooth water flow and avoids \"reset\" effects.\n\n      if (config.value.x >= cycle) {\n        config.value.x = 0;\n        config.value.y = halfCycle;\n      } else if (config.value.y >= cycle) {\n        config.value.y = config.value.y - cycle;\n      }\n    } //\n\n    _this.onBeforeRender = function (renderer, scene, camera) {\n      updateTextureMatrix(camera);\n      updateFlow();\n      scope.visible = false;\n      reflector.matrixWorld.copy(scope.matrixWorld);\n      refractor.matrixWorld.copy(scope.matrixWorld);\n      reflector.onBeforeRender(renderer, scene, camera);\n      refractor.onBeforeRender(renderer, scene, camera);\n      scope.visible = true;\n    };\n    return _this;\n  }\n  return Water2;\n}(Mesh);\nWater2.prototype.isWater = true;\nWater2.WaterShader = {\n  uniforms: {\n    color: {\n      type: 'c',\n      value: null\n    },\n    reflectivity: {\n      type: 'f',\n      value: 0\n    },\n    tReflectionMap: {\n      type: 't',\n      value: null\n    },\n    tRefractionMap: {\n      type: 't',\n      value: null\n    },\n    tNormalMap0: {\n      type: 't',\n      value: null\n    },\n    tNormalMap1: {\n      type: 't',\n      value: null\n    },\n    textureMatrix: {\n      type: 'm4',\n      value: null\n    },\n    config: {\n      type: 'v4',\n      value: new Vector4()\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\t#include <common>\\n\\t\\t#include <fog_pars_vertex>\\n\\t\\t#include <logdepthbuf_pars_vertex>\\n\\n\\t\\tuniform mat4 textureMatrix;\\n\\n\\t\\tvarying vec4 vCoord;\\n\\t\\tvarying vec2 vUv;\\n\\t\\tvarying vec3 vToEye;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tvCoord = textureMatrix * vec4( position, 1.0 );\\n\\n\\t\\t\\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\\n\\t\\t\\tvToEye = cameraPosition - worldPosition.xyz;\\n\\n\\t\\t\\tvec4 mvPosition =  viewMatrix * worldPosition; // used in fog_vertex\\n\\t\\t\\tgl_Position = projectionMatrix * mvPosition;\\n\\n\\t\\t\\t#include <logdepthbuf_vertex>\\n\\t\\t\\t#include <fog_vertex>\\n\\n\\t\\t}\",\n  fragmentShader: /* glsl */\"\\n\\n\\t\\t#include <common>\\n\\t\\t#include <fog_pars_fragment>\\n\\t\\t#include <logdepthbuf_pars_fragment>\\n\\n\\t\\tuniform sampler2D tReflectionMap;\\n\\t\\tuniform sampler2D tRefractionMap;\\n\\t\\tuniform sampler2D tNormalMap0;\\n\\t\\tuniform sampler2D tNormalMap1;\\n\\n\\t\\t#ifdef USE_FLOWMAP\\n\\t\\t\\tuniform sampler2D tFlowMap;\\n\\t\\t#else\\n\\t\\t\\tuniform vec2 flowDirection;\\n\\t\\t#endif\\n\\n\\t\\tuniform vec3 color;\\n\\t\\tuniform float reflectivity;\\n\\t\\tuniform vec4 config;\\n\\n\\t\\tvarying vec4 vCoord;\\n\\t\\tvarying vec2 vUv;\\n\\t\\tvarying vec3 vToEye;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\t#include <logdepthbuf_fragment>\\n\\n\\t\\t\\tfloat flowMapOffset0 = config.x;\\n\\t\\t\\tfloat flowMapOffset1 = config.y;\\n\\t\\t\\tfloat halfCycle = config.z;\\n\\t\\t\\tfloat scale = config.w;\\n\\n\\t\\t\\tvec3 toEye = normalize( vToEye );\\n\\n\\t\\t\\t// determine flow direction\\n\\t\\t\\tvec2 flow;\\n\\t\\t\\t#ifdef USE_FLOWMAP\\n\\t\\t\\t\\tflow = texture2D( tFlowMap, vUv ).rg * 2.0 - 1.0;\\n\\t\\t\\t#else\\n\\t\\t\\t\\tflow = flowDirection;\\n\\t\\t\\t#endif\\n\\t\\t\\tflow.x *= - 1.0;\\n\\n\\t\\t\\t// sample normal maps (distort uvs with flowdata)\\n\\t\\t\\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );\\n\\t\\t\\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );\\n\\n\\t\\t\\t// linear interpolate to get the final normal color\\n\\t\\t\\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;\\n\\t\\t\\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );\\n\\n\\t\\t\\t// calculate normal vector\\n\\t\\t\\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\\n\\n\\t\\t\\t// calculate the fresnel term to blend reflection and refraction maps\\n\\t\\t\\tfloat theta = max( dot( toEye, normal ), 0.0 );\\n\\t\\t\\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );\\n\\n\\t\\t\\t// calculate final uv coords\\n\\t\\t\\tvec3 coord = vCoord.xyz / vCoord.w;\\n\\t\\t\\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;\\n\\n\\t\\t\\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );\\n\\t\\t\\tvec4 refractColor = texture2D( tRefractionMap, uv );\\n\\n\\t\\t\\t// multiply water color with the mix of both textures\\n\\t\\t\\tgl_FragColor = vec4( color, 1.0 ) * mix( refractColor, reflectColor, reflectance );\\n\\n\\t\\t\\t#include <tonemapping_fragment>\\n\\t\\t\\t#include <encodings_fragment>\\n\\t\\t\\t#include <fog_fragment>\\n\\n\\t\\t}\"\n};\nexport { Water2 };","map":null,"metadata":{},"sourceType":"module"}