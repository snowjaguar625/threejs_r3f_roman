{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\nvar CameraShake = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$intensity = _ref.intensity,\n    intensity = _ref$intensity === void 0 ? 1 : _ref$intensity,\n    decay = _ref.decay,\n    _ref$decayRate = _ref.decayRate,\n    decayRate = _ref$decayRate === void 0 ? 0.65 : _ref$decayRate,\n    _ref$maxYaw = _ref.maxYaw,\n    maxYaw = _ref$maxYaw === void 0 ? 0.1 : _ref$maxYaw,\n    _ref$maxPitch = _ref.maxPitch,\n    maxPitch = _ref$maxPitch === void 0 ? 0.1 : _ref$maxPitch,\n    _ref$maxRoll = _ref.maxRoll,\n    maxRoll = _ref$maxRoll === void 0 ? 0.1 : _ref$maxRoll,\n    _ref$yawFrequency = _ref.yawFrequency,\n    yawFrequency = _ref$yawFrequency === void 0 ? 1 : _ref$yawFrequency,\n    _ref$pitchFrequency = _ref.pitchFrequency,\n    pitchFrequency = _ref$pitchFrequency === void 0 ? 1 : _ref$pitchFrequency,\n    _ref$rollFrequency = _ref.rollFrequency,\n    rollFrequency = _ref$rollFrequency === void 0 ? 1 : _ref$rollFrequency,\n    controls = _ref.controls;\n  var camera = useThree(function (state) {\n    return state.camera;\n  }); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  var defaultControls = useThree(function (state) {\n    return state.controls;\n  });\n  var intensityRef = React.useRef(intensity);\n  var initialRotation = React.useRef(camera.rotation.clone());\n  var _React$useState = React.useState(function () {\n      return new SimplexNoise();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    yawNoise = _React$useState2[0];\n  var _React$useState3 = React.useState(function () {\n      return new SimplexNoise();\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 1),\n    pitchNoise = _React$useState4[0];\n  var _React$useState5 = React.useState(function () {\n      return new SimplexNoise();\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 1),\n    rollNoise = _React$useState6[0];\n  var constrainIntensity = function constrainIntensity() {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n  React.useImperativeHandle(ref, function () {\n    return {\n      getIntensity: function getIntensity() {\n        return intensityRef.current;\n      },\n      setIntensity: function setIntensity(val) {\n        intensityRef.current = val;\n        constrainIntensity();\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    var currControls = defaultControls || (controls == null ? void 0 : controls.current);\n    var callback = function callback() {\n      return void (initialRotation.current = camera.rotation.clone());\n    };\n    currControls == null ? void 0 : currControls.addEventListener('change', callback);\n    return function () {\n      return void (currControls == null ? void 0 : currControls.removeEventListener('change', callback));\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controls, defaultControls]);\n  useFrame(function (_ref2, delta) {\n    var clock = _ref2.clock;\n    var shake = Math.pow(intensityRef.current, 2);\n    var yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    var pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    var roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\nexport { CameraShake };","map":null,"metadata":{},"sourceType":"module"}