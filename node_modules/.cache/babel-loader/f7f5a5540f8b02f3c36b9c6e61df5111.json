{"ast":null,"code":"import { Vector2, Vector3, Triangle } from 'three';\n\n// sets the vertices of triangle `tri` with the 3 vertices after i\nexport function setTriangle(tri, i, index, pos) {\n  var ta = tri.a;\n  var tb = tri.b;\n  var tc = tri.c;\n  var i0 = i;\n  var i1 = i + 1;\n  var i2 = i + 2;\n  if (index) {\n    i0 = index.getX(i);\n    i1 = index.getX(i + 1);\n    i2 = index.getX(i + 2);\n  }\n  ta.x = pos.getX(i0);\n  ta.y = pos.getY(i0);\n  ta.z = pos.getZ(i0);\n  tb.x = pos.getX(i1);\n  tb.y = pos.getY(i1);\n  tb.z = pos.getZ(i1);\n  tc.x = pos.getX(i2);\n  tc.y = pos.getY(i2);\n  tc.z = pos.getZ(i2);\n}\nexport function iterateOverTriangles(offset, count, geometry, intersectsTriangleFunc, contained, depth, triangle) {\n  var index = geometry.index;\n  var pos = geometry.attributes.position;\n  for (var i = offset, l = count + offset; i < l; i++) {\n    setTriangle(triangle, i * 3, index, pos);\n    triangle.needsUpdate = true;\n    if (intersectsTriangleFunc(triangle, i, contained, depth)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar tempV1 = /* @__PURE__ */new Vector3();\nvar tempV2 = /* @__PURE__ */new Vector3();\nvar tempV3 = /* @__PURE__ */new Vector3();\nvar tempUV1 = /* @__PURE__ */new Vector2();\nvar tempUV2 = /* @__PURE__ */new Vector2();\nvar tempUV3 = /* @__PURE__ */new Vector2();\nexport function getTriangleHitPointInfo(point, geometry, triangleIndex, target) {\n  var indices = geometry.getIndex().array;\n  var positions = geometry.getAttribute('position');\n  var uvs = geometry.getAttribute('uv');\n  var a = indices[triangleIndex * 3];\n  var b = indices[triangleIndex * 3 + 1];\n  var c = indices[triangleIndex * 3 + 2];\n  tempV1.fromBufferAttribute(positions, a);\n  tempV2.fromBufferAttribute(positions, b);\n  tempV3.fromBufferAttribute(positions, c);\n\n  // find the associated material index\n  var materialIndex = 0;\n  var groups = geometry.groups;\n  var firstVertexIndex = triangleIndex * 3;\n  for (var i = 0, l = groups.length; i < l; i++) {\n    var group = groups[i];\n    var start = group.start,\n      count = group.count;\n    if (firstVertexIndex >= start && firstVertexIndex < start + count) {\n      materialIndex = group.materialIndex;\n      break;\n    }\n  }\n\n  // extract uvs\n  var uv = null;\n  if (uvs) {\n    tempUV1.fromBufferAttribute(uvs, a);\n    tempUV2.fromBufferAttribute(uvs, b);\n    tempUV3.fromBufferAttribute(uvs, c);\n    if (target && target.uv) uv = target.uv;else uv = new Vector2();\n    Triangle.getUV(point, tempV1, tempV2, tempV3, tempUV1, tempUV2, tempUV3, uv);\n  }\n\n  // adjust the provided target or create a new one\n  if (target) {\n    if (!target.face) target.face = {};\n    target.face.a = a;\n    target.face.b = b;\n    target.face.c = c;\n    target.face.materialIndex = materialIndex;\n    if (!target.face.normal) target.face.normal = new Vector3();\n    Triangle.getNormal(tempV1, tempV2, tempV3, target.face.normal);\n    if (!target.uv) target.uv = new Vector2();\n    target.uv.copy(uv);\n    return target;\n  } else {\n    return {\n      face: {\n        a: a,\n        b: b,\n        c: c,\n        materialIndex: materialIndex,\n        normal: Triangle.getNormal(tempV1, tempV2, tempV3, new Vector3())\n      },\n      uv: uv\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module"}