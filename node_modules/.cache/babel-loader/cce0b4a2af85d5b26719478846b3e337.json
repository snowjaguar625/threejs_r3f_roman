{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\nvar MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nfunction fetchJsonFile(_x) {\n  return _fetchJsonFile.apply(this, arguments);\n}\nfunction _fetchJsonFile() {\n  _fetchJsonFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(path);\n          case 2:\n            response = _context.sent;\n            if (response.ok) {\n              _context.next = 7;\n              break;\n            }\n            throw new Error(response.statusText);\n          case 7:\n            return _context.abrupt(\"return\", response.json());\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchJsonFile.apply(this, arguments);\n}\nfunction fetchProfilesList(_x2) {\n  return _fetchProfilesList.apply(this, arguments);\n}\nfunction _fetchProfilesList() {\n  _fetchProfilesList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(basePath) {\n    var profileListFileName, profilesList;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (basePath) {\n              _context2.next = 2;\n              break;\n            }\n            throw new Error('No basePath supplied');\n          case 2:\n            profileListFileName = 'profilesList.json';\n            _context2.next = 5;\n            return fetchJsonFile(\"\".concat(basePath, \"/\").concat(profileListFileName));\n          case 5:\n            profilesList = _context2.sent;\n            return _context2.abrupt(\"return\", profilesList);\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchProfilesList.apply(this, arguments);\n}\nfunction fetchProfile(_x3, _x4) {\n  return _fetchProfile.apply(this, arguments);\n}\n/** @constant {Object} */\nfunction _fetchProfile() {\n  _fetchProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(xrInputSource, basePath) {\n    var defaultProfile,\n      getAssetPath,\n      supportedProfilesList,\n      match,\n      supportedProfile,\n      profile,\n      assetPath,\n      layout,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            defaultProfile = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : null;\n            getAssetPath = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : true;\n            if (xrInputSource) {\n              _context3.next = 4;\n              break;\n            }\n            throw new Error('No xrInputSource supplied');\n          case 4:\n            if (basePath) {\n              _context3.next = 6;\n              break;\n            }\n            throw new Error('No basePath supplied');\n          case 6:\n            _context3.next = 8;\n            return fetchProfilesList(basePath);\n          case 8:\n            supportedProfilesList = _context3.sent;\n            xrInputSource.profiles.some(function (profileId) {\n              var supportedProfile = supportedProfilesList[profileId];\n              if (supportedProfile) {\n                match = {\n                  profileId: profileId,\n                  profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n                  deprecated: !!supportedProfile.deprecated\n                };\n              }\n              return !!match;\n            });\n            if (match) {\n              _context3.next = 17;\n              break;\n            }\n            if (defaultProfile) {\n              _context3.next = 13;\n              break;\n            }\n            throw new Error('No matching profile name found');\n          case 13:\n            supportedProfile = supportedProfilesList[defaultProfile];\n            if (supportedProfile) {\n              _context3.next = 16;\n              break;\n            }\n            throw new Error(\"No matching profile name found and default profile \\\"\".concat(defaultProfile, \"\\\" missing.\"));\n          case 16:\n            match = {\n              profileId: defaultProfile,\n              profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n              deprecated: !!supportedProfile.deprecated\n            };\n          case 17:\n            _context3.next = 19;\n            return fetchJsonFile(match.profilePath);\n          case 19:\n            profile = _context3.sent;\n            if (!getAssetPath) {\n              _context3.next = 25;\n              break;\n            }\n            if (xrInputSource.handedness === 'any') {\n              layout = profile.layouts[Object.keys(profile.layouts)[0]];\n            } else {\n              layout = profile.layouts[xrInputSource.handedness];\n            }\n            if (layout) {\n              _context3.next = 24;\n              break;\n            }\n            throw new Error(\"No matching handedness, \".concat(xrInputSource.handedness, \", in profile \").concat(match.profileId));\n          case 24:\n            if (layout.assetPath) {\n              assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n            }\n          case 25:\n            return _context3.abrupt(\"return\", {\n              profile: profile,\n              assetPath: assetPath\n            });\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _fetchProfile.apply(this, arguments);\n}\nvar defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\n\nfunction normalizeAxes() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var xAxis = x;\n  var yAxis = y; // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n\n  var hypotenuse = Math.sqrt(x * x + y * y);\n  if (hypotenuse > 1) {\n    var theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  } // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n\n  var result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nvar VisualResponse = /*#__PURE__*/function () {\n  function VisualResponse(visualResponseDescription) {\n    _classCallCheck(this, VisualResponse);\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    } // Initializes the response's current value based on default data\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  _createClass(VisualResponse, [{\n    key: \"updateFromComponent\",\n    value: function updateFromComponent(_ref) {\n      var xAxis = _ref.xAxis,\n        yAxis = _ref.yAxis,\n        button = _ref.button,\n        state = _ref.state;\n      var _normalizeAxes = normalizeAxes(xAxis, yAxis),\n        normalizedXAxis = _normalizeAxes.normalizedXAxis,\n        normalizedYAxis = _normalizeAxes.normalizedYAxis;\n      switch (this.componentProperty) {\n        case MotionControllerConstants.ComponentProperty.X_AXIS:\n          this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n          break;\n        case MotionControllerConstants.ComponentProperty.Y_AXIS:\n          this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n          break;\n        case MotionControllerConstants.ComponentProperty.BUTTON:\n          this.value = this.states.includes(state) ? button : 0;\n          break;\n        case MotionControllerConstants.ComponentProperty.STATE:\n          if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n            this.value = this.states.includes(state);\n          } else {\n            this.value = this.states.includes(state) ? 1.0 : 0.0;\n          }\n          break;\n        default:\n          throw new Error(\"Unexpected visualResponse componentProperty \".concat(this.componentProperty));\n      }\n    }\n  }]);\n  return VisualResponse;\n}();\nvar Component = /*#__PURE__*/function () {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  function Component(componentId, componentDescription) {\n    var _this = this;\n    _classCallCheck(this, Component);\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName; // Build all the visual responses for this component\n\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(function (responseName) {\n      var visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      _this.visualResponses[responseName] = visualResponse;\n    }); // Set default values\n\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    };\n  }\n  _createClass(Component, [{\n    key: \"updateFromGamepad\",\n    /**\n     * @description Poll for updated data based on current gamepad state\n     * @param {Object} gamepad - The gamepad object from which the component data should be polled\n     */\n    value: function updateFromGamepad(gamepad) {\n      var _this2 = this;\n      // Set the state to default before processing other data sources\n      this.values.state = MotionControllerConstants.ComponentState.DEFAULT; // Get and normalize button\n\n      if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n        var gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n        this.values.button = gamepadButton.value;\n        this.values.button = this.values.button < 0 ? 0 : this.values.button;\n        this.values.button = this.values.button > 1 ? 1 : this.values.button; // Set the state based on the button\n\n        if (gamepadButton.pressed || this.values.button === 1) {\n          this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n        } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Get and normalize x axis value\n\n      if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n        this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n        this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n        this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis; // If the state is still default, check if the xAxis makes it touched\n\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Get and normalize Y axis value\n\n      if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n        this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n        this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n        this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis; // If the state is still default, check if the yAxis makes it touched\n\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Update the visual response weights based on the current component data\n\n      Object.values(this.visualResponses).forEach(function (visualResponse) {\n        visualResponse.updateFromComponent(_this2.values);\n      });\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      var data = _objectSpread({\n        id: this.id\n      }, this.values);\n      return data;\n    }\n  }]);\n  return Component;\n}();\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\nvar MotionController = /*#__PURE__*/function () {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  function MotionController(xrInputSource, profile, assetUrl) {\n    var _this3 = this;\n    _classCallCheck(this, MotionController);\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId; // Build child components as described in the profile description\n\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(function (componentId) {\n      var componentDescription = _this3.layoutDescription.components[componentId];\n      _this3.components[componentId] = new Component(componentId, componentDescription);\n    }); // Initialize components based on current gamepad state\n\n    this.updateFromGamepad();\n  }\n  _createClass(MotionController, [{\n    key: \"updateFromGamepad\",\n    /**\n     * @description Poll for updated data based on current gamepad state\n     */\n    value: function updateFromGamepad() {\n      var _this4 = this;\n      Object.values(this.components).forEach(function (component) {\n        component.updateFromGamepad(_this4.xrInputSource.gamepad);\n      });\n    }\n  }, {\n    key: \"gripSpace\",\n    get: function get() {\n      return this.xrInputSource.gripSpace;\n    }\n  }, {\n    key: \"targetRaySpace\",\n    get: function get() {\n      return this.xrInputSource.targetRaySpace;\n    }\n    /**\n     * @description Returns a subset of component data for simplified debugging\n     */\n  }, {\n    key: \"data\",\n    get: function get() {\n      var data = [];\n      Object.values(this.components).forEach(function (component) {\n        data.push(component.data);\n      });\n      return data;\n    }\n  }]);\n  return MotionController;\n}();\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };","map":null,"metadata":{},"sourceType":"module"}