{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Object3D, SphereGeometry, MeshBasicMaterial, Mesh } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers.js';\nvar DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nvar DEFAULT_PROFILE = 'generic-trigger';\nvar XRControllerModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRControllerModel, _Object3D);\n  function XRControllerModel() {\n    var _this;\n    _classCallCheck(this, XRControllerModel);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(XRControllerModel).call(this));\n    _this.motionController = null;\n    _this.envMap = null;\n    return _this;\n  }\n  _createClass(XRControllerModel, [{\n    key: \"setEnvironmentMap\",\n    value: function setEnvironmentMap(envMap) {\n      var _this2 = this;\n      if (this.envMap == envMap) {\n        return this;\n      }\n      this.envMap = envMap;\n      this.traverse(function (child) {\n        if (child.isMesh) {\n          child.material.envMap = _this2.envMap;\n          child.material.needsUpdate = true;\n        }\n      });\n      return this;\n    }\n    /**\n     * Polls data from the XRInputSource and updates the model's components to match\n     * the real world data\n     */\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRControllerModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n      if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n      this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n      Object.values(this.motionController.components).forEach(function (component) {\n        // Update node data based on the visual responses' current states\n        Object.values(component.visualResponses).forEach(function (visualResponse) {\n          var valueNode = visualResponse.valueNode,\n            minNode = visualResponse.minNode,\n            maxNode = visualResponse.maxNode,\n            value = visualResponse.value,\n            valueNodeProperty = visualResponse.valueNodeProperty; // Skip if the visual response node is not found. No error is needed,\n          // because it will have been reported at load time.\n          if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n          if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n            valueNode.visible = value;\n          } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n            valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n            valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n          }\n        });\n      });\n    }\n  }]);\n  return XRControllerModel;\n}(Object3D);\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(function (component) {\n    var type = component.type,\n      touchPointNodeName = component.touchPointNodeName,\n      visualResponses = component.visualResponses;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        var sphereGeometry = new SphereGeometry(0.001);\n        var material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        var sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(\"Could not find touch dot, \".concat(component.touchPointNodeName, \", in touchpad component \").concat(component.id));\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n    Object.values(visualResponses).forEach(function (visualResponse) {\n      var valueNodeName = visualResponse.valueNodeName,\n        minNodeName = visualResponse.minNodeName,\n        maxNodeName = visualResponse.maxNodeName,\n        valueNodeProperty = visualResponse.valueNodeProperty; // If animating a transform, find the two nodes to be interpolated between.\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(\"Could not find \".concat(minNodeName, \" in the model\"));\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(\"Could not find \".concat(maxNodeName, \" in the model\"));\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(\"Could not find \".concat(valueNodeName, \" in the model\"));\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(function (child) {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n  controllerModel.add(scene);\n}\nvar XRControllerModelFactory = /*#__PURE__*/function () {\n  function XRControllerModelFactory() {\n    var gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    _classCallCheck(this, XRControllerModelFactory);\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  _createClass(XRControllerModelFactory, [{\n    key: \"createControllerModel\",\n    value: function createControllerModel(controller) {\n      var _this3 = this;\n      var controllerModel = new XRControllerModel();\n      var scene = null;\n      controller.addEventListener('connected', function (event) {\n        var xrInputSource = event.data;\n        if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n        fetchProfile(xrInputSource, _this3.path, DEFAULT_PROFILE).then(function (_ref) {\n          var profile = _ref.profile,\n            assetPath = _ref.assetPath;\n          controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n          var cachedAsset = _this3._assetCache[controllerModel.motionController.assetUrl];\n          if (cachedAsset) {\n            scene = cachedAsset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          } else {\n            if (!_this3.gltfLoader) {\n              throw new Error('GLTFLoader not set.');\n            }\n            _this3.gltfLoader.setPath('');\n            _this3.gltfLoader.load(controllerModel.motionController.assetUrl, function (asset) {\n              _this3._assetCache[controllerModel.motionController.assetUrl] = asset;\n              scene = asset.scene.clone();\n              addAssetSceneToControllerModel(controllerModel, scene);\n            }, null, function () {\n              throw new Error(\"Asset \".concat(controllerModel.motionController.assetUrl, \" missing or malformed.\"));\n            });\n          }\n        }).catch(function (err) {\n          console.warn(err);\n        });\n      });\n      controller.addEventListener('disconnected', function () {\n        controllerModel.motionController = null;\n        controllerModel.remove(scene);\n        scene = null;\n      });\n      return controllerModel;\n    }\n  }]);\n  return XRControllerModelFactory;\n}();\nexport { XRControllerModelFactory };","map":null,"metadata":{},"sourceType":"module"}