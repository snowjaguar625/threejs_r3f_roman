{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Vector3, LineSegments, BufferGeometry, Float32BufferAttribute, LineBasicMaterial } from 'three';\nvar _v1 = new Vector3();\nvar _v2 = new Vector3();\nvar VertexTangentsHelper = /*#__PURE__*/function (_LineSegments) {\n  _inherits(VertexTangentsHelper, _LineSegments);\n  function VertexTangentsHelper(object, size, hex) {\n    var _this;\n    _classCallCheck(this, VertexTangentsHelper);\n    var color = hex !== undefined ? hex : 0x00ffff; //\n\n    var objGeometry = object.geometry;\n    if (!(objGeometry && objGeometry.isBufferGeometry)) {\n      console.error('THREE.VertexTangentsHelper: geometry not an instance of THREE.BufferGeometry.', objGeometry);\n      return _possibleConstructorReturn(_this);\n    }\n    var nTangents = objGeometry.attributes.tangent.count; //\n\n    var geometry = new BufferGeometry();\n    var positions = new Float32BufferAttribute(nTangents * 2 * 3, 3);\n    geometry.setAttribute('position', positions);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VertexTangentsHelper).call(this, geometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    })));\n    _this.type = 'VertexTangentsHelper';\n    _this.object = object;\n    _this.size = size !== undefined ? size : 1; //\n\n    _this.matrixAutoUpdate = false;\n    _this.update();\n    return _this;\n  }\n  _createClass(VertexTangentsHelper, [{\n    key: \"update\",\n    value: function update() {\n      this.object.updateMatrixWorld(true);\n      var matrixWorld = this.object.matrixWorld;\n      var position = this.geometry.attributes.position; //\n\n      var objGeometry = this.object.geometry;\n      var objPos = objGeometry.attributes.position;\n      var objTan = objGeometry.attributes.tangent;\n      var idx = 0; // for simplicity, ignore index and drawcalls, and render every tangent\n\n      for (var j = 0, jl = objPos.count; j < jl; j++) {\n        _v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(matrixWorld);\n        _v2.set(objTan.getX(j), objTan.getY(j), objTan.getZ(j));\n        _v2.transformDirection(matrixWorld).multiplyScalar(this.size).add(_v1);\n        position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n        idx = idx + 1;\n        position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n        idx = idx + 1;\n      }\n      position.needsUpdate = true;\n    }\n  }]);\n  return VertexTangentsHelper;\n}(LineSegments);\nexport { VertexTangentsHelper };","map":null,"metadata":{},"sourceType":"module"}