{"ast":null,"code":"import _objectSpread from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useProgress } from '../core/useProgress.js';\nvar defaultDataInterpolation = function defaultDataInterpolation(p) {\n  return \"Loading \".concat(p.toFixed(2), \"%\");\n};\nfunction Loader(_ref) {\n  var containerStyles = _ref.containerStyles,\n    innerStyles = _ref.innerStyles,\n    barStyles = _ref.barStyles,\n    dataStyles = _ref.dataStyles,\n    _ref$dataInterpolatio = _ref.dataInterpolation,\n    dataInterpolation = _ref$dataInterpolatio === void 0 ? defaultDataInterpolation : _ref$dataInterpolatio,\n    _ref$initialState = _ref.initialState,\n    initialState = _ref$initialState === void 0 ? function (active) {\n      return active;\n    } : _ref$initialState;\n  var _useProgress = useProgress(),\n    active = _useProgress.active,\n    progress = _useProgress.progress;\n  var progressRef = React.useRef(0);\n  var rafRef = React.useRef(0);\n  var progressSpanRef = React.useRef(null);\n  var _React$useState = React.useState(initialState(active)),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    shown = _React$useState2[0],\n    setShown = _React$useState2[1];\n  React.useEffect(function () {\n    var t;\n    if (active !== shown) t = setTimeout(function () {\n      return setShown(active);\n    }, 300);\n    return function () {\n      return clearTimeout(t);\n    };\n  }, [shown, active]);\n  var updateProgress = React.useCallback(function () {\n    if (!progressSpanRef.current) return;\n    progressRef.current += (progress - progressRef.current) / 2;\n    if (progressRef.current > 0.95 * progress || progress === 100) progressRef.current = progress;\n    progressSpanRef.current.innerText = dataInterpolation(progressRef.current);\n    if (progressRef.current < progress) rafRef.current = requestAnimationFrame(updateProgress);\n  }, [dataInterpolation, progress]);\n  React.useEffect(function () {\n    updateProgress();\n    return function () {\n      return cancelAnimationFrame(rafRef.current);\n    };\n  }, [updateProgress]);\n  return shown ? /*#__PURE__*/React.createElement(\"div\", {\n    style: _objectSpread({}, styles.container, {\n      opacity: active ? 1 : 0\n    }, containerStyles)\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    style: _objectSpread({}, styles.inner, innerStyles)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: _objectSpread({}, styles.bar, {\n      transform: \"scaleX(\".concat(progress / 100, \")\")\n    }, barStyles)\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    ref: progressSpanRef,\n    style: _objectSpread({}, styles.data, dataStyles)\n  })))) : null;\n}\nvar styles = {\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    background: '#171717',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    transition: 'opacity 300ms ease',\n    zIndex: 1000\n  },\n  inner: {\n    width: 100,\n    height: 3,\n    background: '#272727',\n    textAlign: 'center'\n  },\n  bar: {\n    height: 3,\n    width: '100%',\n    background: 'white',\n    transition: 'transform 200ms',\n    transformOrigin: 'left center'\n  },\n  data: {\n    display: 'inline-block',\n    position: 'relative',\n    fontVariantNumeric: 'tabular-nums',\n    marginTop: '0.8em',\n    color: '#f0f0f0',\n    fontSize: '0.6em',\n    fontFamily: \"-apple-system, BlinkMacSystemFont, \\\"Inter\\\", \\\"Segoe UI\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, Roboto, Ubuntu, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\"\",\n    whiteSpace: 'nowrap'\n  }\n};\nexport { Loader };","map":null,"metadata":{},"sourceType":"module"}