{"ast":null,"code":"import { Object3D, Vector3, Matrix4 } from 'three';\nvar CSS2DObject = function CSS2DObject(element) {\n  Object3D.call(this);\n  this.element = element || document.createElement('div');\n  this.element.style.position = 'absolute';\n  this.addEventListener('removed', function () {\n    this.traverse(function (object) {\n      if (object.element instanceof Element && object.element.parentNode !== null) {\n        object.element.parentNode.removeChild(object.element);\n      }\n    });\n  });\n};\nCSS2DObject.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: CSS2DObject,\n  copy: function copy(source, recursive) {\n    Object3D.prototype.copy.call(this, source, recursive);\n    this.element = source.element.cloneNode(true);\n    return this;\n  }\n}); //\n\nvar CSS2DRenderer = function CSS2DRenderer() {\n  var _this = this;\n  var _width, _height;\n  var _widthHalf, _heightHalf;\n  var vector = new Vector3();\n  var viewMatrix = new Matrix4();\n  var viewProjectionMatrix = new Matrix4();\n  var cache = {\n    objects: new WeakMap()\n  };\n  var domElement = document.createElement('div');\n  domElement.style.overflow = 'hidden';\n  this.domElement = domElement;\n  this.getSize = function () {\n    return {\n      width: _width,\n      height: _height\n    };\n  };\n  this.setSize = function (width, height) {\n    _width = width;\n    _height = height;\n    _widthHalf = _width / 2;\n    _heightHalf = _height / 2;\n    domElement.style.width = width + 'px';\n    domElement.style.height = height + 'px';\n  };\n  var renderObject = function renderObject(object, scene, camera) {\n    if (object instanceof CSS2DObject) {\n      object.onBeforeRender(_this, scene, camera);\n      vector.setFromMatrixPosition(object.matrixWorld);\n      vector.applyMatrix4(viewProjectionMatrix);\n      var element = object.element;\n      element.style.transform = 'translate(-50%,-50%) translate(' + (vector.x * _widthHalf + _widthHalf) + 'px,' + (-vector.y * _heightHalf + _heightHalf) + 'px)';\n      element.style.display = object.visible && vector.z >= -1 && vector.z <= 1 ? '' : 'none';\n      var objectData = {\n        distanceToCameraSquared: getDistanceToSquared(camera, object)\n      };\n      cache.objects.set(object, objectData);\n      if (element.parentNode !== domElement) {\n        domElement.appendChild(element);\n      }\n      object.onAfterRender(_this, scene, camera);\n    }\n    for (var i = 0, l = object.children.length; i < l; i++) {\n      renderObject(object.children[i], scene, camera);\n    }\n  };\n  var getDistanceToSquared = function () {\n    var a = new Vector3();\n    var b = new Vector3();\n    return function (object1, object2) {\n      a.setFromMatrixPosition(object1.matrixWorld);\n      b.setFromMatrixPosition(object2.matrixWorld);\n      return a.distanceToSquared(b);\n    };\n  }();\n  var filterAndFlatten = function filterAndFlatten(scene) {\n    var result = [];\n    scene.traverse(function (object) {\n      if (object instanceof CSS2DObject) result.push(object);\n    });\n    return result;\n  };\n  var zOrder = function zOrder(scene) {\n    var sorted = filterAndFlatten(scene).sort(function (a, b) {\n      var distanceA = cache.objects.get(a).distanceToCameraSquared;\n      var distanceB = cache.objects.get(b).distanceToCameraSquared;\n      return distanceA - distanceB;\n    });\n    var zMax = sorted.length;\n    for (var i = 0, l = sorted.length; i < l; i++) {\n      sorted[i].element.style.zIndex = zMax - i;\n    }\n  };\n  this.render = function (scene, camera) {\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n    viewMatrix.copy(camera.matrixWorldInverse);\n    viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, viewMatrix);\n    renderObject(scene, scene, camera);\n    zOrder(scene);\n  };\n};\nexport { CSS2DObject, CSS2DRenderer };","map":null,"metadata":{},"sourceType":"module"}