{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree } from '@react-three/fiber';\nimport omit from 'lodash.omit';\nimport pick from 'lodash.pick';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { TransformControls as TransformControls$1 } from 'three-stdlib';\nvar TransformControls = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n    onChange = _ref.onChange,\n    onMouseDown = _ref.onMouseDown,\n    onMouseUp = _ref.onMouseUp,\n    onObjectChange = _ref.onObjectChange,\n    object = _ref.object,\n    props = _objectWithoutProperties(_ref, [\"children\", \"onChange\", \"onMouseDown\", \"onMouseUp\", \"onObjectChange\", \"object\"]);\n  var transformOnlyPropNames = ['enabled', 'axis', 'mode', 'translationSnap', 'rotationSnap', 'scaleSnap', 'space', 'size', 'showX', 'showY', 'showZ'];\n  var camera = props.camera,\n    rest = _objectWithoutProperties(props, [\"camera\"]);\n  var transformProps = pick(rest, transformOnlyPropNames);\n  var objectProps = omit(rest, transformOnlyPropNames); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  var defaultControls = useThree(function (state) {\n    return state.controls;\n  });\n  var gl = useThree(function (_ref2) {\n    var gl = _ref2.gl;\n    return gl;\n  });\n  var defaultCamera = useThree(function (_ref3) {\n    var camera = _ref3.camera;\n    return camera;\n  });\n  var invalidate = useThree(function (_ref4) {\n    var invalidate = _ref4.invalidate;\n    return invalidate;\n  });\n  var explCamera = camera || defaultCamera;\n  var _React$useState = React.useState(function () {\n      return new TransformControls$1(explCamera, gl.domElement);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    controls = _React$useState2[0];\n  var group = React.useRef();\n  React.useLayoutEffect(function () {\n    if (object) controls == null ? void 0 : controls.attach(object instanceof THREE.Object3D ? object : object.current);else controls == null ? void 0 : controls.attach(group.current);\n  }, [object, children, controls]);\n  React.useEffect(function () {\n    if (defaultControls) {\n      var callback = function callback(event) {\n        return defaultControls.enabled = !event.value;\n      };\n      controls.addEventListener('dragging-changed', callback);\n      return function () {\n        return controls.removeEventListener('dragging-changed', callback);\n      };\n    }\n  }, [controls, defaultControls]);\n  React.useEffect(function () {\n    var callback = function callback(e) {\n      invalidate();\n      if (onChange) onChange(e);\n    };\n    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('change', callback);\n    if (onMouseDown) controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('mouseDown', onMouseDown);\n    if (onMouseUp) controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('mouseUp', onMouseUp);\n    if (onObjectChange) controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('objectChange', onObjectChange);\n    return function () {\n      controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('change', callback);\n      if (onMouseDown) controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('mouseDown', onMouseDown);\n      if (onMouseUp) controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('mouseUp', onMouseUp);\n      if (onObjectChange) controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('objectChange', onObjectChange);\n    };\n  }, [onChange, onMouseDown, onMouseUp, onObjectChange, controls, invalidate]);\n  return controls ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    dispose: undefined,\n    object: controls\n  }, transformProps)), /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, objectProps), children)) : null;\n});\nexport { TransformControls };","map":null,"metadata":{},"sourceType":"module"}