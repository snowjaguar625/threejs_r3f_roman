{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.genDts = void 0;\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\nvar uniq_1 = __importDefault(require(\"lodash/uniq\"));\nvar upperFirst_1 = __importDefault(require(\"lodash/upperFirst\"));\nfunction genDts(model, options) {\n  var contentParts = [];\n  contentParts = contentParts.concat(\"import type { CstNode, ICstVisitor, IToken } from \\\"chevrotain\\\";\");\n  contentParts = contentParts.concat((0, flatten_1.default)((0, map_1.default)(model, function (node) {\n    return genCstNodeTypes(node);\n  })));\n  if (options.includeVisitorInterface) {\n    contentParts = contentParts.concat(genVisitor(options.visitorInterfaceName, model));\n  }\n  return contentParts.join(\"\\n\\n\") + \"\\n\";\n}\nexports.genDts = genDts;\nfunction genCstNodeTypes(node) {\n  var nodeCstInterface = genNodeInterface(node);\n  var nodeChildrenInterface = genNodeChildrenType(node);\n  return [nodeCstInterface, nodeChildrenInterface];\n}\nfunction genNodeInterface(node) {\n  var nodeInterfaceName = getNodeInterfaceName(node.name);\n  var childrenTypeName = getNodeChildrenTypeName(node.name);\n  return \"export interface \".concat(nodeInterfaceName, \" extends CstNode {\\n  name: \\\"\").concat(node.name, \"\\\";\\n  children: \").concat(childrenTypeName, \";\\n}\");\n}\nfunction genNodeChildrenType(node) {\n  var typeName = getNodeChildrenTypeName(node.name);\n  return \"export type \".concat(typeName, \" = {\\n  \").concat((0, map_1.default)(node.properties, function (property) {\n    return genChildProperty(property);\n  }).join(\"\\n  \"), \"\\n};\");\n}\nfunction genChildProperty(prop) {\n  var typeName = buildTypeString(prop.type);\n  return \"\".concat(prop.name).concat(prop.optional ? \"?\" : \"\", \": \").concat(typeName, \"[];\");\n}\nfunction genVisitor(name, nodes) {\n  return \"export interface \".concat(name, \"<IN, OUT> extends ICstVisitor<IN, OUT> {\\n  \").concat((0, map_1.default)(nodes, function (node) {\n    return genVisitorFunction(node);\n  }).join(\"\\n  \"), \"\\n}\");\n}\nfunction genVisitorFunction(node) {\n  var childrenTypeName = getNodeChildrenTypeName(node.name);\n  return \"\".concat(node.name, \"(children: \").concat(childrenTypeName, \", param?: IN): OUT;\");\n}\nfunction buildTypeString(type) {\n  if ((0, isArray_1.default)(type)) {\n    var typeNames = (0, uniq_1.default)((0, map_1.default)(type, function (t) {\n      return getTypeString(t);\n    }));\n    var typeString = (0, reduce_1.default)(typeNames, function (sum, t) {\n      return sum + \" | \" + t;\n    });\n    return \"(\" + typeString + \")\";\n  } else {\n    return getTypeString(type);\n  }\n}\nfunction getTypeString(type) {\n  if (type.kind === \"token\") {\n    return \"IToken\";\n  }\n  return getNodeInterfaceName(type.name);\n}\nfunction getNodeInterfaceName(ruleName) {\n  return (0, upperFirst_1.default)(ruleName) + \"CstNode\";\n}\nfunction getNodeChildrenTypeName(ruleName) {\n  return (0, upperFirst_1.default)(ruleName) + \"CstChildren\";\n}","map":null,"metadata":{},"sourceType":"script"}