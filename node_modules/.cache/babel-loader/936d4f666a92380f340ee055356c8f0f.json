{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Vector3, Matrix4, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\nexport var OrientedBox = /*#__PURE__*/function () {\n  function OrientedBox(min, max, matrix) {\n    _classCallCheck(this, OrientedBox);\n    this.isOrientedBox = true;\n    this.min = new Vector3();\n    this.max = new Vector3();\n    this.matrix = new Matrix4();\n    this.invMatrix = new Matrix4();\n    this.points = new Array(8).fill().map(function () {\n      return new Vector3();\n    });\n    this.satAxes = new Array(3).fill().map(function () {\n      return new Vector3();\n    });\n    this.satBounds = new Array(3).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    this.alignedSatBounds = new Array(3).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    this.needsUpdate = false;\n    if (min) this.min.copy(min);\n    if (max) this.max.copy(max);\n    if (matrix) this.matrix.copy(matrix);\n  }\n  _createClass(OrientedBox, [{\n    key: \"set\",\n    value: function set(min, max, matrix) {\n      this.min.copy(min);\n      this.max.copy(max);\n      this.matrix.copy(matrix);\n      this.needsUpdate = true;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(other) {\n      this.min.copy(other.min);\n      this.max.copy(other.max);\n      this.matrix.copy(other.matrix);\n      this.needsUpdate = true;\n    }\n  }]);\n  return OrientedBox;\n}();\nOrientedBox.prototype.update = function () {\n  return function update() {\n    var matrix = this.matrix;\n    var min = this.min;\n    var max = this.max;\n    var points = this.points;\n    for (var x = 0; x <= 1; x++) {\n      for (var y = 0; y <= 1; y++) {\n        for (var z = 0; z <= 1; z++) {\n          var i = (1 << 0) * x | (1 << 1) * y | (1 << 2) * z;\n          var v = points[i];\n          v.x = x ? max.x : min.x;\n          v.y = y ? max.y : min.y;\n          v.z = z ? max.z : min.z;\n          v.applyMatrix4(matrix);\n        }\n      }\n    }\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    var minVec = points[0];\n    for (var _i = 0; _i < 3; _i++) {\n      var axis = satAxes[_i];\n      var sb = satBounds[_i];\n      var index = 1 << _i;\n      var pi = points[index];\n      axis.subVectors(minVec, pi);\n      sb.setFromPoints(axis, points);\n    }\n    var alignedSatBounds = this.alignedSatBounds;\n    alignedSatBounds[0].setFromPointsField(points, 'x');\n    alignedSatBounds[1].setFromPointsField(points, 'y');\n    alignedSatBounds[2].setFromPointsField(points, 'z');\n    this.invMatrix.copy(this.matrix).invert();\n    this.needsUpdate = false;\n  };\n}();\nOrientedBox.prototype.intersectsBox = function () {\n  var aabbBounds = new SeparatingAxisBounds();\n  return function intersectsBox(box) {\n    // TODO: should this be doing SAT against the AABB?\n    if (this.needsUpdate) {\n      this.update();\n    }\n    var min = box.min;\n    var max = box.max;\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    var alignedSatBounds = this.alignedSatBounds;\n    aabbBounds.min = min.x;\n    aabbBounds.max = max.x;\n    if (alignedSatBounds[0].isSeparated(aabbBounds)) return false;\n    aabbBounds.min = min.y;\n    aabbBounds.max = max.y;\n    if (alignedSatBounds[1].isSeparated(aabbBounds)) return false;\n    aabbBounds.min = min.z;\n    aabbBounds.max = max.z;\n    if (alignedSatBounds[2].isSeparated(aabbBounds)) return false;\n    for (var i = 0; i < 3; i++) {\n      var axis = satAxes[i];\n      var sb = satBounds[i];\n      aabbBounds.setFromBox(axis, box);\n      if (sb.isSeparated(aabbBounds)) return false;\n    }\n    return true;\n  };\n}();\nOrientedBox.prototype.intersectsTriangle = function () {\n  var saTri = new ExtendedTriangle();\n  var pointsArr = new Array(3);\n  var cachedSatBounds = new SeparatingAxisBounds();\n  var cachedSatBounds2 = new SeparatingAxisBounds();\n  var cachedAxis = new Vector3();\n  return function intersectsTriangle(triangle) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (!triangle.isExtendedTriangle) {\n      saTri.copy(triangle);\n      saTri.update();\n      triangle = saTri;\n    } else if (triangle.needsUpdate) {\n      triangle.update();\n    }\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    pointsArr[0] = triangle.a;\n    pointsArr[1] = triangle.b;\n    pointsArr[2] = triangle.c;\n    for (var i = 0; i < 3; i++) {\n      var sb = satBounds[i];\n      var sa = satAxes[i];\n      cachedSatBounds.setFromPoints(sa, pointsArr);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n    var triSatBounds = triangle.satBounds;\n    var triSatAxes = triangle.satAxes;\n    var points = this.points;\n    for (var _i2 = 0; _i2 < 3; _i2++) {\n      var _sb = triSatBounds[_i2];\n      var _sa = triSatAxes[_i2];\n      cachedSatBounds.setFromPoints(_sa, points);\n      if (_sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    // check crossed axes\n    for (var _i3 = 0; _i3 < 3; _i3++) {\n      var sa1 = satAxes[_i3];\n      for (var i2 = 0; i2 < 4; i2++) {\n        var sa2 = triSatAxes[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, pointsArr);\n        cachedSatBounds2.setFromPoints(cachedAxis, points);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n    return true;\n  };\n}();\nOrientedBox.prototype.closestPointToPoint = function () {\n  return function closestPointToPoint(point, target1) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);\n    return target1;\n  };\n}();\nOrientedBox.prototype.distanceToPoint = function () {\n  var target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\nOrientedBox.prototype.distanceToBox = function () {\n  var xyzFields = ['x', 'y', 'z'];\n  var segments1 = new Array(12).fill().map(function () {\n    return new Line3();\n  });\n  var segments2 = new Array(12).fill().map(function () {\n    return new Line3();\n  });\n  var point1 = new Vector3();\n  var point2 = new Vector3();\n\n  // early out if we find a value below threshold\n  return function distanceToBox(box) {\n    var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var target1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var target2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (this.intersectsBox(box)) {\n      if (target1 || target2) {\n        box.getCenter(point2);\n        this.closestPointToPoint(point2, point1);\n        box.closestPointToPoint(point1, point2);\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n      return 0;\n    }\n    var threshold2 = threshold * threshold;\n    var min = box.min;\n    var max = box.max;\n    var points = this.points;\n\n    // iterate over every edge and compare distances\n    var closestDistanceSq = Infinity;\n\n    // check over all these points\n    for (var i = 0; i < 8; i++) {\n      var p = points[i];\n      point2.copy(p).clamp(min, max);\n      var dist = p.distanceToSquared(point2);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(p);\n        if (target2) target2.copy(point2);\n        if (dist < threshold2) return Math.sqrt(dist);\n      }\n    }\n\n    // generate and check all line segment distances\n    var count = 0;\n    for (var _i4 = 0; _i4 < 3; _i4++) {\n      for (var i1 = 0; i1 <= 1; i1++) {\n        for (var i2 = 0; i2 <= 1; i2++) {\n          var nextIndex = (_i4 + 1) % 3;\n          var nextIndex2 = (_i4 + 2) % 3;\n\n          // get obb line segments\n          var index = i1 << nextIndex | i2 << nextIndex2;\n          var index2 = 1 << _i4 | i1 << nextIndex | i2 << nextIndex2;\n          var p1 = points[index];\n          var p2 = points[index2];\n          var line1 = segments1[count];\n          line1.set(p1, p2);\n\n          // get aabb line segments\n          var f1 = xyzFields[_i4];\n          var f2 = xyzFields[nextIndex];\n          var f3 = xyzFields[nextIndex2];\n          var line2 = segments2[count];\n          var start = line2.start;\n          var end = line2.end;\n          start[f1] = min[f1];\n          start[f2] = i1 ? min[f2] : max[f2];\n          start[f3] = i2 ? min[f3] : max[f2];\n          end[f1] = max[f1];\n          end[f2] = i1 ? min[f2] : max[f2];\n          end[f3] = i2 ? min[f3] : max[f2];\n          count++;\n        }\n      }\n    }\n\n    // check all the other boxes point\n    for (var x = 0; x <= 1; x++) {\n      for (var y = 0; y <= 1; y++) {\n        for (var z = 0; z <= 1; z++) {\n          point2.x = x ? max.x : min.x;\n          point2.y = y ? max.y : min.y;\n          point2.z = z ? max.z : min.z;\n          this.closestPointToPoint(point2, point1);\n          var _dist = point2.distanceToSquared(point1);\n          if (_dist < closestDistanceSq) {\n            closestDistanceSq = _dist;\n            if (target1) target1.copy(point1);\n            if (target2) target2.copy(point2);\n            if (_dist < threshold2) return Math.sqrt(_dist);\n          }\n        }\n      }\n    }\n    for (var _i5 = 0; _i5 < 12; _i5++) {\n      var l1 = segments1[_i5];\n      for (var _i6 = 0; _i6 < 12; _i6++) {\n        var l2 = segments2[_i6];\n        closestPointsSegmentToSegment(l1, l2, point1, point2);\n        var _dist2 = point1.distanceToSquared(point2);\n        if (_dist2 < closestDistanceSq) {\n          closestDistanceSq = _dist2;\n          if (target1) target1.copy(point1);\n          if (target2) target2.copy(point2);\n          if (_dist2 < threshold2) return Math.sqrt(_dist2);\n        }\n      }\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}