{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Node from './Node.js';\nvar TempNode = /*#__PURE__*/function (_Node) {\n  _inherits(TempNode, _Node);\n  function TempNode(type) {\n    _classCallCheck(this, TempNode);\n    return _possibleConstructorReturn(this, _getPrototypeOf(TempNode).call(this, type));\n  }\n  _createClass(TempNode, [{\n    key: \"build\",\n    value: function build(builder, output) {\n      var type = builder.getVectorType(this.getNodeType(builder, output));\n      var nodeData = builder.getDataFromNode(this);\n      if (builder.context.temp !== false && type !== 'void ' && output !== 'void' && nodeData.dependenciesCount > 1) {\n        if (nodeData.snippet === undefined) {\n          var snippet = _get(_getPrototypeOf(TempNode.prototype), \"build\", this).call(this, builder, type);\n          var nodeVar = builder.getVarFromNode(this, type);\n          var propertyName = builder.getPropertyName(nodeVar);\n          builder.addFlowCode(\"\".concat(propertyName, \" = \").concat(snippet));\n          nodeData.snippet = snippet;\n          nodeData.propertyName = propertyName;\n        }\n        return builder.format(nodeData.propertyName, type, output);\n      }\n      return _get(_getPrototypeOf(TempNode.prototype), \"build\", this).call(this, builder, output);\n    }\n  }]);\n  return TempNode;\n}(Node);\nexport default TempNode;","map":null,"metadata":{},"sourceType":"module"}