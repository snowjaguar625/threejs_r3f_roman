{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { BufferGeometry, Vector3, Float32BufferAttribute } from 'three';\n\n/**\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n */\nvar ParametricGeometry = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(ParametricGeometry, _BufferGeometry);\n  function ParametricGeometry() {\n    var _this;\n    var func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (u, v, target) {\n      return target.set(u, v, Math.cos(u) * Math.sin(v));\n    };\n    var slices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    var stacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    _classCallCheck(this, ParametricGeometry);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ParametricGeometry).call(this));\n    _this.type = 'ParametricGeometry';\n    _this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks\n    }; // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    var EPS = 0.00001;\n    var normal = new Vector3();\n    var p0 = new Vector3(),\n      p1 = new Vector3();\n    var pu = new Vector3(),\n      pv = new Vector3(); // generate vertices, normals and uvs\n\n    var sliceCount = slices + 1;\n    for (var i = 0; i <= stacks; i++) {\n      var v = i / stacks;\n      for (var j = 0; j <= slices; j++) {\n        var u = j / slices; // vertex\n\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z); // normal\n        // approximate tangent vectors via finite differences\n\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        } // cross product of tangent vectors returns surface normal\n\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z); // uv\n\n        uvs.push(u, v);\n      }\n    } // generate indices\n\n    for (var _i = 0; _i < stacks; _i++) {\n      for (var _j = 0; _j < slices; _j++) {\n        var a = _i * sliceCount + _j;\n        var b = _i * sliceCount + _j + 1;\n        var c = (_i + 1) * sliceCount + _j + 1;\n        var d = (_i + 1) * sliceCount + _j; // faces one and two\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    } // build geometry\n\n    _this.setIndex(indices);\n    _this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    _this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    return _this;\n  }\n  return ParametricGeometry;\n}(BufferGeometry);\nexport { ParametricGeometry };","map":null,"metadata":{},"sourceType":"module"}