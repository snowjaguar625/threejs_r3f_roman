{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, BufferGeometry, Float32BufferAttribute } from 'three';\n\n/**\n * Break faces with edges longer than maxEdgeLength\n */\nvar TessellateModifier = function TessellateModifier() {\n  var _this = this;\n  var maxEdgeLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.1;\n  var _maxIterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  _classCallCheck(this, TessellateModifier);\n  _defineProperty(this, \"maxEdgeLength\", void 0);\n  _defineProperty(this, \"maxIterations\", void 0);\n  _defineProperty(this, \"modify\", function (geometry) {\n    if (geometry.index !== null) {\n      geometry = geometry.toNonIndexed();\n    } //\n\n    var maxIterations = _this.maxIterations;\n    var maxEdgeLengthSquared = _this.maxEdgeLength * _this.maxEdgeLength;\n    var va = new Vector3();\n    var vb = new Vector3();\n    var vc = new Vector3();\n    var vm = new Vector3();\n    var vs = [va, vb, vc, vm];\n    var na = new Vector3();\n    var nb = new Vector3();\n    var nc = new Vector3();\n    var nm = new Vector3();\n    var ns = [na, nb, nc, nm];\n    var ca = new Color();\n    var cb = new Color();\n    var cc = new Color();\n    var cm = new Color();\n    var cs = [ca, cb, cc, cm];\n    var ua = new Vector2();\n    var ub = new Vector2();\n    var uc = new Vector2();\n    var um = new Vector2();\n    var us = [ua, ub, uc, um];\n    var u2a = new Vector2();\n    var u2b = new Vector2();\n    var u2c = new Vector2();\n    var u2m = new Vector2();\n    var u2s = [u2a, u2b, u2c, u2m];\n    var attributes = geometry.attributes;\n    var hasNormals = attributes.normal !== undefined;\n    var hasColors = attributes.color !== undefined;\n    var hasUVs = attributes.uv !== undefined;\n    var hasUV2s = attributes.uv2 !== undefined;\n    var positions = attributes.position.array;\n    var normals = hasNormals ? attributes.normal.array : null;\n    var colors = hasColors ? attributes.color.array : null;\n    var uvs = hasUVs ? attributes.uv.array : null;\n    var uv2s = hasUV2s ? attributes.uv2.array : null;\n    var positions2 = positions;\n    var normals2 = normals;\n    var colors2 = colors;\n    var uvs2 = uvs;\n    var uv2s2 = uv2s;\n    var iteration = 0;\n    var tessellating = true;\n    function addTriangle(a, b, c) {\n      var v1 = vs[a];\n      var v2 = vs[b];\n      var v3 = vs[c];\n      positions2.push(v1.x, v1.y, v1.z);\n      positions2.push(v2.x, v2.y, v2.z);\n      positions2.push(v3.x, v3.y, v3.z);\n      if (hasNormals) {\n        var n1 = ns[a];\n        var n2 = ns[b];\n        var n3 = ns[c];\n        normals2.push(n1.x, n1.y, n1.z);\n        normals2.push(n2.x, n2.y, n2.z);\n        normals2.push(n3.x, n3.y, n3.z);\n      }\n      if (hasColors) {\n        var c1 = cs[a];\n        var c2 = cs[b];\n        var c3 = cs[c];\n        colors2.push(c1.r, c1.g, c1.b);\n        colors2.push(c2.r, c2.g, c2.b);\n        colors2.push(c3.r, c3.g, c3.b);\n      }\n      if (hasUVs) {\n        var u1 = us[a];\n        var u2 = us[b];\n        var u3 = us[c];\n        uvs2.push(u1.x, u1.y);\n        uvs2.push(u2.x, u2.y);\n        uvs2.push(u3.x, u3.y);\n      }\n      if (hasUV2s) {\n        var u21 = u2s[a];\n        var u22 = u2s[b];\n        var u23 = u2s[c];\n        uv2s2.push(u21.x, u21.y);\n        uv2s2.push(u22.x, u22.y);\n        uv2s2.push(u23.x, u23.y);\n      }\n    }\n    while (tessellating && iteration < maxIterations) {\n      iteration++;\n      tessellating = false;\n      positions = positions2;\n      positions2 = [];\n      if (hasNormals) {\n        normals = normals2;\n        normals2 = [];\n      }\n      if (hasColors) {\n        colors = colors2;\n        colors2 = [];\n      }\n      if (hasUVs) {\n        uvs = uvs2;\n        uvs2 = [];\n      }\n      if (hasUV2s) {\n        uv2s = uv2s2;\n        uv2s2 = [];\n      }\n      for (var i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6) {\n        va.fromArray(positions, i + 0);\n        vb.fromArray(positions, i + 3);\n        vc.fromArray(positions, i + 6);\n        if (hasNormals && normals) {\n          na.fromArray(normals, i + 0);\n          nb.fromArray(normals, i + 3);\n          nc.fromArray(normals, i + 6);\n        }\n        if (hasColors && colors) {\n          ca.fromArray(colors, i + 0);\n          cb.fromArray(colors, i + 3);\n          cc.fromArray(colors, i + 6);\n        }\n        if (hasUVs && uvs) {\n          ua.fromArray(uvs, i2 + 0);\n          ub.fromArray(uvs, i2 + 2);\n          uc.fromArray(uvs, i2 + 4);\n        }\n        if (hasUV2s && uv2s) {\n          u2a.fromArray(uv2s, i2 + 0);\n          u2b.fromArray(uv2s, i2 + 2);\n          u2c.fromArray(uv2s, i2 + 4);\n        }\n        var dab = va.distanceToSquared(vb);\n        var dbc = vb.distanceToSquared(vc);\n        var dac = va.distanceToSquared(vc);\n        if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n          tessellating = true;\n          if (dab >= dbc && dab >= dac) {\n            vm.lerpVectors(va, vb, 0.5);\n            if (hasNormals) nm.lerpVectors(na, nb, 0.5);\n            if (hasColors) cm.lerpColors(ca, cb, 0.5);\n            if (hasUVs) um.lerpVectors(ua, ub, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2a, u2b, 0.5);\n            addTriangle(0, 3, 2);\n            addTriangle(3, 1, 2);\n          } else if (dbc >= dab && dbc >= dac) {\n            vm.lerpVectors(vb, vc, 0.5);\n            if (hasNormals) nm.lerpVectors(nb, nc, 0.5);\n            if (hasColors) cm.lerpColors(cb, cc, 0.5);\n            if (hasUVs) um.lerpVectors(ub, uc, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2b, u2c, 0.5);\n            addTriangle(0, 1, 3);\n            addTriangle(3, 2, 0);\n          } else {\n            vm.lerpVectors(va, vc, 0.5);\n            if (hasNormals) nm.lerpVectors(na, nc, 0.5);\n            if (hasColors) cm.lerpColors(ca, cc, 0.5);\n            if (hasUVs) um.lerpVectors(ua, uc, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2a, u2c, 0.5);\n            addTriangle(0, 1, 3);\n            addTriangle(3, 1, 2);\n          }\n        } else {\n          addTriangle(0, 1, 2);\n        }\n      }\n    }\n    var geometry2 = new BufferGeometry();\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n    if (hasNormals) {\n      geometry2.setAttribute('normal', new Float32BufferAttribute(normals2, 3));\n    }\n    if (hasColors) {\n      geometry2.setAttribute('color', new Float32BufferAttribute(colors2, 3));\n    }\n    if (hasUVs) {\n      geometry2.setAttribute('uv', new Float32BufferAttribute(uvs2, 2));\n    }\n    if (hasUV2s) {\n      geometry2.setAttribute('uv2', new Float32BufferAttribute(uv2s2, 2));\n    }\n    return geometry2;\n  });\n  this.maxEdgeLength = maxEdgeLength;\n  this.maxIterations = _maxIterations;\n};\nexport { TessellateModifier };","map":null,"metadata":{},"sourceType":"module"}