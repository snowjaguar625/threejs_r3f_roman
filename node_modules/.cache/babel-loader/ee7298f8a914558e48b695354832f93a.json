{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildModel = void 0;\nvar gast_1 = require(\"@chevrotain/gast\");\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\nvar values_1 = __importDefault(require(\"lodash/values\"));\nvar some_1 = __importDefault(require(\"lodash/some\"));\nvar groupBy_1 = __importDefault(require(\"lodash/groupBy\"));\nvar assign_1 = __importDefault(require(\"lodash/assign\"));\nfunction buildModel(productions) {\n  var generator = new CstNodeDefinitionGenerator();\n  var allRules = (0, values_1.default)(productions);\n  return (0, map_1.default)(allRules, function (rule) {\n    return generator.visitRule(rule);\n  });\n}\nexports.buildModel = buildModel;\nvar CstNodeDefinitionGenerator = /** @class */function (_super) {\n  __extends(CstNodeDefinitionGenerator, _super);\n  function CstNodeDefinitionGenerator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CstNodeDefinitionGenerator.prototype.visitRule = function (node) {\n    var rawElements = this.visitEach(node.definition);\n    var grouped = (0, groupBy_1.default)(rawElements, function (el) {\n      return el.propertyName;\n    });\n    var properties = (0, map_1.default)(grouped, function (group, propertyName) {\n      var allNullable = !(0, some_1.default)(group, function (el) {\n        return !el.canBeNull;\n      });\n      // In an alternation with a label a property name can have\n      // multiple types.\n      var propertyType = group[0].type;\n      if (group.length > 1) {\n        propertyType = (0, map_1.default)(group, function (g) {\n          return g.type;\n        });\n      }\n      return {\n        name: propertyName,\n        type: propertyType,\n        optional: allNullable\n      };\n    });\n    return {\n      name: node.name,\n      properties: properties\n    };\n  };\n  CstNodeDefinitionGenerator.prototype.visitAlternative = function (node) {\n    return this.visitEachAndOverrideWith(node.definition, {\n      canBeNull: true\n    });\n  };\n  CstNodeDefinitionGenerator.prototype.visitOption = function (node) {\n    return this.visitEachAndOverrideWith(node.definition, {\n      canBeNull: true\n    });\n  };\n  CstNodeDefinitionGenerator.prototype.visitRepetition = function (node) {\n    return this.visitEachAndOverrideWith(node.definition, {\n      canBeNull: true\n    });\n  };\n  CstNodeDefinitionGenerator.prototype.visitRepetitionMandatory = function (node) {\n    return this.visitEach(node.definition);\n  };\n  CstNodeDefinitionGenerator.prototype.visitRepetitionMandatoryWithSeparator = function (node) {\n    return this.visitEach(node.definition).concat({\n      propertyName: node.separator.name,\n      canBeNull: true,\n      type: getType(node.separator)\n    });\n  };\n  CstNodeDefinitionGenerator.prototype.visitRepetitionWithSeparator = function (node) {\n    return this.visitEachAndOverrideWith(node.definition, {\n      canBeNull: true\n    }).concat({\n      propertyName: node.separator.name,\n      canBeNull: true,\n      type: getType(node.separator)\n    });\n  };\n  CstNodeDefinitionGenerator.prototype.visitAlternation = function (node) {\n    return this.visitEachAndOverrideWith(node.definition, {\n      canBeNull: true\n    });\n  };\n  CstNodeDefinitionGenerator.prototype.visitTerminal = function (node) {\n    return [{\n      propertyName: node.label || node.terminalType.name,\n      canBeNull: false,\n      type: getType(node)\n    }];\n  };\n  CstNodeDefinitionGenerator.prototype.visitNonTerminal = function (node) {\n    return [{\n      propertyName: node.label || node.nonTerminalName,\n      canBeNull: false,\n      type: getType(node)\n    }];\n  };\n  CstNodeDefinitionGenerator.prototype.visitEachAndOverrideWith = function (definition, override) {\n    return (0, map_1.default)(this.visitEach(definition), function (definition) {\n      return (0, assign_1.default)({}, definition, override);\n    });\n  };\n  CstNodeDefinitionGenerator.prototype.visitEach = function (definition) {\n    var _this = this;\n    return (0, flatten_1.default)((0, map_1.default)(definition, function (definition) {\n      return _this.visit(definition);\n    }));\n  };\n  return CstNodeDefinitionGenerator;\n}(gast_1.GAstVisitor);\nfunction getType(production) {\n  if (production instanceof gast_1.NonTerminal) {\n    return {\n      kind: \"rule\",\n      name: production.referencedRule.name\n    };\n  }\n  return {\n    kind: \"token\"\n  };\n}","map":null,"metadata":{},"sourceType":"script"}