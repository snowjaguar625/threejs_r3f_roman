{"ast":null,"code":"import _slicedToArray from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { WebGLMultisampleRenderTarget, RGBAFormat, sRGBEncoding } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { EffectComposer, RenderPass, ShaderPass, GammaCorrectionShader } from 'three-stdlib';\nimport mergeRefs from 'react-merge-refs';\nextend({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  ShaderPass: ShaderPass\n});\nvar isWebGL2Available = function isWebGL2Available() {\n  try {\n    var canvas = document.createElement('canvas');\n    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n  } catch (e) {\n    return false;\n  }\n};\nvar Effects = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n    _ref$multisamping = _ref.multisamping,\n    multisamping = _ref$multisamping === void 0 ? 8 : _ref$multisamping,\n    _ref$renderIndex = _ref.renderIndex,\n    renderIndex = _ref$renderIndex === void 0 ? 1 : _ref$renderIndex,\n    _ref$disableGamma = _ref.disableGamma,\n    disableGamma = _ref$disableGamma === void 0 ? false : _ref$disableGamma,\n    _ref$disableRenderPas = _ref.disableRenderPass,\n    disableRenderPass = _ref$disableRenderPas === void 0 ? false : _ref$disableRenderPas,\n    props = _objectWithoutProperties(_ref, [\"children\", \"multisamping\", \"renderIndex\", \"disableGamma\", \"disableRenderPass\"]);\n  var composer = React.useRef();\n  var scene = useThree(function (_ref2) {\n    var scene = _ref2.scene;\n    return scene;\n  });\n  var camera = useThree(function (_ref3) {\n    var camera = _ref3.camera;\n    return camera;\n  });\n  var gl = useThree(function (_ref4) {\n    var gl = _ref4.gl;\n    return gl;\n  });\n  var size = useThree(function (_ref5) {\n    var size = _ref5.size;\n    return size;\n  });\n  var _React$useState = React.useState(function () {\n      if (isWebGL2Available() && multisamping > 0) {\n        var t = new WebGLMultisampleRenderTarget(size.width, size.height, {\n          format: RGBAFormat,\n          encoding: sRGBEncoding\n        });\n        t.samples = 8;\n        return t;\n      }\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    target = _React$useState2[0];\n  React.useEffect(function () {\n    var _composer$current, _composer$current2;\n    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);\n    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(gl.getPixelRatio());\n  }, [gl, size]);\n  useFrame(function () {\n    var _composer$current3;\n    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();\n  }, renderIndex);\n  return /*#__PURE__*/React.createElement(\"effectComposer\", _extends({\n    ref: mergeRefs([ref, composer]),\n    args: [gl, target]\n  }, props), !disableRenderPass && /*#__PURE__*/React.createElement(\"renderPass\", {\n    attachArray: \"passes\",\n    args: [scene, camera]\n  }), !disableGamma && /*#__PURE__*/React.createElement(\"shaderPass\", {\n    attachArray: \"passes\",\n    args: [GammaCorrectionShader]\n  }), children);\n});\nexport { Effects, isWebGL2Available };","map":null,"metadata":{},"sourceType":"module"}