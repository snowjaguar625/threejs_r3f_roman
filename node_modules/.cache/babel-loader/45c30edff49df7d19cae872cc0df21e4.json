{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { EventDispatcher, Vector3, TOUCH, Spherical, Vector2, Quaternion, PerspectiveCamera, OrthographicCamera, MOUSE } from 'three';\nvar STATE;\n(function (STATE) {\n  STATE[STATE[\"NONE\"] = -1] = \"NONE\";\n  STATE[STATE[\"ROTATE\"] = 0] = \"ROTATE\";\n  STATE[STATE[\"DOLLY\"] = 1] = \"DOLLY\";\n  STATE[STATE[\"PAN\"] = 2] = \"PAN\";\n  STATE[STATE[\"TOUCH_ROTATE\"] = 3] = \"TOUCH_ROTATE\";\n  STATE[STATE[\"TOUCH_PAN\"] = 4] = \"TOUCH_PAN\";\n  STATE[STATE[\"TOUCH_DOLLY_PAN\"] = 5] = \"TOUCH_DOLLY_PAN\";\n  STATE[STATE[\"TOUCH_DOLLY_ROTATE\"] = 6] = \"TOUCH_DOLLY_ROTATE\";\n})(STATE || (STATE = {}));\nvar CameraControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(CameraControls, _EventDispatcher);\n  /** Set to false to disable this control */\n\n  /** \"target\" sets the location of focus, where the object orbits around */\n\n  /** Set to true to enable trackball behavior */\n\n  /** How far you can dolly in ( PerspectiveCamera only ) */\n\n  /** How far you can dolly out ( PerspectiveCamera only ) */\n  // How far you can zoom in and out ( OrthographicCamera only )\n  // How far you can orbit vertically, upper and lower limits.\n  // Range is 0 to Math.PI radians.\n  // How far you can orbit horizontally, upper and lower limits.\n  // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n  // radians\n  // radians\n  // Set to true to enable damping (inertia)\n  // If damping is enabled, you must call controls.update() in your animation loop\n\n  /**\n   * This option enables dollying in and out; property named as \"zoom\" for backwards compatibility\n   * Set to false to disable zooming\n   */\n\n  /** Set to false to disable rotating */\n\n  /** Set to false to disable panning */\n\n  /** if true, pan in screen-space */\n\n  /** pixels moved per arrow key push */\n\n  /**\n   * Set to true to automatically rotate around the target\n   * If auto-rotate is enabled, you must call controls.update() in your animation loop\n   * auto-rotate is not supported for trackball behavior\n   */\n  // 30 seconds per round when fps is 60\n\n  /** Set to false to disable use of the keys */\n\n  /** The four arrow keys */\n\n  /** Touch fingers */\n  // for reset\n  // current position in spherical coordinates\n  function CameraControls(object, domElement) {\n    var _this;\n    _classCallCheck(this, CameraControls);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CameraControls).call(this));\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"object\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"domElement\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"enabled\", true);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"target\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"trackball\", false);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"minDistance\", 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"maxDistance\", Infinity);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"minZoom\", 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"maxZoom\", Infinity);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"minPolarAngle\", 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"maxPolarAngle\", Math.PI);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"minAzimuthAngle\", -Infinity);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"maxAzimuthAngle\", Infinity);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"enableDamping\", false);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dampingFactor\", 0.05);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"enableZoom\", true);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"zoomSpeed\", 1.0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"enableRotate\", true);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"rotateSpeed\", 1.0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"enablePan\", true);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"panSpeed\", 1.0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"screenSpacePanning\", false);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"keyPanSpeed\", 7.0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"autoRotate\", false);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"autoRotateSpeed\", 2.0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"enableKeys\", true);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"keys\", {\n      LEFT: 'ArrowLeft',\n      UP: 'ArrowUp',\n      RIGHT: 'ArrowRight',\n      BOTTOM: 'ArrowDown'\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"mouseButtons\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"touches\", {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"target0\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"position0\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"quaternion0\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"zoom0\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"spherical\", new Spherical());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"sphericalDelta\", new Spherical());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"changeEvent\", {\n      type: 'change'\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"startEvent\", {\n      type: 'start'\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"endEvent\", {\n      type: 'end'\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", STATE.NONE);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"EPS\", 0.000001);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"scale\", 1);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"panOffset\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"zoomChanged\", false);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"rotateStart\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"rotateEnd\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"rotateDelta\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"panStart\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"panEnd\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"panDelta\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dollyStart\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dollyEnd\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dollyDelta\", new Vector2());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"offset\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"lastPosition\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"lastQuaternion\", new Quaternion());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"q\", new Quaternion());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"v\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"vec\", new Vector3());\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"quat\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"quatInverse\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getPolarAngle\", function () {\n      return _this.spherical.phi;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getAzimuthalAngle\", function () {\n      return _this.spherical.theta;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"saveState\", function () {\n      _this.target0.copy(_this.target);\n      _this.position0.copy(_this.object.position);\n      _this.quaternion0.copy(_this.object.quaternion);\n      _this.zoom0 = _this.object.zoom;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"reset\", function () {\n      _this.target.copy(_this.target0);\n      _this.object.position.copy(_this.position0);\n      _this.object.quaternion.copy(_this.quaternion0);\n      _this.object.zoom = _this.zoom0;\n      _this.object.updateProjectionMatrix();\n      _this.dispatchEvent(_this.changeEvent);\n      _this.update();\n      _this.state = STATE.NONE;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dispose\", function () {\n      _this.domElement.removeEventListener('contextmenu', _this.onContextMenu, false);\n      _this.domElement.removeEventListener('mousedown', _this.onMouseDown, false);\n      _this.domElement.removeEventListener('wheel', _this.onMouseWheel, false);\n      _this.domElement.removeEventListener('touchstart', _this.onTouchStart, false);\n      _this.domElement.removeEventListener('touchend', _this.onTouchEnd, false);\n      _this.domElement.removeEventListener('touchmove', _this.onTouchMove, false);\n      document.removeEventListener('mousemove', _this.onMouseMove, false);\n      document.removeEventListener('mouseup', _this.onMouseUp, false);\n      _this.domElement.removeEventListener('keydown', _this.onKeyDown, false); //this.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"update\", function () {\n      var position = _this.object.position;\n      _this.offset.copy(position).sub(_this.target);\n      if (_this.trackball) {\n        // rotate around screen-space y-axis\n        if (_this.sphericalDelta.theta) {\n          _this.vec.set(0, 1, 0).applyQuaternion(_this.object.quaternion);\n          var factor = _this.enableDamping ? _this.dampingFactor : 1;\n          _this.q.setFromAxisAngle(_this.vec, _this.sphericalDelta.theta * factor);\n          _this.object.quaternion.premultiply(_this.q);\n          _this.offset.applyQuaternion(_this.q);\n        } // rotate around screen-space x-axis\n\n        if (_this.sphericalDelta.phi) {\n          _this.vec.set(1, 0, 0).applyQuaternion(_this.object.quaternion);\n          var _factor = _this.enableDamping ? _this.dampingFactor : 1;\n          _this.q.setFromAxisAngle(_this.vec, _this.sphericalDelta.phi * _factor);\n          _this.object.quaternion.premultiply(_this.q);\n          _this.offset.applyQuaternion(_this.q);\n        }\n        _this.offset.multiplyScalar(_this.scale);\n        _this.offset.clampLength(_this.minDistance, _this.maxDistance);\n      } else {\n        // rotate offset to \"y-axis-is-up\" space\n        _this.offset.applyQuaternion(_this.quat);\n        if (_this.autoRotate && _this.state === STATE.NONE) {\n          _this.rotateLeft(_this.getAutoRotationAngle());\n        }\n        _this.spherical.setFromVector3(_this.offset);\n        if (_this.enableDamping) {\n          _this.spherical.theta += _this.sphericalDelta.theta * _this.dampingFactor;\n          _this.spherical.phi += _this.sphericalDelta.phi * _this.dampingFactor;\n        } else {\n          _this.spherical.theta += _this.sphericalDelta.theta;\n          _this.spherical.phi += _this.sphericalDelta.phi;\n        } // restrict theta to be between desired limits\n\n        _this.spherical.theta = Math.max(_this.minAzimuthAngle, Math.min(_this.maxAzimuthAngle, _this.spherical.theta)); // restrict phi to be between desired limits\n\n        _this.spherical.phi = Math.max(_this.minPolarAngle, Math.min(_this.maxPolarAngle, _this.spherical.phi));\n        _this.spherical.makeSafe();\n        _this.spherical.radius *= _this.scale; // restrict radius to be between desired limits\n\n        _this.spherical.radius = Math.max(_this.minDistance, Math.min(_this.maxDistance, _this.spherical.radius));\n        _this.offset.setFromSpherical(_this.spherical); // rotate offset back to \"camera-up-vector-is-up\" space\n\n        _this.offset.applyQuaternion(_this.quatInverse);\n      } // move target to panned location\n\n      if (_this.enableDamping === true) {\n        _this.target.addScaledVector(_this.panOffset, _this.dampingFactor);\n      } else {\n        _this.target.add(_this.panOffset);\n      }\n      position.copy(_this.target).add(_this.offset);\n      if (_this.trackball === false) {\n        _this.object.lookAt(_this.target);\n      }\n      if (_this.enableDamping === true) {\n        _this.sphericalDelta.theta *= 1 - _this.dampingFactor;\n        _this.sphericalDelta.phi *= 1 - _this.dampingFactor;\n        _this.panOffset.multiplyScalar(1 - _this.dampingFactor);\n      } else {\n        _this.sphericalDelta.set(0, 0, 0);\n        _this.panOffset.set(0, 0, 0);\n      }\n      _this.scale = 1; // update condition is:\n      // min(camera displacement, camera rotation in radians)^2 > EPS\n      // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n      if (_this.zoomChanged || _this.lastPosition.distanceToSquared(_this.object.position) > _this.EPS || 8 * (1 - _this.lastQuaternion.dot(_this.object.quaternion)) > _this.EPS) {\n        _this.dispatchEvent(_this.changeEvent);\n        _this.lastPosition.copy(_this.object.position);\n        _this.lastQuaternion.copy(_this.object.quaternion);\n        _this.zoomChanged = false;\n        return true;\n      }\n      return false;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getAutoRotationAngle\", function () {\n      return 2 * Math.PI / 60 / 60 * _this.autoRotateSpeed;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getZoomScale\", function () {\n      return Math.pow(0.95, _this.zoomSpeed);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"rotateLeft\", function (angle) {\n      _this.sphericalDelta.theta -= angle;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"rotateUp\", function (angle) {\n      _this.sphericalDelta.phi -= angle;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"panLeft\", function (distance, objectMatrix) {\n      _this.v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n\n      _this.v.multiplyScalar(-distance);\n      _this.panOffset.add(_this.v);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"panUp\", function (distance, objectMatrix) {\n      if (_this.screenSpacePanning === true) {\n        _this.v.setFromMatrixColumn(objectMatrix, 1);\n      } else {\n        _this.v.setFromMatrixColumn(objectMatrix, 0);\n        _this.v.crossVectors(_this.object.up, _this.v);\n      }\n      _this.v.multiplyScalar(distance);\n      _this.panOffset.add(_this.v);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"pan\", function (deltaX, deltaY) {\n      var element = _this.domElement;\n      if (_this.object instanceof PerspectiveCamera) {\n        // perspective\n        var position = _this.object.position;\n        _this.offset.copy(position).sub(_this.target);\n        var targetDistance = _this.offset.length(); // half of the fov is center to top of screen\n\n        targetDistance *= Math.tan(_this.object.fov / 2 * Math.PI / 180.0); // we use only clientHeight here so aspect ratio does not distort speed\n\n        _this.panLeft(2 * deltaX * targetDistance / element.clientHeight, _this.object.matrix);\n        _this.panUp(2 * deltaY * targetDistance / element.clientHeight, _this.object.matrix);\n      } else if (_this.object.isOrthographicCamera) {\n        // orthographic\n        _this.panLeft(deltaX * (_this.object.right - _this.object.left) / _this.object.zoom / element.clientWidth, _this.object.matrix);\n        _this.panUp(deltaY * (_this.object.top - _this.object.bottom) / _this.object.zoom / element.clientHeight, _this.object.matrix);\n      } else {\n        // camera neither orthographic nor perspective\n        console.warn('WARNING: CameraControls.js encountered an unknown camera type - pan disabled.');\n        _this.enablePan = false;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dollyIn\", function (dollyScale) {\n      // TODO: replace w/.isPerspectiveCamera ?\n      if (_this.object instanceof PerspectiveCamera) {\n        _this.scale /= dollyScale; // TODO: replace w/.isOrthographicCamera ?\n      } else if (_this.object instanceof OrthographicCamera) {\n        _this.object.zoom = Math.max(_this.minZoom, Math.min(_this.maxZoom, _this.object.zoom * dollyScale));\n        _this.object.updateProjectionMatrix();\n        _this.zoomChanged = true;\n      } else {\n        console.warn('WARNING: CameraControls.js encountered an unknown camera type - dolly/zoom disabled.');\n        _this.enableZoom = false;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dollyOut\", function (dollyScale) {\n      // TODO: replace w/.isPerspectiveCamera ?\n      if (_this.object instanceof PerspectiveCamera) {\n        _this.scale *= dollyScale; // TODO: replace w/.isOrthographicCamera ?\n      } else if (_this.object instanceof OrthographicCamera) {\n        _this.object.zoom = Math.max(_this.minZoom, Math.min(_this.maxZoom, _this.object.zoom / dollyScale));\n        _this.object.updateProjectionMatrix();\n        _this.zoomChanged = true;\n      } else {\n        console.warn('WARNING: CameraControls.js encountered an unknown camera type - dolly/zoom disabled.');\n        _this.enableZoom = false;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseDownRotate\", function (event) {\n      _this.rotateStart.set(event.clientX, event.clientY);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseDownDolly\", function (event) {\n      _this.dollyStart.set(event.clientX, event.clientY);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseDownPan\", function (event) {\n      _this.panStart.set(event.clientX, event.clientY);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseMoveRotate\", function (event) {\n      _this.rotateEnd.set(event.clientX, event.clientY);\n      _this.rotateDelta.subVectors(_this.rotateEnd, _this.rotateStart).multiplyScalar(_this.rotateSpeed);\n      var element = _this.domElement;\n      _this.rotateLeft(2 * Math.PI * _this.rotateDelta.x / element.clientHeight); // yes, height\n\n      _this.rotateUp(2 * Math.PI * _this.rotateDelta.y / element.clientHeight);\n      _this.rotateStart.copy(_this.rotateEnd);\n      _this.update();\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseMoveDolly\", function (event) {\n      _this.dollyEnd.set(event.clientX, event.clientY);\n      _this.dollyDelta.subVectors(_this.dollyEnd, _this.dollyStart);\n      if (_this.dollyDelta.y > 0) {\n        _this.dollyIn(_this.getZoomScale());\n      } else if (_this.dollyDelta.y < 0) {\n        _this.dollyOut(_this.getZoomScale());\n      }\n      _this.dollyStart.copy(_this.dollyEnd);\n      _this.update();\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseMovePan\", function (event) {\n      _this.panEnd.set(event.clientX, event.clientY);\n      _this.panDelta.subVectors(_this.panEnd, _this.panStart).multiplyScalar(_this.panSpeed);\n      _this.pan(_this.panDelta.x, _this.panDelta.y);\n      _this.panStart.copy(_this.panEnd);\n      _this.update();\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseWheel\", function (event) {\n      if (event.deltaY < 0) {\n        _this.dollyOut(_this.getZoomScale());\n      } else if (event.deltaY > 0) {\n        _this.dollyIn(_this.getZoomScale());\n      }\n      _this.update();\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleKeyDown\", function (event) {\n      var needsUpdate = false;\n      switch (event.code) {\n        case _this.keys.UP:\n          _this.pan(0, _this.keyPanSpeed);\n          needsUpdate = true;\n          break;\n        case _this.keys.BOTTOM:\n          _this.pan(0, -_this.keyPanSpeed);\n          needsUpdate = true;\n          break;\n        case _this.keys.LEFT:\n          _this.pan(_this.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n        case _this.keys.RIGHT:\n          _this.pan(-_this.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n      }\n      if (needsUpdate) {\n        // prevent the browser from scrolling on cursor keys\n        event.preventDefault();\n        _this.update();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchStartRotate\", function (event) {\n      if (event.touches.length == 1) {\n        _this.rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        _this.rotateStart.set(x, y);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchStartPan\", function (event) {\n      if (event.touches.length == 1) {\n        _this.panStart.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        _this.panStart.set(x, y);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchStartDolly\", function (event) {\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      _this.dollyStart.set(0, distance);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchStartDollyPan\", function (event) {\n      if (_this.enableZoom) _this.handleTouchStartDolly(event);\n      if (_this.enablePan) _this.handleTouchStartPan(event);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchStartDollyRotate\", function (event) {\n      if (_this.enableZoom) _this.handleTouchStartDolly(event);\n      if (_this.enableRotate) _this.handleTouchStartRotate(event);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchMoveRotate\", function (event) {\n      if (event.touches.length == 1) {\n        _this.rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        _this.rotateEnd.set(x, y);\n      }\n      _this.rotateDelta.subVectors(_this.rotateEnd, _this.rotateStart).multiplyScalar(_this.rotateSpeed);\n      var element = _this.domElement;\n      _this.rotateLeft(2 * Math.PI * _this.rotateDelta.x / element.clientHeight); // yes, height\n\n      _this.rotateUp(2 * Math.PI * _this.rotateDelta.y / element.clientHeight);\n      _this.rotateStart.copy(_this.rotateEnd);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchMovePan\", function (event) {\n      if (event.touches.length == 1) {\n        _this.panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        _this.panEnd.set(x, y);\n      }\n      _this.panDelta.subVectors(_this.panEnd, _this.panStart).multiplyScalar(_this.panSpeed);\n      _this.pan(_this.panDelta.x, _this.panDelta.y);\n      _this.panStart.copy(_this.panEnd);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchMoveDolly\", function (event) {\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      _this.dollyEnd.set(0, distance);\n      _this.dollyDelta.set(0, Math.pow(_this.dollyEnd.y / _this.dollyStart.y, _this.zoomSpeed));\n      _this.dollyIn(_this.dollyDelta.y);\n      _this.dollyStart.copy(_this.dollyEnd);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchMoveDollyPan\", function (event) {\n      if (_this.enableZoom) _this.handleTouchMoveDolly(event);\n      if (_this.enablePan) _this.handleTouchMovePan(event);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchMoveDollyRotate\", function (event) {\n      if (_this.enableZoom) _this.handleTouchMoveDolly(event);\n      if (_this.enableRotate) _this.handleTouchMoveRotate(event);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseDown\", function (event) {\n      if (_this.enabled === false) return; // Prevent the browser from scrolling.\n\n      event.preventDefault(); // Manually set the focus since calling preventDefault above\n      // prevents the browser from setting it automatically.\n\n      _this.domElement.focus ? _this.domElement.focus() : window.focus();\n      var mouseAction;\n      switch (event.button) {\n        case 0:\n          mouseAction = _this.mouseButtons.LEFT;\n          break;\n        case 1:\n          mouseAction = _this.mouseButtons.MIDDLE;\n          break;\n        case 2:\n          mouseAction = _this.mouseButtons.RIGHT;\n          break;\n        default:\n          mouseAction = -1;\n      }\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (_this.enableZoom === false) return;\n          _this.handleMouseDownDolly(event);\n          _this.state = STATE.DOLLY;\n          break;\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (_this.enablePan === false) return;\n            _this.handleMouseDownPan(event);\n            _this.state = STATE.PAN;\n          } else {\n            if (_this.enableRotate === false) return;\n            _this.handleMouseDownRotate(event);\n            _this.state = STATE.ROTATE;\n          }\n          break;\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (_this.enableRotate === false) return;\n            _this.handleMouseDownRotate(event);\n            _this.state = STATE.ROTATE;\n          } else {\n            if (_this.enablePan === false) return;\n            _this.handleMouseDownPan(event);\n            _this.state = STATE.PAN;\n          }\n          break;\n        default:\n          _this.state = STATE.NONE;\n      }\n      if (_this.state !== STATE.NONE) {\n        document.addEventListener('mousemove', _this.onMouseMove, false);\n        document.addEventListener('mouseup', _this.onMouseUp, false);\n        _this.dispatchEvent(_this.startEvent);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseMove\", function (event) {\n      if (_this.enabled === false) return;\n      event.preventDefault();\n      switch (_this.state) {\n        case STATE.ROTATE:\n          if (_this.enableRotate === false) return;\n          _this.handleMouseMoveRotate(event);\n          break;\n        case STATE.DOLLY:\n          if (_this.enableZoom === false) return;\n          _this.handleMouseMoveDolly(event);\n          break;\n        case STATE.PAN:\n          if (_this.enablePan === false) return;\n          _this.handleMouseMovePan(event);\n          break;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseUp\", function () {\n      if (_this.enabled === false) return; // this.handleMouseUp()\n\n      document.removeEventListener('mousemove', _this.onMouseMove, false);\n      document.removeEventListener('mouseup', _this.onMouseUp, false);\n      _this.dispatchEvent(_this.endEvent);\n      _this.state = STATE.NONE;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseWheel\", function (event) {\n      if (_this.enabled === false || _this.enableZoom === false || _this.state !== STATE.NONE && _this.state !== STATE.ROTATE) {\n        return;\n      }\n      event.preventDefault();\n      _this.dispatchEvent(_this.startEvent);\n      _this.handleMouseWheel(event);\n      _this.dispatchEvent(_this.endEvent);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onKeyDown\", function (event) {\n      if (_this.enabled === false || _this.enableKeys === false || _this.enablePan === false) return;\n      _this.handleKeyDown(event);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onTouchStart\", function (event) {\n      if (_this.enabled === false) return;\n      event.preventDefault();\n      switch (event.touches.length) {\n        case 1:\n          switch (_this.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (_this.enableRotate === false) return;\n              _this.handleTouchStartRotate(event);\n              _this.state = STATE.TOUCH_ROTATE;\n              break;\n            case TOUCH.PAN:\n              if (_this.enablePan === false) return;\n              _this.handleTouchStartPan(event);\n              _this.state = STATE.TOUCH_PAN;\n              break;\n            default:\n              _this.state = STATE.NONE;\n          }\n          break;\n        case 2:\n          switch (_this.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (_this.enableZoom === false && _this.enablePan === false) return;\n              _this.handleTouchStartDollyPan(event);\n              _this.state = STATE.TOUCH_DOLLY_PAN;\n              break;\n            case TOUCH.DOLLY_ROTATE:\n              if (_this.enableZoom === false && _this.enableRotate === false) return;\n              _this.handleTouchStartDollyRotate(event);\n              _this.state = STATE.TOUCH_DOLLY_ROTATE;\n              break;\n            default:\n              _this.state = STATE.NONE;\n          }\n          break;\n        default:\n          _this.state = STATE.NONE;\n      }\n      if (_this.state !== STATE.NONE) {\n        _this.dispatchEvent(_this.startEvent);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onTouchMove\", function (event) {\n      if (_this.enabled === false) return;\n      event.preventDefault();\n      switch (_this.state) {\n        case STATE.TOUCH_ROTATE:\n          if (_this.enableRotate === false) return;\n          _this.handleTouchMoveRotate(event);\n          _this.update();\n          break;\n        case STATE.TOUCH_PAN:\n          if (_this.enablePan === false) return;\n          _this.handleTouchMovePan(event);\n          _this.update();\n          break;\n        case STATE.TOUCH_DOLLY_PAN:\n          if (_this.enableZoom === false && _this.enablePan === false) return;\n          _this.handleTouchMoveDollyPan(event);\n          _this.update();\n          break;\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (_this.enableZoom === false && _this.enableRotate === false) return;\n          _this.handleTouchMoveDollyRotate(event);\n          _this.update();\n          break;\n        default:\n          _this.state = STATE.NONE;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onTouchEnd\", function () {\n      if (_this.enabled === false) return; // this.handleTouchEnd()\n\n      _this.dispatchEvent(_this.endEvent);\n      _this.state = STATE.NONE;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onContextMenu\", function (event) {\n      if (_this.enabled === false) return;\n      event.preventDefault();\n    });\n    if (domElement === undefined) {\n      console.warn('THREE.CameraControls: The second parameter \"domElement\" is now mandatory.');\n    }\n    if (domElement instanceof Document) {\n      console.error('THREE.CameraControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n    }\n    _this.object = object;\n    _this.domElement = domElement;\n    _this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN\n    }; // for reset\n\n    _this.target0 = _this.target.clone();\n    _this.position0 = _this.object.position.clone();\n    _this.quaternion0 = _this.object.quaternion.clone();\n    _this.zoom0 = _this.object.zoom; //\n    // internals\n    //\n    // so camera.up is the orbit axis\n\n    _this.quat = new Quaternion().setFromUnitVectors(_this.object.up, new Vector3(0, 1, 0));\n    _this.quatInverse = _this.quat.clone().invert();\n    _this.lastPosition = new Vector3();\n    _this.lastQuaternion = new Quaternion();\n    _this.domElement.addEventListener('contextmenu', _this.onContextMenu, false);\n    _this.domElement.addEventListener('mousedown', _this.onMouseDown, false);\n    _this.domElement.addEventListener('wheel', _this.onMouseWheel, false);\n    _this.domElement.addEventListener('touchstart', _this.onTouchStart, false);\n    _this.domElement.addEventListener('touchend', _this.onTouchEnd, false);\n    _this.domElement.addEventListener('touchmove', _this.onTouchMove, false);\n    _this.domElement.addEventListener('keydown', _this.onKeyDown, false); // make sure element can receive keys.\n\n    if (_this.domElement.tabIndex === -1) {\n      _this.domElement.tabIndex = 0;\n    } // force an update at start\n\n    _this.object.lookAt(_this.target);\n    _this.update();\n    _this.saveState();\n    return _this;\n  }\n  _createClass(CameraControls, [{\n    key: \"handleMouseUp\",\n    value: function handleMouseUp() {// no-op\n    }\n  }, {\n    key: \"handleTouchEnd\",\n    value: function handleTouchEnd() {// no-op\n    } //\n    // event handlers - FSM: listen for events and reset state\n    //\n  }]);\n  return CameraControls;\n}(EventDispatcher);\n/**\n * OrbitControls maintains the \"up\" direction, camera.up (+Y by default).\n *\n * @event Orbit - left mouse / touch: one-finger move\n * @event Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n * @event Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n */\nvar OrbitControlsExp = /*#__PURE__*/function (_CameraControls) {\n  _inherits(OrbitControlsExp, _CameraControls);\n  function OrbitControlsExp(object, domElement) {\n    var _this2;\n    _classCallCheck(this, OrbitControlsExp);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(OrbitControlsExp).call(this, object, domElement));\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"mouseButtons\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"touches\", void 0);\n    _this2.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      RIGHT: MOUSE.PAN\n    };\n    _this2.touches = {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    };\n    return _this2;\n  }\n  return OrbitControlsExp;\n}(CameraControls);\n/**\n * MapControls maintains the \"up\" direction, camera.up (+Y by default)\n *\n * @event Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n * @event Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n * @event Pan - left mouse, or left right + ctrl/meta/shiftKey, or arrow keys / touch: one-finger move\n */\nvar MapControlsExp = /*#__PURE__*/function (_CameraControls2) {\n  _inherits(MapControlsExp, _CameraControls2);\n  function MapControlsExp(object, domElement) {\n    var _this3;\n    _classCallCheck(this, MapControlsExp);\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(MapControlsExp).call(this, object, domElement));\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), \"mouseButtons\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), \"touches\", void 0);\n    _this3.mouseButtons = {\n      LEFT: MOUSE.PAN,\n      RIGHT: MOUSE.ROTATE\n    };\n    _this3.touches = {\n      ONE: TOUCH.PAN,\n      TWO: TOUCH.DOLLY_ROTATE\n    };\n    return _this3;\n  }\n  return MapControlsExp;\n}(CameraControls);\n/**\n * TrackballControls allows the camera to rotate over the polls and does not maintain camera.up\n *\n * @event Orbit - left mouse / touch: one-finger move\n * @event Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n * @event Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n */\nvar TrackballControlsExp = /*#__PURE__*/function (_CameraControls3) {\n  _inherits(TrackballControlsExp, _CameraControls3);\n  function TrackballControlsExp(object, domElement) {\n    var _this4;\n    _classCallCheck(this, TrackballControlsExp);\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(TrackballControlsExp).call(this, object, domElement));\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), \"trackball\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), \"screenSpacePanning\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), \"autoRotate\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), \"mouseButtons\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), \"touches\", void 0);\n    _this4.trackball = true;\n    _this4.screenSpacePanning = true;\n    _this4.autoRotate = false;\n    _this4.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      RIGHT: MOUSE.PAN\n    };\n    _this4.touches = {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    };\n    return _this4;\n  }\n  return TrackballControlsExp;\n}(CameraControls);\nexport { CameraControls, MapControlsExp, OrbitControlsExp, STATE, TrackballControlsExp };","map":null,"metadata":{},"sourceType":"module"}