{"ast":null,"code":"import _objectSpread from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\nvar KHR_SUPERCOMPRESSION_NONE = 0;\nvar KHR_SUPERCOMPRESSION_BASISLZ = 1;\nvar KHR_SUPERCOMPRESSION_ZSTD = 2;\nvar KHR_SUPERCOMPRESSION_ZLIB = 3; ///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nvar KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT = 0;\nvar KHR_DF_VENDORID_KHRONOS = 0;\nvar KHR_DF_VERSION = 2;\nvar KHR_DF_MODEL_UNSPECIFIED = 0;\nvar KHR_DF_MODEL_RGBSDA = 1; // ...\n\nvar KHR_DF_MODEL_ETC1 = 160;\nvar KHR_DF_MODEL_ETC2 = 161;\nvar KHR_DF_MODEL_ASTC = 162;\nvar KHR_DF_MODEL_ETC1S = 163;\nvar KHR_DF_MODEL_UASTC = 166;\nvar KHR_DF_FLAG_ALPHA_STRAIGHT = 0;\nvar KHR_DF_FLAG_ALPHA_PREMULTIPLIED = 1;\nvar KHR_DF_TRANSFER_UNSPECIFIED = 0;\nvar KHR_DF_TRANSFER_LINEAR = 1;\nvar KHR_DF_TRANSFER_SRGB = 2;\nvar KHR_DF_TRANSFER_ITU = 3;\nvar KHR_DF_TRANSFER_NTSC = 4;\nvar KHR_DF_TRANSFER_SLOG = 5;\nvar KHR_DF_TRANSFER_SLOG2 = 6;\nvar KHR_DF_TRANSFER_BT1886 = 7;\nvar KHR_DF_TRANSFER_HLG_OETF = 8;\nvar KHR_DF_TRANSFER_HLG_EOTF = 9;\nvar KHR_DF_TRANSFER_PQ_EOTF = 10;\nvar KHR_DF_TRANSFER_PQ_OETF = 11;\nvar KHR_DF_TRANSFER_DCIP3 = 12;\nvar KHR_DF_TRANSFER_PAL_OETF = 13;\nvar KHR_DF_TRANSFER_PAL625_EOTF = 14;\nvar KHR_DF_TRANSFER_ST240 = 15;\nvar KHR_DF_TRANSFER_ACESCC = 16;\nvar KHR_DF_TRANSFER_ACESCCT = 17;\nvar KHR_DF_TRANSFER_ADOBERGB = 18;\nvar KHR_DF_PRIMARIES_UNSPECIFIED = 0;\nvar KHR_DF_PRIMARIES_BT709 = 1;\nvar KHR_DF_PRIMARIES_BT601_EBU = 2;\nvar KHR_DF_PRIMARIES_BT601_SMPTE = 3;\nvar KHR_DF_PRIMARIES_BT2020 = 4;\nvar KHR_DF_PRIMARIES_CIEXYZ = 5;\nvar KHR_DF_PRIMARIES_ACES = 6;\nvar KHR_DF_PRIMARIES_ACESCC = 7;\nvar KHR_DF_PRIMARIES_NTSC1953 = 8;\nvar KHR_DF_PRIMARIES_PAL525 = 9;\nvar KHR_DF_PRIMARIES_DISPLAYP3 = 10;\nvar KHR_DF_PRIMARIES_ADOBERGB = 11;\nvar KHR_DF_CHANNEL_RGBSDA_RED = 0;\nvar KHR_DF_CHANNEL_RGBSDA_GREEN = 1;\nvar KHR_DF_CHANNEL_RGBSDA_BLUE = 2;\nvar KHR_DF_CHANNEL_RGBSDA_STENCIL = 13;\nvar KHR_DF_CHANNEL_RGBSDA_DEPTH = 14;\nvar KHR_DF_CHANNEL_RGBSDA_ALPHA = 15;\nvar KHR_DF_SAMPLE_DATATYPE_FLOAT = 0x80;\nvar KHR_DF_SAMPLE_DATATYPE_SIGNED = 0x40;\nvar KHR_DF_SAMPLE_DATATYPE_EXPONENT = 0x20;\nvar KHR_DF_SAMPLE_DATATYPE_LINEAR = 0x10; ///////////////////////////////////////////////////\n// VK FORMAT.\n///////////////////////////////////////////////////\n\nvar VK_FORMAT_UNDEFINED = 0;\nvar VK_FORMAT_R4G4_UNORM_PACK8 = 1;\nvar VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2;\nvar VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3;\nvar VK_FORMAT_R5G6B5_UNORM_PACK16 = 4;\nvar VK_FORMAT_B5G6R5_UNORM_PACK16 = 5;\nvar VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6;\nvar VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7;\nvar VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8;\nvar VK_FORMAT_R8_UNORM = 9;\nvar VK_FORMAT_R8_SNORM = 10;\nvar VK_FORMAT_R8_UINT = 13;\nvar VK_FORMAT_R8_SINT = 14;\nvar VK_FORMAT_R8_SRGB = 15;\nvar VK_FORMAT_R8G8_UNORM = 16;\nvar VK_FORMAT_R8G8_SNORM = 17;\nvar VK_FORMAT_R8G8_UINT = 20;\nvar VK_FORMAT_R8G8_SINT = 21;\nvar VK_FORMAT_R8G8_SRGB = 22;\nvar VK_FORMAT_R8G8B8_UNORM = 23;\nvar VK_FORMAT_R8G8B8_SNORM = 24;\nvar VK_FORMAT_R8G8B8_UINT = 27;\nvar VK_FORMAT_R8G8B8_SINT = 28;\nvar VK_FORMAT_R8G8B8_SRGB = 29;\nvar VK_FORMAT_B8G8R8_UNORM = 30;\nvar VK_FORMAT_B8G8R8_SNORM = 31;\nvar VK_FORMAT_B8G8R8_UINT = 34;\nvar VK_FORMAT_B8G8R8_SINT = 35;\nvar VK_FORMAT_B8G8R8_SRGB = 36;\nvar VK_FORMAT_R8G8B8A8_UNORM = 37;\nvar VK_FORMAT_R8G8B8A8_SNORM = 38;\nvar VK_FORMAT_R8G8B8A8_UINT = 41;\nvar VK_FORMAT_R8G8B8A8_SINT = 42;\nvar VK_FORMAT_R8G8B8A8_SRGB = 43;\nvar VK_FORMAT_B8G8R8A8_UNORM = 44;\nvar VK_FORMAT_B8G8R8A8_SNORM = 45;\nvar VK_FORMAT_B8G8R8A8_UINT = 48;\nvar VK_FORMAT_B8G8R8A8_SINT = 49;\nvar VK_FORMAT_B8G8R8A8_SRGB = 50;\nvar VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58;\nvar VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59;\nvar VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62;\nvar VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63;\nvar VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64;\nvar VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65;\nvar VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68;\nvar VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69;\nvar VK_FORMAT_R16_UNORM = 70;\nvar VK_FORMAT_R16_SNORM = 71;\nvar VK_FORMAT_R16_UINT = 74;\nvar VK_FORMAT_R16_SINT = 75;\nvar VK_FORMAT_R16_SFLOAT = 76;\nvar VK_FORMAT_R16G16_UNORM = 77;\nvar VK_FORMAT_R16G16_SNORM = 78;\nvar VK_FORMAT_R16G16_UINT = 81;\nvar VK_FORMAT_R16G16_SINT = 82;\nvar VK_FORMAT_R16G16_SFLOAT = 83;\nvar VK_FORMAT_R16G16B16_UNORM = 84;\nvar VK_FORMAT_R16G16B16_SNORM = 85;\nvar VK_FORMAT_R16G16B16_UINT = 88;\nvar VK_FORMAT_R16G16B16_SINT = 89;\nvar VK_FORMAT_R16G16B16_SFLOAT = 90;\nvar VK_FORMAT_R16G16B16A16_UNORM = 91;\nvar VK_FORMAT_R16G16B16A16_SNORM = 92;\nvar VK_FORMAT_R16G16B16A16_UINT = 95;\nvar VK_FORMAT_R16G16B16A16_SINT = 96;\nvar VK_FORMAT_R16G16B16A16_SFLOAT = 97;\nvar VK_FORMAT_R32_UINT = 98;\nvar VK_FORMAT_R32_SINT = 99;\nvar VK_FORMAT_R32_SFLOAT = 100;\nvar VK_FORMAT_R32G32_UINT = 101;\nvar VK_FORMAT_R32G32_SINT = 102;\nvar VK_FORMAT_R32G32_SFLOAT = 103;\nvar VK_FORMAT_R32G32B32_UINT = 104;\nvar VK_FORMAT_R32G32B32_SINT = 105;\nvar VK_FORMAT_R32G32B32_SFLOAT = 106;\nvar VK_FORMAT_R32G32B32A32_UINT = 107;\nvar VK_FORMAT_R32G32B32A32_SINT = 108;\nvar VK_FORMAT_R32G32B32A32_SFLOAT = 109;\nvar VK_FORMAT_R64_UINT = 110;\nvar VK_FORMAT_R64_SINT = 111;\nvar VK_FORMAT_R64_SFLOAT = 112;\nvar VK_FORMAT_R64G64_UINT = 113;\nvar VK_FORMAT_R64G64_SINT = 114;\nvar VK_FORMAT_R64G64_SFLOAT = 115;\nvar VK_FORMAT_R64G64B64_UINT = 116;\nvar VK_FORMAT_R64G64B64_SINT = 117;\nvar VK_FORMAT_R64G64B64_SFLOAT = 118;\nvar VK_FORMAT_R64G64B64A64_UINT = 119;\nvar VK_FORMAT_R64G64B64A64_SINT = 120;\nvar VK_FORMAT_R64G64B64A64_SFLOAT = 121;\nvar VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122;\nvar VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123;\nvar VK_FORMAT_D16_UNORM = 124;\nvar VK_FORMAT_X8_D24_UNORM_PACK32 = 125;\nvar VK_FORMAT_D32_SFLOAT = 126;\nvar VK_FORMAT_S8_UINT = 127;\nvar VK_FORMAT_D16_UNORM_S8_UINT = 128;\nvar VK_FORMAT_D24_UNORM_S8_UINT = 129;\nvar VK_FORMAT_D32_SFLOAT_S8_UINT = 130;\nvar VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131;\nvar VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132;\nvar VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133;\nvar VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134;\nvar VK_FORMAT_BC2_UNORM_BLOCK = 135;\nvar VK_FORMAT_BC2_SRGB_BLOCK = 136;\nvar VK_FORMAT_BC3_UNORM_BLOCK = 137;\nvar VK_FORMAT_BC3_SRGB_BLOCK = 138;\nvar VK_FORMAT_BC4_UNORM_BLOCK = 139;\nvar VK_FORMAT_BC4_SNORM_BLOCK = 140;\nvar VK_FORMAT_BC5_UNORM_BLOCK = 141;\nvar VK_FORMAT_BC5_SNORM_BLOCK = 142;\nvar VK_FORMAT_BC6H_UFLOAT_BLOCK = 143;\nvar VK_FORMAT_BC6H_SFLOAT_BLOCK = 144;\nvar VK_FORMAT_BC7_UNORM_BLOCK = 145;\nvar VK_FORMAT_BC7_SRGB_BLOCK = 146;\nvar VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147;\nvar VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148;\nvar VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149;\nvar VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150;\nvar VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151;\nvar VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152;\nvar VK_FORMAT_EAC_R11_UNORM_BLOCK = 153;\nvar VK_FORMAT_EAC_R11_SNORM_BLOCK = 154;\nvar VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155;\nvar VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156;\nvar VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157;\nvar VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158;\nvar VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159;\nvar VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160;\nvar VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161;\nvar VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162;\nvar VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163;\nvar VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164;\nvar VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165;\nvar VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166;\nvar VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167;\nvar VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168;\nvar VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169;\nvar VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170;\nvar VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171;\nvar VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172;\nvar VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173;\nvar VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174;\nvar VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175;\nvar VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176;\nvar VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177;\nvar VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178;\nvar VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179;\nvar VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180;\nvar VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181;\nvar VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182;\nvar VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183;\nvar VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184;\nvar VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007;\nvar VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008;\nvar VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009;\nvar VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010;\nvar VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011;\nvar VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017;\nvar VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018;\nvar VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019;\nvar VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020;\nvar VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021;\nvar VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000;\nvar VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001;\nvar VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002;\nvar VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003;\nvar VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004;\nvar VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005;\nvar VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006;\nvar VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007;\nvar VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000;\nvar VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001;\nvar VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002;\nvar VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003;\nvar VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004;\nvar VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005;\nvar VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006;\nvar VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007;\nvar VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008;\nvar VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009;\nvar VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010;\nvar VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011;\nvar VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012;\nvar VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013;\nvar VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000;\nvar VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001;\n\n/**\r\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\r\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\r\n * provide metadata required to process, transcode, and upload these textures.\r\n */\nvar KTX2Container = function KTX2Container() {\n  _classCallCheck(this, KTX2Container);\n  this.vkFormat = VK_FORMAT_UNDEFINED;\n  this.typeSize = 1;\n  this.pixelWidth = 0;\n  this.pixelHeight = 0;\n  this.pixelDepth = 0;\n  this.layerCount = 0;\n  this.faceCount = 1;\n  this.supercompressionScheme = KHR_SUPERCOMPRESSION_NONE;\n  this.levels = [];\n  this.dataFormatDescriptor = [{\n    vendorId: KHR_DF_VENDORID_KHRONOS,\n    descriptorType: KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n    descriptorBlockSize: 0,\n    versionNumber: KHR_DF_VERSION,\n    colorModel: KHR_DF_MODEL_UNSPECIFIED,\n    colorPrimaries: KHR_DF_PRIMARIES_BT709,\n    transferFunction: KHR_DF_TRANSFER_SRGB,\n    flags: KHR_DF_FLAG_ALPHA_STRAIGHT,\n    texelBlockDimension: [0, 0, 0, 0],\n    bytesPlane: [0, 0, 0, 0, 0, 0, 0, 0],\n    samples: []\n  }];\n  this.keyValue = {};\n  this.globalData = null;\n};\nvar BufferReader = /*#__PURE__*/function () {\n  function BufferReader(data, byteOffset, byteLength, littleEndian) {\n    _classCallCheck(this, BufferReader);\n    this._dataView = void 0;\n    this._littleEndian = void 0;\n    this._offset = void 0;\n    this._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n    this._littleEndian = littleEndian;\n    this._offset = 0;\n  }\n  _createClass(BufferReader, [{\n    key: \"_nextUint8\",\n    value: function _nextUint8() {\n      var value = this._dataView.getUint8(this._offset);\n      this._offset += 1;\n      return value;\n    }\n  }, {\n    key: \"_nextUint16\",\n    value: function _nextUint16() {\n      var value = this._dataView.getUint16(this._offset, this._littleEndian);\n      this._offset += 2;\n      return value;\n    }\n  }, {\n    key: \"_nextUint32\",\n    value: function _nextUint32() {\n      var value = this._dataView.getUint32(this._offset, this._littleEndian);\n      this._offset += 4;\n      return value;\n    }\n  }, {\n    key: \"_nextUint64\",\n    value: function _nextUint64() {\n      var left = this._dataView.getUint32(this._offset, this._littleEndian);\n      var right = this._dataView.getUint32(this._offset + 4, this._littleEndian); // TODO(cleanup): Just test this...\n      // const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n\n      var value = left + Math.pow(2, 32) * right;\n      this._offset += 8;\n      return value;\n    }\n  }, {\n    key: \"_nextInt32\",\n    value: function _nextInt32() {\n      var value = this._dataView.getInt32(this._offset, this._littleEndian);\n      this._offset += 4;\n      return value;\n    }\n  }, {\n    key: \"_skip\",\n    value: function _skip(bytes) {\n      this._offset += bytes;\n      return this;\n    }\n  }, {\n    key: \"_scan\",\n    value: function _scan(maxByteLength, term) {\n      if (term === void 0) {\n        term = 0x00;\n      }\n      var byteOffset = this._offset;\n      var byteLength = 0;\n      while (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n        byteLength++;\n        this._offset++;\n      }\n      if (byteLength < maxByteLength) this._offset++;\n      return new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n    }\n  }]);\n  return BufferReader;\n}(); ///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\nvar KTX_WRITER = \"KTX-Parse v\" + \"0.4.5\";\nvar NUL = new Uint8Array([0x00]); ///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nvar KTX2_ID = [\n// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\nvar HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n\n/** Encodes text to an ArrayBuffer. */\nfunction encodeText(text) {\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(text);\n  }\n  return Buffer.from(text);\n}\n/** Decodes an ArrayBuffer to text. */\n\nfunction decodeText(buffer) {\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder().decode(buffer);\n  }\n  return Buffer.from(buffer).toString('utf8');\n}\n/** Concatenates N ArrayBuffers. */\n\nfunction concat(buffers) {\n  var totalByteLength = 0;\n  var _iterator = _createForOfIteratorHelper(buffers),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var buffer = _step.value;\n      totalByteLength += buffer.byteLength;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var result = new Uint8Array(totalByteLength);\n  var byteOffset = 0;\n  var _iterator2 = _createForOfIteratorHelper(buffers),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _buffer = _step2.value;\n      result.set(new Uint8Array(_buffer), byteOffset);\n      byteOffset += _buffer.byteLength;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return result;\n}\n\n/**\r\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\r\n * data. The container's mip levels and other binary data are pointers into the original file, not\r\n * copies, so the original file should not be overwritten after reading.\r\n *\r\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\r\n */\n\nfunction read(data) {\n  ///////////////////////////////////////////////////\n  // KTX 2.0 Identifier.\n  ///////////////////////////////////////////////////\n  var id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n  if (id[0] !== KTX2_ID[0] ||\n  // '´'\n  id[1] !== KTX2_ID[1] ||\n  // 'K'\n  id[2] !== KTX2_ID[2] ||\n  // 'T'\n  id[3] !== KTX2_ID[3] ||\n  // 'X'\n  id[4] !== KTX2_ID[4] ||\n  // ' '\n  id[5] !== KTX2_ID[5] ||\n  // '2'\n  id[6] !== KTX2_ID[6] ||\n  // '0'\n  id[7] !== KTX2_ID[7] ||\n  // 'ª'\n  id[8] !== KTX2_ID[8] ||\n  // '\\r'\n  id[9] !== KTX2_ID[9] ||\n  // '\\n'\n  id[10] !== KTX2_ID[10] ||\n  // '\\x1A'\n  id[11] !== KTX2_ID[11] // '\\n'\n  ) {\n    throw new Error('Missing KTX 2.0 identifier.');\n  }\n  var container = new KTX2Container(); ///////////////////////////////////////////////////\n  // Header.\n  ///////////////////////////////////////////////////\n\n  var headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n  var headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n  container.vkFormat = headerReader._nextUint32();\n  container.typeSize = headerReader._nextUint32();\n  container.pixelWidth = headerReader._nextUint32();\n  container.pixelHeight = headerReader._nextUint32();\n  container.pixelDepth = headerReader._nextUint32();\n  container.layerCount = headerReader._nextUint32();\n  container.faceCount = headerReader._nextUint32();\n  var levelCount = headerReader._nextUint32();\n  container.supercompressionScheme = headerReader._nextUint32();\n  var dfdByteOffset = headerReader._nextUint32();\n  var dfdByteLength = headerReader._nextUint32();\n  var kvdByteOffset = headerReader._nextUint32();\n  var kvdByteLength = headerReader._nextUint32();\n  var sgdByteOffset = headerReader._nextUint64();\n  var sgdByteLength = headerReader._nextUint64(); ///////////////////////////////////////////////////\n  // Level Index.\n  ///////////////////////////////////////////////////\n\n  var levelByteLength = levelCount * 3 * 8;\n  var levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n  for (var i = 0; i < levelCount; i++) {\n    container.levels.push({\n      levelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),\n      uncompressedByteLength: levelReader._nextUint64()\n    });\n  } ///////////////////////////////////////////////////\n  // Data Format Descriptor (DFD).\n  ///////////////////////////////////////////////////\n\n  var dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n  var dfd = {\n    vendorId: dfdReader._skip(4\n    /* totalSize */)._nextUint16(),\n    descriptorType: dfdReader._nextUint16(),\n    versionNumber: dfdReader._nextUint16(),\n    descriptorBlockSize: dfdReader._nextUint16(),\n    colorModel: dfdReader._nextUint8(),\n    colorPrimaries: dfdReader._nextUint8(),\n    transferFunction: dfdReader._nextUint8(),\n    flags: dfdReader._nextUint8(),\n    texelBlockDimension: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n    bytesPlane: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n    samples: []\n  };\n  var sampleStart = 6;\n  var sampleWords = 4;\n  var numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n  for (var _i = 0; _i < numSamples; _i++) {\n    var sample = {\n      bitOffset: dfdReader._nextUint16(),\n      bitLength: dfdReader._nextUint8(),\n      channelType: dfdReader._nextUint8(),\n      samplePosition: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n      sampleLower: -Infinity,\n      sampleUpper: Infinity\n    };\n    if (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n      sample.sampleLower = dfdReader._nextInt32();\n      sample.sampleUpper = dfdReader._nextInt32();\n    } else {\n      sample.sampleLower = dfdReader._nextUint32();\n      sample.sampleUpper = dfdReader._nextUint32();\n    }\n    dfd.samples[_i] = sample;\n  }\n  container.dataFormatDescriptor.length = 0;\n  container.dataFormatDescriptor.push(dfd); ///////////////////////////////////////////////////\n  // Key/Value Data (KVD).\n  ///////////////////////////////////////////////////\n\n  var kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n  while (kvdReader._offset < kvdByteLength) {\n    var keyValueByteLength = kvdReader._nextUint32();\n    var keyData = kvdReader._scan(keyValueByteLength);\n    var key = decodeText(keyData);\n    var valueData = kvdReader._scan(keyValueByteLength - keyData.byteLength);\n    container.keyValue[key] = key.match(/^ktx/i) ? decodeText(valueData) : valueData; // 4-byte alignment.\n\n    if (kvdReader._offset % 4) kvdReader._skip(4 - kvdReader._offset % 4);\n  } ///////////////////////////////////////////////////\n  // Supercompression Global Data (SGD).\n  ///////////////////////////////////////////////////\n\n  if (sgdByteLength <= 0) return container;\n  var sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n  var endpointCount = sgdReader._nextUint16();\n  var selectorCount = sgdReader._nextUint16();\n  var endpointsByteLength = sgdReader._nextUint32();\n  var selectorsByteLength = sgdReader._nextUint32();\n  var tablesByteLength = sgdReader._nextUint32();\n  var extendedByteLength = sgdReader._nextUint32();\n  var imageDescs = [];\n  for (var _i2 = 0; _i2 < levelCount; _i2++) {\n    imageDescs.push({\n      imageFlags: sgdReader._nextUint32(),\n      rgbSliceByteOffset: sgdReader._nextUint32(),\n      rgbSliceByteLength: sgdReader._nextUint32(),\n      alphaSliceByteOffset: sgdReader._nextUint32(),\n      alphaSliceByteLength: sgdReader._nextUint32()\n    });\n  }\n  var endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n  var selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n  var tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n  var extendedByteOffset = tablesByteOffset + tablesByteLength;\n  var endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n  var selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n  var tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n  var extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n  container.globalData = {\n    endpointCount: endpointCount,\n    selectorCount: selectorCount,\n    imageDescs: imageDescs,\n    endpointsData: endpointsData,\n    selectorsData: selectorsData,\n    tablesData: tablesData,\n    extendedData: extendedData\n  };\n  return container;\n}\nvar DEFAULT_OPTIONS = {\n  keepWriter: false\n};\n/**\r\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\r\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\r\n * destroyed after it is serialized.\r\n *\r\n * Options:\r\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\r\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\r\n *\r\n * @param container\r\n * @param options\r\n */\n\nfunction write(container, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  options = _objectSpread({}, DEFAULT_OPTIONS, options); ///////////////////////////////////////////////////\n  // Supercompression Global Data (SGD).\n  ///////////////////////////////////////////////////\n\n  var sgdBuffer = new ArrayBuffer(0);\n  if (container.globalData) {\n    var sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n    var sgdHeaderView = new DataView(sgdHeaderBuffer);\n    sgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n    sgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n    sgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n    sgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n    sgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n    sgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n    for (var i = 0; i < container.globalData.imageDescs.length; i++) {\n      var imageDesc = container.globalData.imageDescs[i];\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n    }\n    sgdBuffer = concat([sgdHeaderBuffer, container.globalData.endpointsData, container.globalData.selectorsData, container.globalData.tablesData, container.globalData.extendedData]);\n  } ///////////////////////////////////////////////////\n  // Key/Value Data (KVD).\n  ///////////////////////////////////////////////////\n\n  var keyValueData = [];\n  var keyValue = container.keyValue;\n  if (!options.keepWriter) {\n    keyValue = _objectSpread({}, container.keyValue, {\n      KTXwriter: KTX_WRITER\n    });\n  }\n  for (var key in keyValue) {\n    var value = keyValue[key];\n    var keyData = encodeText(key);\n    var valueData = typeof value === 'string' ? encodeText(value) : value;\n    var kvByteLength = keyData.byteLength + 1 + valueData.byteLength + 1;\n    var kvPadding = kvByteLength % 4 ? 4 - kvByteLength % 4 : 0; // align(4)\n\n    keyValueData.push(concat([new Uint32Array([kvByteLength]), keyData, NUL, valueData, NUL, new Uint8Array(kvPadding).fill(0x00) // align(4)\n    ]));\n  }\n\n  var kvdBuffer = concat(keyValueData); ///////////////////////////////////////////////////\n  // Data Format Descriptor (DFD).\n  ///////////////////////////////////////////////////\n\n  if (container.dataFormatDescriptor.length !== 1 || container.dataFormatDescriptor[0].descriptorType !== KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT) {\n    throw new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n  }\n  var dfd = container.dataFormatDescriptor[0];\n  var dfdBuffer = new ArrayBuffer(28 + dfd.samples.length * 16);\n  var dfdView = new DataView(dfdBuffer);\n  var descriptorBlockSize = 24 + dfd.samples.length * 16;\n  dfdView.setUint32(0, dfdBuffer.byteLength, true);\n  dfdView.setUint16(4, dfd.vendorId, true);\n  dfdView.setUint16(6, dfd.descriptorType, true);\n  dfdView.setUint16(8, dfd.versionNumber, true);\n  dfdView.setUint16(10, descriptorBlockSize, true);\n  dfdView.setUint8(12, dfd.colorModel);\n  dfdView.setUint8(13, dfd.colorPrimaries);\n  dfdView.setUint8(14, dfd.transferFunction);\n  dfdView.setUint8(15, dfd.flags);\n  if (!Array.isArray(dfd.texelBlockDimension)) {\n    throw new Error('texelBlockDimension is now an array. For dimensionality `d`, set `d - 1`.');\n  }\n  dfdView.setUint8(16, dfd.texelBlockDimension[0]);\n  dfdView.setUint8(17, dfd.texelBlockDimension[1]);\n  dfdView.setUint8(18, dfd.texelBlockDimension[2]);\n  dfdView.setUint8(19, dfd.texelBlockDimension[3]);\n  for (var _i3 = 0; _i3 < 8; _i3++) {\n    dfdView.setUint8(20 + _i3, dfd.bytesPlane[_i3]);\n  }\n  for (var _i4 = 0; _i4 < dfd.samples.length; _i4++) {\n    var sample = dfd.samples[_i4];\n    var sampleByteOffset = 28 + _i4 * 16;\n    if (sample.channelID) {\n      throw new Error('channelID has been renamed to channelType.');\n    }\n    dfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n    dfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n    dfdView.setUint8(sampleByteOffset + 3, sample.channelType);\n    dfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n    dfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n    dfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n    dfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n    if (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n      dfdView.setInt32(sampleByteOffset + 8, sample.sampleLower, true);\n      dfdView.setInt32(sampleByteOffset + 12, sample.sampleUpper, true);\n    } else {\n      dfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n      dfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n    }\n  } ///////////////////////////////////////////////////\n  // Data alignment.\n  ///////////////////////////////////////////////////\n\n  var dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n  var kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n  var sgdByteOffset = sgdBuffer.byteLength > 0 ? kvdByteOffset + kvdBuffer.byteLength : 0;\n  if (sgdByteOffset % 8) sgdByteOffset += 8 - sgdByteOffset % 8; // align(8)\n  ///////////////////////////////////////////////////\n  // Level Index.\n  ///////////////////////////////////////////////////\n\n  var levelData = [];\n  var levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n  var levelDataByteOffset = (sgdByteOffset || kvdByteOffset + kvdBuffer.byteLength) + sgdBuffer.byteLength;\n  for (var _i5 = 0; _i5 < container.levels.length; _i5++) {\n    var level = container.levels[_i5];\n    levelData.push(level.levelData);\n    levelIndex.setBigUint64(_i5 * 24 + 0, BigInt(levelDataByteOffset), true);\n    levelIndex.setBigUint64(_i5 * 24 + 8, BigInt(level.levelData.byteLength), true);\n    levelIndex.setBigUint64(_i5 * 24 + 16, BigInt(level.uncompressedByteLength), true);\n    levelDataByteOffset += level.levelData.byteLength;\n  } ///////////////////////////////////////////////////\n  // Header.\n  ///////////////////////////////////////////////////\n\n  var headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n  var headerView = new DataView(headerBuffer);\n  headerView.setUint32(0, container.vkFormat, true);\n  headerView.setUint32(4, container.typeSize, true);\n  headerView.setUint32(8, container.pixelWidth, true);\n  headerView.setUint32(12, container.pixelHeight, true);\n  headerView.setUint32(16, container.pixelDepth, true);\n  headerView.setUint32(20, container.layerCount, true);\n  headerView.setUint32(24, container.faceCount, true);\n  headerView.setUint32(28, container.levels.length, true);\n  headerView.setUint32(32, container.supercompressionScheme, true);\n  headerView.setUint32(36, dfdByteOffset, true);\n  headerView.setUint32(40, dfdBuffer.byteLength, true);\n  headerView.setUint32(44, kvdByteOffset, true);\n  headerView.setUint32(48, kvdBuffer.byteLength, true);\n  headerView.setBigUint64(52, BigInt(sgdBuffer.byteLength > 0 ? sgdByteOffset : 0), true);\n  headerView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true); ///////////////////////////////////////////////////\n  // Compose.\n  ///////////////////////////////////////////////////\n\n  return new Uint8Array(concat([new Uint8Array(KTX2_ID).buffer, headerBuffer, levelIndex.buffer, dfdBuffer, kvdBuffer, sgdByteOffset > 0 ? new ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)) // align(8)\n  : new ArrayBuffer(0), sgdBuffer].concat(levelData)));\n}\nexport { KHR_DF_CHANNEL_RGBSDA_ALPHA, KHR_DF_CHANNEL_RGBSDA_BLUE, KHR_DF_CHANNEL_RGBSDA_DEPTH, KHR_DF_CHANNEL_RGBSDA_GREEN, KHR_DF_CHANNEL_RGBSDA_RED, KHR_DF_CHANNEL_RGBSDA_STENCIL, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, KHR_DF_FLAG_ALPHA_STRAIGHT, KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT, KHR_DF_MODEL_ASTC, KHR_DF_MODEL_ETC1, KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_ETC2, KHR_DF_MODEL_RGBSDA, KHR_DF_MODEL_UASTC, KHR_DF_MODEL_UNSPECIFIED, KHR_DF_PRIMARIES_ACES, KHR_DF_PRIMARIES_ACESCC, KHR_DF_PRIMARIES_ADOBERGB, KHR_DF_PRIMARIES_BT2020, KHR_DF_PRIMARIES_BT601_EBU, KHR_DF_PRIMARIES_BT601_SMPTE, KHR_DF_PRIMARIES_BT709, KHR_DF_PRIMARIES_CIEXYZ, KHR_DF_PRIMARIES_DISPLAYP3, KHR_DF_PRIMARIES_NTSC1953, KHR_DF_PRIMARIES_PAL525, KHR_DF_PRIMARIES_UNSPECIFIED, KHR_DF_SAMPLE_DATATYPE_EXPONENT, KHR_DF_SAMPLE_DATATYPE_FLOAT, KHR_DF_SAMPLE_DATATYPE_LINEAR, KHR_DF_SAMPLE_DATATYPE_SIGNED, KHR_DF_TRANSFER_ACESCC, KHR_DF_TRANSFER_ACESCCT, KHR_DF_TRANSFER_ADOBERGB, KHR_DF_TRANSFER_BT1886, KHR_DF_TRANSFER_DCIP3, KHR_DF_TRANSFER_HLG_EOTF, KHR_DF_TRANSFER_HLG_OETF, KHR_DF_TRANSFER_ITU, KHR_DF_TRANSFER_LINEAR, KHR_DF_TRANSFER_NTSC, KHR_DF_TRANSFER_PAL625_EOTF, KHR_DF_TRANSFER_PAL_OETF, KHR_DF_TRANSFER_PQ_EOTF, KHR_DF_TRANSFER_PQ_OETF, KHR_DF_TRANSFER_SLOG, KHR_DF_TRANSFER_SLOG2, KHR_DF_TRANSFER_SRGB, KHR_DF_TRANSFER_ST240, KHR_DF_TRANSFER_UNSPECIFIED, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, KHR_SUPERCOMPRESSION_BASISLZ, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZLIB, KHR_SUPERCOMPRESSION_ZSTD, KTX2Container, VK_FORMAT_A1R5G5B5_UNORM_PACK16, VK_FORMAT_A2B10G10R10_SINT_PACK32, VK_FORMAT_A2B10G10R10_SNORM_PACK32, VK_FORMAT_A2B10G10R10_UINT_PACK32, VK_FORMAT_A2B10G10R10_UNORM_PACK32, VK_FORMAT_A2R10G10B10_SINT_PACK32, VK_FORMAT_A2R10G10B10_SNORM_PACK32, VK_FORMAT_A2R10G10B10_UINT_PACK32, VK_FORMAT_A2R10G10B10_UNORM_PACK32, VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT, VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT, VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x10_SRGB_BLOCK, VK_FORMAT_ASTC_10x10_UNORM_BLOCK, VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x5_SRGB_BLOCK, VK_FORMAT_ASTC_10x5_UNORM_BLOCK, VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x6_SRGB_BLOCK, VK_FORMAT_ASTC_10x6_UNORM_BLOCK, VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x8_SRGB_BLOCK, VK_FORMAT_ASTC_10x8_UNORM_BLOCK, VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_12x10_SRGB_BLOCK, VK_FORMAT_ASTC_12x10_UNORM_BLOCK, VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_12x12_SRGB_BLOCK, VK_FORMAT_ASTC_12x12_UNORM_BLOCK, VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_4x4_SRGB_BLOCK, VK_FORMAT_ASTC_4x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_5x4_SRGB_BLOCK, VK_FORMAT_ASTC_5x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_5x5_SRGB_BLOCK, VK_FORMAT_ASTC_5x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_6x5_SRGB_BLOCK, VK_FORMAT_ASTC_6x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x5_SRGB_BLOCK, VK_FORMAT_ASTC_8x5_UNORM_BLOCK, VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x6_SRGB_BLOCK, VK_FORMAT_ASTC_8x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x8_SRGB_BLOCK, VK_FORMAT_ASTC_8x8_UNORM_BLOCK, VK_FORMAT_B10G11R11_UFLOAT_PACK32, VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, VK_FORMAT_B4G4R4A4_UNORM_PACK16, VK_FORMAT_B5G5R5A1_UNORM_PACK16, VK_FORMAT_B5G6R5_UNORM_PACK16, VK_FORMAT_B8G8R8A8_SINT, VK_FORMAT_B8G8R8A8_SNORM, VK_FORMAT_B8G8R8A8_SRGB, VK_FORMAT_B8G8R8A8_UINT, VK_FORMAT_B8G8R8A8_UNORM, VK_FORMAT_B8G8R8_SINT, VK_FORMAT_B8G8R8_SNORM, VK_FORMAT_B8G8R8_SRGB, VK_FORMAT_B8G8R8_UINT, VK_FORMAT_B8G8R8_UNORM, VK_FORMAT_BC1_RGBA_SRGB_BLOCK, VK_FORMAT_BC1_RGBA_UNORM_BLOCK, VK_FORMAT_BC1_RGB_SRGB_BLOCK, VK_FORMAT_BC1_RGB_UNORM_BLOCK, VK_FORMAT_BC2_SRGB_BLOCK, VK_FORMAT_BC2_UNORM_BLOCK, VK_FORMAT_BC3_SRGB_BLOCK, VK_FORMAT_BC3_UNORM_BLOCK, VK_FORMAT_BC4_SNORM_BLOCK, VK_FORMAT_BC4_UNORM_BLOCK, VK_FORMAT_BC5_SNORM_BLOCK, VK_FORMAT_BC5_UNORM_BLOCK, VK_FORMAT_BC6H_SFLOAT_BLOCK, VK_FORMAT_BC6H_UFLOAT_BLOCK, VK_FORMAT_BC7_SRGB_BLOCK, VK_FORMAT_BC7_UNORM_BLOCK, VK_FORMAT_D16_UNORM, VK_FORMAT_D16_UNORM_S8_UINT, VK_FORMAT_D24_UNORM_S8_UINT, VK_FORMAT_D32_SFLOAT, VK_FORMAT_D32_SFLOAT_S8_UINT, VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, VK_FORMAT_EAC_R11G11_SNORM_BLOCK, VK_FORMAT_EAC_R11G11_UNORM_BLOCK, VK_FORMAT_EAC_R11_SNORM_BLOCK, VK_FORMAT_EAC_R11_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16, VK_FORMAT_R10X6G10X6_UNORM_2PACK16, VK_FORMAT_R10X6_UNORM_PACK16, VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16, VK_FORMAT_R12X4G12X4_UNORM_2PACK16, VK_FORMAT_R12X4_UNORM_PACK16, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R16G16B16A16_SINT, VK_FORMAT_R16G16B16A16_SNORM, VK_FORMAT_R16G16B16A16_UINT, VK_FORMAT_R16G16B16A16_UNORM, VK_FORMAT_R16G16B16_SFLOAT, VK_FORMAT_R16G16B16_SINT, VK_FORMAT_R16G16B16_SNORM, VK_FORMAT_R16G16B16_UINT, VK_FORMAT_R16G16B16_UNORM, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16G16_SINT, VK_FORMAT_R16G16_SNORM, VK_FORMAT_R16G16_UINT, VK_FORMAT_R16G16_UNORM, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R16_SINT, VK_FORMAT_R16_SNORM, VK_FORMAT_R16_UINT, VK_FORMAT_R16_UNORM, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R32G32B32A32_SINT, VK_FORMAT_R32G32B32A32_UINT, VK_FORMAT_R32G32B32_SFLOAT, VK_FORMAT_R32G32B32_SINT, VK_FORMAT_R32G32B32_UINT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R32G32_SINT, VK_FORMAT_R32G32_UINT, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R32_SINT, VK_FORMAT_R32_UINT, VK_FORMAT_R4G4B4A4_UNORM_PACK16, VK_FORMAT_R4G4_UNORM_PACK8, VK_FORMAT_R5G5B5A1_UNORM_PACK16, VK_FORMAT_R5G6B5_UNORM_PACK16, VK_FORMAT_R64G64B64A64_SFLOAT, VK_FORMAT_R64G64B64A64_SINT, VK_FORMAT_R64G64B64A64_UINT, VK_FORMAT_R64G64B64_SFLOAT, VK_FORMAT_R64G64B64_SINT, VK_FORMAT_R64G64B64_UINT, VK_FORMAT_R64G64_SFLOAT, VK_FORMAT_R64G64_SINT, VK_FORMAT_R64G64_UINT, VK_FORMAT_R64_SFLOAT, VK_FORMAT_R64_SINT, VK_FORMAT_R64_UINT, VK_FORMAT_R8G8B8A8_SINT, VK_FORMAT_R8G8B8A8_SNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_UINT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8_SINT, VK_FORMAT_R8G8B8_SNORM, VK_FORMAT_R8G8B8_SRGB, VK_FORMAT_R8G8B8_UINT, VK_FORMAT_R8G8B8_UNORM, VK_FORMAT_R8G8_SINT, VK_FORMAT_R8G8_SNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R8G8_UINT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8_SINT, VK_FORMAT_R8_SNORM, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UINT, VK_FORMAT_R8_UNORM, VK_FORMAT_S8_UINT, VK_FORMAT_UNDEFINED, VK_FORMAT_X8_D24_UNORM_PACK32, read, write };","map":null,"metadata":{},"sourceType":"module"}