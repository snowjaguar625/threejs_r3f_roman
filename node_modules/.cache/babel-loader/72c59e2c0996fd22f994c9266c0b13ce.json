{"ast":null,"code":"var DigitalGlitch = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    //diffuse texture\n    tDisp: {\n      value: null\n    },\n    //displacement texture for digital glitch squares\n    byp: {\n      value: 0\n    },\n    //apply the glitch ?\n    amount: {\n      value: 0.08\n    },\n    angle: {\n      value: 0.02\n    },\n    seed: {\n      value: 0.02\n    },\n    seed_x: {\n      value: 0.02\n    },\n    //-1,1\n    seed_y: {\n      value: 0.02\n    },\n    //-1,1\n    distortion_x: {\n      value: 0.5\n    },\n    distortion_y: {\n      value: 0.6\n    },\n    col_s: {\n      value: 0.05\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform int byp;',\n  //should we apply the glitch ?\n  'uniform sampler2D tDiffuse;', 'uniform sampler2D tDisp;', 'uniform float amount;', 'uniform float angle;', 'uniform float seed;', 'uniform float seed_x;', 'uniform float seed_y;', 'uniform float distortion_x;', 'uniform float distortion_y;', 'uniform float col_s;', 'varying vec2 vUv;', 'float rand(vec2 co){', '\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);', '}', 'void main() {', '\tif(byp<1) {', '\t\tvec2 p = vUv;', '\t\tfloat xs = floor(gl_FragCoord.x / 0.5);', '\t\tfloat ys = floor(gl_FragCoord.y / 0.5);',\n  //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n  '\t\tvec4 normal = texture2D (tDisp, p*seed*seed);', '\t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {', '\t\t\tif(seed_x>0.){', '\t\t\t\tp.y = 1. - (p.y + distortion_y);', '\t\t\t}', '\t\t\telse {', '\t\t\t\tp.y = distortion_y;', '\t\t\t}', '\t\t}', '\t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {', '\t\t\tif(seed_y>0.){', '\t\t\t\tp.x=distortion_x;', '\t\t\t}', '\t\t\telse {', '\t\t\t\tp.x = 1. - (p.x + distortion_x);', '\t\t\t}', '\t\t}', '\t\tp.x+=normal.x*seed_x*(seed/5.);', '\t\tp.y+=normal.y*seed_y*(seed/5.);',\n  //base from RGB shift shader\n  '\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));', '\t\tvec4 cr = texture2D(tDiffuse, p + offset);', '\t\tvec4 cga = texture2D(tDiffuse, p);', '\t\tvec4 cb = texture2D(tDiffuse, p - offset);', '\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);',\n  //add noise\n  '\t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);', '\t\tgl_FragColor = gl_FragColor+ snow;', '\t}', '\telse {', '\t\tgl_FragColor=texture2D (tDiffuse, vUv);', '\t}', '}'].join('\\n')\n};\nexport { DigitalGlitch };","map":null,"metadata":{},"sourceType":"module"}