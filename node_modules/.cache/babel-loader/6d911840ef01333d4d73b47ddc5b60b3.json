{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearEncoding, LinearFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\nvar RGBELoader = /*#__PURE__*/function (_DataTextureLoader) {\n  _inherits(RGBELoader, _DataTextureLoader);\n  function RGBELoader(manager) {\n    var _this;\n    _classCallCheck(this, RGBELoader);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RGBELoader).call(this, manager));\n    _this.type = HalfFloatType;\n    return _this;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  _createClass(RGBELoader, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var /* return codes for rgbe routines */\n        //RGBE_RETURN_SUCCESS = 0,\n        RGBE_RETURN_FAILURE = -1,\n        /* default error routine.  change this to change error handling */\n        rgbe_read_error = 1,\n        rgbe_write_error = 2,\n        rgbe_format_error = 3,\n        rgbe_memory_error = 4,\n        rgbe_error = function rgbe_error(rgbe_error_code, msg) {\n          switch (rgbe_error_code) {\n            case rgbe_read_error:\n              console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n              break;\n            case rgbe_write_error:\n              console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n              break;\n            case rgbe_format_error:\n              console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n              break;\n            default:\n            case rgbe_memory_error:\n              console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n          }\n          return RGBE_RETURN_FAILURE;\n        },\n        /* offsets to red, green, and blue components in a data (float) pixel */\n        //RGBE_DATA_RED = 0,\n        //RGBE_DATA_GREEN = 1,\n        //RGBE_DATA_BLUE = 2,\n\n        /* number of floats per pixel, use 4 since stored in rgba image format */\n        //RGBE_DATA_SIZE = 4,\n\n        /* flags indicating which fields in an rgbe_header_info are valid */\n        RGBE_VALID_PROGRAMTYPE = 1,\n        RGBE_VALID_FORMAT = 2,\n        RGBE_VALID_DIMENSIONS = 4,\n        NEWLINE = '\\n',\n        fgets = function fgets(buffer, lineLimit, consume) {\n          var chunkSize = 128;\n          lineLimit = !lineLimit ? 1024 : lineLimit;\n          var p = buffer.pos,\n            i = -1,\n            len = 0,\n            s = '',\n            chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n          while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n            s += chunk;\n            len += chunk.length;\n            p += chunkSize;\n            chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n          }\n          if (-1 < i) {\n            /*for (i=l-1; i>=0; i--) {\n            byteCode = m.charCodeAt(i);\n            if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n            else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n            if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n            }*/\n            if (false !== consume) buffer.pos += len + i + 1;\n            return s + chunk.slice(0, i);\n          }\n          return false;\n        },\n        /* minimal header reading.  modify if you want to parse more information */\n        RGBE_ReadHeader = function RGBE_ReadHeader(buffer) {\n          // regexes to parse header info fields\n          var magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n            header = {\n              valid: 0\n              /* indicate which fields are valid */,\n\n              string: ''\n              /* the actual header string */,\n\n              comments: ''\n              /* comments found in header */,\n\n              programtype: 'RGBE'\n              /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */,\n\n              format: ''\n              /* RGBE format, default 32-bit_rle_rgbe */,\n\n              gamma: 1.0\n              /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */,\n\n              exposure: 1.0\n              /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */,\n\n              width: 0,\n              height: 0\n              /* image dimensions, width/height */\n            };\n\n          var line, match;\n          if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n            return rgbe_error(rgbe_read_error, 'no header found');\n          }\n          /* if you want to require the magic token then uncomment the next line */\n\n          if (!(match = line.match(magic_token_re))) {\n            return rgbe_error(rgbe_format_error, 'bad initial token');\n          }\n          header.valid |= RGBE_VALID_PROGRAMTYPE;\n          header.programtype = match[1];\n          header.string += line + '\\n';\n          while (true) {\n            line = fgets(buffer);\n            if (false === line) break;\n            header.string += line + '\\n';\n            if ('#' === line.charAt(0)) {\n              header.comments += line + '\\n';\n              continue; // comment line\n            }\n\n            if (match = line.match(gamma_re)) {\n              header.gamma = parseFloat(match[1]);\n            }\n            if (match = line.match(exposure_re)) {\n              header.exposure = parseFloat(match[1]);\n            }\n            if (match = line.match(format_re)) {\n              header.valid |= RGBE_VALID_FORMAT;\n              header.format = match[1]; //'32-bit_rle_rgbe';\n            }\n\n            if (match = line.match(dimensions_re)) {\n              header.valid |= RGBE_VALID_DIMENSIONS;\n              header.height = parseInt(match[1], 10);\n              header.width = parseInt(match[2], 10);\n            }\n            if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n          }\n          if (!(header.valid & RGBE_VALID_FORMAT)) {\n            return rgbe_error(rgbe_format_error, 'missing format specifier');\n          }\n          if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n            return rgbe_error(rgbe_format_error, 'missing image size specifier');\n          }\n          return header;\n        },\n        RGBE_ReadPixels_RLE = function RGBE_ReadPixels_RLE(buffer, w, h) {\n          var scanline_width = w;\n          if (\n          // run length encoding is not allowed so read flat\n          scanline_width < 8 || scanline_width > 0x7fff ||\n          // this file is not run length encoded\n          2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n            // return the flat buffer\n            return new Uint8Array(buffer);\n          }\n          if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n            return rgbe_error(rgbe_format_error, 'wrong scanline width');\n          }\n          var data_rgba = new Uint8Array(4 * w * h);\n          if (!data_rgba.length) {\n            return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n          }\n          var offset = 0,\n            pos = 0;\n          var ptr_end = 4 * scanline_width;\n          var rgbeStart = new Uint8Array(4);\n          var scanline_buffer = new Uint8Array(ptr_end);\n          var num_scanlines = h; // read in each successive scanline\n\n          while (num_scanlines > 0 && pos < buffer.byteLength) {\n            if (pos + 4 > buffer.byteLength) {\n              return rgbe_error(rgbe_read_error);\n            }\n            rgbeStart[0] = buffer[pos++];\n            rgbeStart[1] = buffer[pos++];\n            rgbeStart[2] = buffer[pos++];\n            rgbeStart[3] = buffer[pos++];\n            if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n              return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n            } // read each of the four channels for the scanline into the buffer\n            // first red, then green, then blue, then exponent\n\n            var ptr = 0,\n              count = void 0;\n            while (ptr < ptr_end && pos < buffer.byteLength) {\n              count = buffer[pos++];\n              var isEncodedRun = count > 128;\n              if (isEncodedRun) count -= 128;\n              if (0 === count || ptr + count > ptr_end) {\n                return rgbe_error(rgbe_format_error, 'bad scanline data');\n              }\n              if (isEncodedRun) {\n                // a (encoded) run of the same value\n                var byteValue = buffer[pos++];\n                for (var i = 0; i < count; i++) {\n                  scanline_buffer[ptr++] = byteValue;\n                } //ptr += count;\n              } else {\n                // a literal-run\n                scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n                ptr += count;\n                pos += count;\n              }\n            } // now convert data from buffer into rgba\n            // first red, then green, then blue, then exponent (alpha)\n\n            var l = scanline_width; //scanline_buffer.byteLength;\n\n            for (var _i = 0; _i < l; _i++) {\n              var off = 0;\n              data_rgba[offset] = scanline_buffer[_i + off];\n              off += scanline_width; //1;\n\n              data_rgba[offset + 1] = scanline_buffer[_i + off];\n              off += scanline_width; //1;\n\n              data_rgba[offset + 2] = scanline_buffer[_i + off];\n              off += scanline_width; //1;\n\n              data_rgba[offset + 3] = scanline_buffer[_i + off];\n              offset += 4;\n            }\n            num_scanlines--;\n          }\n          return data_rgba;\n        };\n      var RGBEByteToRGBFloat = function RGBEByteToRGBFloat(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2.0, e - 128.0) / 255.0;\n        destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n        destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n        destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n        destArray[destOffset + 3] = 1;\n      };\n      var RGBEByteToRGBHalf = function RGBEByteToRGBHalf(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2.0, e - 128.0) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n        destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n        destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n        destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n        destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n      };\n      var byteArray = new Uint8Array(buffer);\n      byteArray.pos = 0;\n      var rgbe_header_info = RGBE_ReadHeader(byteArray);\n      if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n        var w = rgbe_header_info.width,\n          h = rgbe_header_info.height,\n          image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n        if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n          var data, type;\n          var numElements;\n          switch (this.type) {\n            case FloatType:\n              numElements = image_rgba_data.length / 4;\n              var floatArray = new Float32Array(numElements * 4);\n              for (var j = 0; j < numElements; j++) {\n                RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n              }\n              data = floatArray;\n              type = FloatType;\n              break;\n            case HalfFloatType:\n              numElements = image_rgba_data.length / 4;\n              var halfArray = new Uint16Array(numElements * 4);\n              for (var _j = 0; _j < numElements; _j++) {\n                RGBEByteToRGBHalf(image_rgba_data, _j * 4, halfArray, _j * 4);\n              }\n              data = halfArray;\n              type = HalfFloatType;\n              break;\n            default:\n              console.error('THREE.RGBELoader: unsupported type: ', this.type);\n              break;\n          }\n          return {\n            width: w,\n            height: h,\n            data: data,\n            header: rgbe_header_info.string,\n            gamma: rgbe_header_info.gamma,\n            exposure: rgbe_header_info.exposure,\n            type: type\n          };\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      function onLoadCallback(texture, texData) {\n        switch (texture.type) {\n          case FloatType:\n          case HalfFloatType:\n            texture.encoding = LinearEncoding;\n            texture.minFilter = LinearFilter;\n            texture.magFilter = LinearFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = true;\n            break;\n        }\n        if (onLoad) onLoad(texture, texData);\n      }\n      return _get(_getPrototypeOf(RGBELoader.prototype), \"load\", this).call(this, url, onLoadCallback, onProgress, onError);\n    }\n  }]);\n  return RGBELoader;\n}(DataTextureLoader);\nexport { RGBELoader };","map":null,"metadata":{},"sourceType":"module"}