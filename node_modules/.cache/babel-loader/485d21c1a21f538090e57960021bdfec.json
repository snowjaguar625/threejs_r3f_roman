{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Matrix4, Mesh, MeshBasicMaterial } from 'three';\n\n/**\n * A shadow Mesh that follows a shadow-casting Mesh in the scene, but is confined to a single plane.\n */\n\nvar _shadowMatrix = new Matrix4();\nvar ShadowMesh = /*#__PURE__*/function (_Mesh) {\n  _inherits(ShadowMesh, _Mesh);\n  function ShadowMesh(mesh) {\n    var _this;\n    _classCallCheck(this, ShadowMesh);\n    var shadowMaterial = new MeshBasicMaterial({\n      color: 0x000000,\n      transparent: true,\n      opacity: 0.6,\n      depthWrite: false\n    });\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ShadowMesh).call(this, mesh.geometry, shadowMaterial));\n    _this.meshMatrix = mesh.matrixWorld;\n    _this.frustumCulled = false;\n    _this.matrixAutoUpdate = false;\n    return _this;\n  }\n  _createClass(ShadowMesh, [{\n    key: \"update\",\n    value: function update(plane, lightPosition4D) {\n      // based on https://www.opengl.org/archives/resources/features/StencilTalk/tsld021.htm\n      var dot = plane.normal.x * lightPosition4D.x + plane.normal.y * lightPosition4D.y + plane.normal.z * lightPosition4D.z + -plane.constant * lightPosition4D.w;\n      var sme = _shadowMatrix.elements;\n      sme[0] = dot - lightPosition4D.x * plane.normal.x;\n      sme[4] = -lightPosition4D.x * plane.normal.y;\n      sme[8] = -lightPosition4D.x * plane.normal.z;\n      sme[12] = -lightPosition4D.x * -plane.constant;\n      sme[1] = -lightPosition4D.y * plane.normal.x;\n      sme[5] = dot - lightPosition4D.y * plane.normal.y;\n      sme[9] = -lightPosition4D.y * plane.normal.z;\n      sme[13] = -lightPosition4D.y * -plane.constant;\n      sme[2] = -lightPosition4D.z * plane.normal.x;\n      sme[6] = -lightPosition4D.z * plane.normal.y;\n      sme[10] = dot - lightPosition4D.z * plane.normal.z;\n      sme[14] = -lightPosition4D.z * -plane.constant;\n      sme[3] = -lightPosition4D.w * plane.normal.x;\n      sme[7] = -lightPosition4D.w * plane.normal.y;\n      sme[11] = -lightPosition4D.w * plane.normal.z;\n      sme[15] = dot - lightPosition4D.w * -plane.constant;\n      this.matrix.multiplyMatrices(_shadowMatrix, this.meshMatrix);\n    }\n  }]);\n  return ShadowMesh;\n}(Mesh);\nShadowMesh.prototype.isShadowMesh = true;\nexport { ShadowMesh };","map":null,"metadata":{},"sourceType":"module"}