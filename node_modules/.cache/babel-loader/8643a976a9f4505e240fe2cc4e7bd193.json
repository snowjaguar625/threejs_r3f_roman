{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { DataTextureLoader, LinearMipmapLinearFilter } from 'three';\nvar TGALoader = /*#__PURE__*/function (_DataTextureLoader) {\n  _inherits(TGALoader, _DataTextureLoader);\n  function TGALoader(manager) {\n    _classCallCheck(this, TGALoader);\n    return _possibleConstructorReturn(this, _getPrototypeOf(TGALoader).call(this, manager));\n  }\n  _createClass(TGALoader, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      // reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n      function tgaCheckHeader(header) {\n        switch (header.image_type) {\n          // check indexed type\n          case TGA_TYPE_INDEXED:\n          case TGA_TYPE_RLE_INDEXED:\n            if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n              console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n            }\n            break;\n          // check colormap type\n\n          case TGA_TYPE_RGB:\n          case TGA_TYPE_GREY:\n          case TGA_TYPE_RLE_RGB:\n          case TGA_TYPE_RLE_GREY:\n            if (header.colormap_type) {\n              console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n            }\n            break;\n          // What the need of a file without data ?\n\n          case TGA_TYPE_NO_DATA:\n            console.error('THREE.TGALoader: No data.');\n          // Invalid type ?\n\n          default:\n            console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n        } // check image width and height\n\n        if (header.width <= 0 || header.height <= 0) {\n          console.error('THREE.TGALoader: Invalid image size.');\n        } // check image pixel size\n\n        if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n          console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n        }\n      } // parse tga image buffer\n\n      function tgaParse(use_rle, use_pal, header, offset, data) {\n        var pixel_data, palettes;\n        var pixel_size = header.pixel_size >> 3;\n        var pixel_total = header.width * header.height * pixel_size; // read palettes\n\n        if (use_pal) {\n          palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n        } // read RLE\n\n        if (use_rle) {\n          pixel_data = new Uint8Array(pixel_total);\n          var c, count, i;\n          var shift = 0;\n          var pixels = new Uint8Array(pixel_size);\n          while (shift < pixel_total) {\n            c = data[offset++];\n            count = (c & 0x7f) + 1; // RLE pixels\n\n            if (c & 0x80) {\n              // bind pixel tmp array\n              for (i = 0; i < pixel_size; ++i) {\n                pixels[i] = data[offset++];\n              } // copy pixel array\n\n              for (i = 0; i < count; ++i) {\n                pixel_data.set(pixels, shift + i * pixel_size);\n              }\n              shift += pixel_size * count;\n            } else {\n              // raw pixels\n              count *= pixel_size;\n              for (i = 0; i < count; ++i) {\n                pixel_data[shift + i] = data[offset++];\n              }\n              shift += count;\n            }\n          }\n        } else {\n          // raw pixels\n          pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n        }\n        return {\n          pixel_data: pixel_data,\n          palettes: palettes\n        };\n      }\n      function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n        var colormap = palettes;\n        var color,\n          i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i++) {\n            color = image[i];\n            imageData[(x + width * y) * 4 + 3] = 255;\n            imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n            imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n            imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n          }\n        }\n        return imageData;\n      }\n      function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n        var color,\n          i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i += 2) {\n            color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\n\n            imageData[(x + width * y) * 4 + 0] = (color & 0x7c00) >> 7;\n            imageData[(x + width * y) * 4 + 1] = (color & 0x03e0) >> 2;\n            imageData[(x + width * y) * 4 + 2] = (color & 0x001f) >> 3;\n            imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n          }\n        }\n        return imageData;\n      }\n      function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n        var i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i += 3) {\n            imageData[(x + width * y) * 4 + 3] = 255;\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\n            imageData[(x + width * y) * 4 + 1] = image[i + 1];\n            imageData[(x + width * y) * 4 + 0] = image[i + 2];\n          }\n        }\n        return imageData;\n      }\n      function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n        var i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i += 4) {\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\n            imageData[(x + width * y) * 4 + 1] = image[i + 1];\n            imageData[(x + width * y) * 4 + 0] = image[i + 2];\n            imageData[(x + width * y) * 4 + 3] = image[i + 3];\n          }\n        }\n        return imageData;\n      }\n      function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n        var color,\n          i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i++) {\n            color = image[i];\n            imageData[(x + width * y) * 4 + 0] = color;\n            imageData[(x + width * y) * 4 + 1] = color;\n            imageData[(x + width * y) * 4 + 2] = color;\n            imageData[(x + width * y) * 4 + 3] = 255;\n          }\n        }\n        return imageData;\n      }\n      function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n        var i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i += 2) {\n            imageData[(x + width * y) * 4 + 0] = image[i + 0];\n            imageData[(x + width * y) * 4 + 1] = image[i + 0];\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\n            imageData[(x + width * y) * 4 + 3] = image[i + 1];\n          }\n        }\n        return imageData;\n      }\n      function getTgaRGBA(data, width, height, image, palette) {\n        var x_start, y_start, x_step, y_step, x_end, y_end;\n        switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n          default:\n          case TGA_ORIGIN_UL:\n            x_start = 0;\n            x_step = 1;\n            x_end = width;\n            y_start = 0;\n            y_step = 1;\n            y_end = height;\n            break;\n          case TGA_ORIGIN_BL:\n            x_start = 0;\n            x_step = 1;\n            x_end = width;\n            y_start = height - 1;\n            y_step = -1;\n            y_end = -1;\n            break;\n          case TGA_ORIGIN_UR:\n            x_start = width - 1;\n            x_step = -1;\n            x_end = -1;\n            y_start = 0;\n            y_step = 1;\n            y_end = height;\n            break;\n          case TGA_ORIGIN_BR:\n            x_start = width - 1;\n            x_step = -1;\n            x_end = -1;\n            y_start = height - 1;\n            y_step = -1;\n            y_end = -1;\n            break;\n        }\n        if (use_grey) {\n          switch (header.pixel_size) {\n            case 8:\n              tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n              break;\n            case 16:\n              tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n              break;\n            default:\n              console.error('THREE.TGALoader: Format not supported.');\n              break;\n          }\n        } else {\n          switch (header.pixel_size) {\n            case 8:\n              tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n              break;\n            case 16:\n              tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n              break;\n            case 24:\n              tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n              break;\n            case 32:\n              tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n              break;\n            default:\n              console.error('THREE.TGALoader: Format not supported.');\n              break;\n          }\n        } // Load image data according to specific method\n        // let func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n        // func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\n        return data;\n      } // TGA constants\n\n      var TGA_TYPE_NO_DATA = 0,\n        TGA_TYPE_INDEXED = 1,\n        TGA_TYPE_RGB = 2,\n        TGA_TYPE_GREY = 3,\n        TGA_TYPE_RLE_INDEXED = 9,\n        TGA_TYPE_RLE_RGB = 10,\n        TGA_TYPE_RLE_GREY = 11,\n        TGA_ORIGIN_MASK = 0x30,\n        TGA_ORIGIN_SHIFT = 0x04,\n        TGA_ORIGIN_BL = 0x00,\n        TGA_ORIGIN_BR = 0x01,\n        TGA_ORIGIN_UL = 0x02,\n        TGA_ORIGIN_UR = 0x03;\n      if (buffer.length < 19) console.error('THREE.TGALoader: Not enough data to contain header.');\n      var offset = 0;\n      var content = new Uint8Array(buffer),\n        header = {\n          id_length: content[offset++],\n          colormap_type: content[offset++],\n          image_type: content[offset++],\n          colormap_index: content[offset++] | content[offset++] << 8,\n          colormap_length: content[offset++] | content[offset++] << 8,\n          colormap_size: content[offset++],\n          origin: [content[offset++] | content[offset++] << 8, content[offset++] | content[offset++] << 8],\n          width: content[offset++] | content[offset++] << 8,\n          height: content[offset++] | content[offset++] << 8,\n          pixel_size: content[offset++],\n          flags: content[offset++]\n        }; // check tga if it is valid format\n\n      tgaCheckHeader(header);\n      if (header.id_length + offset > buffer.length) {\n        console.error('THREE.TGALoader: No data.');\n      } // skip the needn't data\n\n      offset += header.id_length; // get targa information about RLE compression and palette\n\n      var use_rle = false,\n        use_pal = false,\n        use_grey = false;\n      switch (header.image_type) {\n        case TGA_TYPE_RLE_INDEXED:\n          use_rle = true;\n          use_pal = true;\n          break;\n        case TGA_TYPE_INDEXED:\n          use_pal = true;\n          break;\n        case TGA_TYPE_RLE_RGB:\n          use_rle = true;\n          break;\n        case TGA_TYPE_RGB:\n          break;\n        case TGA_TYPE_RLE_GREY:\n          use_rle = true;\n          use_grey = true;\n          break;\n        case TGA_TYPE_GREY:\n          use_grey = true;\n          break;\n      } //\n\n      var imageData = new Uint8Array(header.width * header.height * 4);\n      var result = tgaParse(use_rle, use_pal, header, offset, content);\n      getTgaRGBA(imageData, header.width, header.height, result.pixel_data, result.palettes);\n      return {\n        data: imageData,\n        width: header.width,\n        height: header.height,\n        flipY: true,\n        generateMipmaps: true,\n        minFilter: LinearMipmapLinearFilter\n      };\n    }\n  }]);\n  return TGALoader;\n}(DataTextureLoader);\nexport { TGALoader };","map":null,"metadata":{},"sourceType":"module"}