{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Vector3, Matrix3, LineSegments, BufferGeometry, LineBasicMaterial, Float32BufferAttribute } from 'three';\nvar _v1 = new Vector3();\nvar _v2 = new Vector3();\nvar _normalMatrix = new Matrix3();\nvar VertexNormalsHelper = /*#__PURE__*/function (_LineSegments) {\n  _inherits(VertexNormalsHelper, _LineSegments);\n  function VertexNormalsHelper(object, size, hex) {\n    var _this;\n    _classCallCheck(this, VertexNormalsHelper);\n    var geometry = new BufferGeometry();\n    var color = hex !== undefined ? hex : 0xff0000;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VertexNormalsHelper).call(this, geometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    })));\n    _this.object = object;\n    _this.size = size !== undefined ? size : 0.1;\n    var nNormals = 0;\n    var objGeometry = _this.object.geometry;\n    if (objGeometry && objGeometry.isGeometry) {\n      console.error('THREE.VertexNormalsHelper no longer supports Geometry. Use BufferGeometry instead.');\n      return _possibleConstructorReturn(_this);\n    } else if (objGeometry && objGeometry.isBufferGeometry) {\n      nNormals = objGeometry.attributes.normal.count;\n    } //\n\n    var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n    geometry.setAttribute('position', positions);\n    _this.type = 'VertexNormalsHelper'; //\n\n    _this.matrixAutoUpdate = false;\n    _this.update();\n    return _this;\n  }\n  _createClass(VertexNormalsHelper, [{\n    key: \"update\",\n    value: function update() {\n      this.object.updateMatrixWorld(true);\n      _normalMatrix.getNormalMatrix(this.object.matrixWorld);\n      var matrixWorld = this.object.matrixWorld;\n      var position = this.geometry.attributes.position; //\n\n      var objGeometry = this.object.geometry;\n      if (objGeometry && objGeometry.isGeometry) {\n        console.error('THREE.VertexNormalsHelper no longer supports Geometry. Use BufferGeometry instead.');\n        return;\n      } else if (objGeometry && objGeometry.isBufferGeometry) {\n        var objPos = objGeometry.attributes.position;\n        var objNorm = objGeometry.attributes.normal;\n        var idx = 0; // for simplicity, ignore index and drawcalls, and render every normal\n\n        for (var j = 0, jl = objPos.count; j < jl; j++) {\n          _v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(matrixWorld);\n          _v2.set(objNorm.getX(j), objNorm.getY(j), objNorm.getZ(j));\n          _v2.applyMatrix3(_normalMatrix).normalize().multiplyScalar(this.size).add(_v1);\n          position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n          idx = idx + 1;\n          position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n          idx = idx + 1;\n        }\n      }\n      position.needsUpdate = true;\n    }\n  }]);\n  return VertexNormalsHelper;\n}(LineSegments);\nexport { VertexNormalsHelper };","map":null,"metadata":{},"sourceType":"module"}