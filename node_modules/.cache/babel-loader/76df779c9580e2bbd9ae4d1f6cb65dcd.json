{"ast":null,"code":"import { BufferAttribute, DynamicDrawUsage, BufferGeometry, MeshStandardMaterial, Mesh, Vector3, Color, Matrix4 } from 'three';\nfunction TubePainter() {\n  var BUFFER_SIZE = 1000000 * 3;\n  var positions = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  positions.usage = DynamicDrawUsage;\n  var normals = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  normals.usage = DynamicDrawUsage;\n  var colors = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  colors.usage = DynamicDrawUsage;\n  var geometry = new BufferGeometry();\n  geometry.setAttribute('position', positions);\n  geometry.setAttribute('normal', normals);\n  geometry.setAttribute('color', colors);\n  geometry.drawRange.count = 0;\n  var material = new MeshStandardMaterial({\n    vertexColors: true\n  });\n  var mesh = new Mesh(geometry, material);\n  mesh.frustumCulled = false; //\n\n  function getPoints(size) {\n    var PI2 = Math.PI * 2;\n    var sides = 10;\n    var array = [];\n    var radius = 0.01 * size;\n    for (var i = 0; i < sides; i++) {\n      var angle = i / sides * PI2;\n      array.push(new Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\n    }\n    return array;\n  } //\n\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  var color = new Color(0xffffff);\n  var size = 1;\n  function stroke(position1, position2, matrix1, matrix2) {\n    if (position1.distanceToSquared(position2) === 0) return;\n    var count = geometry.drawRange.count;\n    var points = getPoints(size);\n    for (var i = 0, il = points.length; i < il; i++) {\n      var vertex1 = points[i];\n      var vertex2 = points[(i + 1) % il]; // positions\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).add(position2);\n      vector2.copy(vertex2).applyMatrix4(matrix2).add(position2);\n      vector3.copy(vertex2).applyMatrix4(matrix1).add(position1);\n      vector4.copy(vertex1).applyMatrix4(matrix1).add(position1);\n      vector1.toArray(positions.array, (count + 0) * 3);\n      vector2.toArray(positions.array, (count + 1) * 3);\n      vector4.toArray(positions.array, (count + 2) * 3);\n      vector2.toArray(positions.array, (count + 3) * 3);\n      vector3.toArray(positions.array, (count + 4) * 3);\n      vector4.toArray(positions.array, (count + 5) * 3); // normals\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).normalize();\n      vector2.copy(vertex2).applyMatrix4(matrix2).normalize();\n      vector3.copy(vertex2).applyMatrix4(matrix1).normalize();\n      vector4.copy(vertex1).applyMatrix4(matrix1).normalize();\n      vector1.toArray(normals.array, (count + 0) * 3);\n      vector2.toArray(normals.array, (count + 1) * 3);\n      vector4.toArray(normals.array, (count + 2) * 3);\n      vector2.toArray(normals.array, (count + 3) * 3);\n      vector3.toArray(normals.array, (count + 4) * 3);\n      vector4.toArray(normals.array, (count + 5) * 3); // colors\n\n      color.toArray(colors.array, (count + 0) * 3);\n      color.toArray(colors.array, (count + 1) * 3);\n      color.toArray(colors.array, (count + 2) * 3);\n      color.toArray(colors.array, (count + 3) * 3);\n      color.toArray(colors.array, (count + 4) * 3);\n      color.toArray(colors.array, (count + 5) * 3);\n      count += 6;\n    }\n    geometry.drawRange.count = count;\n  } //\n\n  var up = new Vector3(0, 1, 0);\n  var point1 = new Vector3();\n  var point2 = new Vector3();\n  var matrix1 = new Matrix4();\n  var matrix2 = new Matrix4();\n  function moveTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    point2.copy(position);\n    matrix2.copy(matrix1);\n  }\n  function lineTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    stroke(point1, point2, matrix1, matrix2);\n    point2.copy(point1);\n    matrix2.copy(matrix1);\n  }\n  function setSize(value) {\n    size = value;\n  } //\n\n  var count = 0;\n  function update() {\n    var start = count;\n    var end = geometry.drawRange.count;\n    if (start === end) return;\n    positions.updateRange.offset = start * 3;\n    positions.updateRange.count = (end - start) * 3;\n    positions.needsUpdate = true;\n    normals.updateRange.offset = start * 3;\n    normals.updateRange.count = (end - start) * 3;\n    normals.needsUpdate = true;\n    colors.updateRange.offset = start * 3;\n    colors.updateRange.count = (end - start) * 3;\n    colors.needsUpdate = true;\n    count = geometry.drawRange.count;\n  }\n  return {\n    mesh: mesh,\n    moveTo: moveTo,\n    lineTo: lineTo,\n    setSize: setSize,\n    update: update\n  };\n}\nexport { TubePainter };","map":null,"metadata":{},"sourceType":"module"}