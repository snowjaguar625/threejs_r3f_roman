{"ast":null,"code":"import { Vector2 } from 'three';\n\n/**\n * tool for \"unwrapping\" and debugging three.js geometries UV mapping\n *\n * Sample usage:\n *\tdocument.body.appendChild( UVsDebug( new THREE.SphereGeometry( 10, 10, 10, 10 ) );\n *\n */\n\nvar UVsDebug = function UVsDebug(geometry, size) {\n  // handles wrapping of uv.x > 1 only\n  var abc = 'abc';\n  var a = new Vector2();\n  var b = new Vector2();\n  var uvs = [new Vector2(), new Vector2(), new Vector2()];\n  var face = [];\n  var canvas = document.createElement('canvas');\n  var width = size || 1024; // power of 2 required for wrapping\n\n  var height = size || 1024;\n  canvas.width = width;\n  canvas.height = height;\n  var ctx = canvas.getContext('2d');\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = 'rgb( 63, 63, 63 )';\n  ctx.textAlign = 'center'; // paint background white\n\n  ctx.fillStyle = 'rgb( 255, 255, 255 )';\n  ctx.fillRect(0, 0, width, height);\n  if (geometry.isGeometry) {\n    console.error('THREE.UVsDebug no longer supports Geometry. Use THREE.BufferGeometry instead.');\n    return;\n  } else {\n    var index = geometry.index;\n    var uvAttribute = geometry.attributes.uv;\n    if (index) {\n      // indexed geometry\n      for (var i = 0, il = index.count; i < il; i += 3) {\n        face[0] = index.getX(i);\n        face[1] = index.getX(i + 1);\n        face[2] = index.getX(i + 2);\n        uvs[0].fromBufferAttribute(uvAttribute, face[0]);\n        uvs[1].fromBufferAttribute(uvAttribute, face[1]);\n        uvs[2].fromBufferAttribute(uvAttribute, face[2]);\n        processFace(face, uvs, i / 3);\n      }\n    } else {\n      // non-indexed geometry\n      for (var _i = 0, _il = uvAttribute.count; _i < _il; _i += 3) {\n        face[0] = _i;\n        face[1] = _i + 1;\n        face[2] = _i + 2;\n        uvs[0].fromBufferAttribute(uvAttribute, face[0]);\n        uvs[1].fromBufferAttribute(uvAttribute, face[1]);\n        uvs[2].fromBufferAttribute(uvAttribute, face[2]);\n        processFace(face, uvs, _i / 3);\n      }\n    }\n  }\n  return canvas;\n  function processFace(face, uvs, index) {\n    // draw contour of face\n    ctx.beginPath();\n    a.set(0, 0);\n    for (var _j = 0, _jl = uvs.length; _j < _jl; _j++) {\n      var uv = uvs[_j];\n      a.x += uv.x;\n      a.y += uv.y;\n      if (_j === 0) {\n        ctx.moveTo(uv.x * (width - 2) + 0.5, (1 - uv.y) * (height - 2) + 0.5);\n      } else {\n        ctx.lineTo(uv.x * (width - 2) + 0.5, (1 - uv.y) * (height - 2) + 0.5);\n      }\n    }\n    ctx.closePath();\n    ctx.stroke(); // calculate center of face\n\n    a.divideScalar(uvs.length); // label the face number\n\n    ctx.font = '18px Arial';\n    ctx.fillStyle = 'rgb( 63, 63, 63 )';\n    ctx.fillText(index, a.x * width, (1 - a.y) * height);\n    if (a.x > 0.95) {\n      // wrap x // 0.95 is arbitrary\n      ctx.fillText(index, a.x % 1 * width, (1 - a.y) * height);\n    } //\n\n    ctx.font = '12px Arial';\n    ctx.fillStyle = 'rgb( 191, 191, 191 )'; // label uv edge orders\n\n    for (j = 0, jl = uvs.length; j < jl; j++) {\n      var uv = uvs[j];\n      b.addVectors(a, uv).divideScalar(2);\n      var vnum = face[j];\n      ctx.fillText(abc[j] + vnum, b.x * width, (1 - b.y) * height);\n      if (b.x > 0.95) {\n        // wrap x\n        ctx.fillText(abc[j] + vnum, b.x % 1 * width, (1 - b.y) * height);\n      }\n    }\n  }\n};\nexport { UVsDebug };","map":null,"metadata":{},"sourceType":"module"}