{"ast":null,"code":"import { OrthographicCamera, Scene, StereoCamera, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry, LinearFilter, NearestFilter, RGBAFormat } from 'three';\nvar ParallaxBarrierEffect = function ParallaxBarrierEffect(renderer) {\n  var _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var _scene = new Scene();\n  var _stereo = new StereoCamera();\n  var _params = {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  };\n  var _renderTargetL = new WebGLRenderTarget(512, 512, _params);\n  var _renderTargetR = new WebGLRenderTarget(512, 512, _params);\n  var _material = new ShaderMaterial({\n    uniforms: {\n      mapLeft: {\n        value: _renderTargetL.texture\n      },\n      mapRight: {\n        value: _renderTargetR.texture\n      }\n    },\n    vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = vec2( uv.x, uv.y );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['uniform sampler2D mapLeft;', 'uniform sampler2D mapRight;', 'varying vec2 vUv;', 'void main() {', '\tvec2 uv = vUv;', '\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {', '\t\tgl_FragColor = texture2D( mapLeft, uv );', '\t} else {', '\t\tgl_FragColor = texture2D( mapRight, uv );', '\t}', '}'].join('\\n')\n  });\n  var mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n  _scene.add(mesh);\n  this.setSize = function (width, height) {\n    renderer.setSize(width, height);\n    var pixelRatio = renderer.getPixelRatio();\n    _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n    _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n  };\n  this.render = function (scene, camera) {\n    scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n    _stereo.update(camera);\n    renderer.setRenderTarget(_renderTargetL);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraL);\n    renderer.setRenderTarget(_renderTargetR);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraR);\n    renderer.setRenderTarget(null);\n    renderer.render(_scene, _camera);\n  };\n};\nexport { ParallaxBarrierEffect };","map":null,"metadata":{},"sourceType":"module"}