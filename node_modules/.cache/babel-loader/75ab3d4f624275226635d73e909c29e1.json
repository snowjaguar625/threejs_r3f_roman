{"ast":null,"code":"import _slicedToArray from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { AudioListener, AudioLoader } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nvar PositionalAudio = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var url = _ref.url,\n    _ref$distance = _ref.distance,\n    distance = _ref$distance === void 0 ? 1 : _ref$distance,\n    _ref$loop = _ref.loop,\n    loop = _ref$loop === void 0 ? true : _ref$loop,\n    autoplay = _ref.autoplay,\n    props = _objectWithoutProperties(_ref, [\"url\", \"distance\", \"loop\", \"autoplay\"]);\n  var sound = React.useRef();\n  var camera = useThree(function (_ref2) {\n    var camera = _ref2.camera;\n    return camera;\n  });\n  var _React$useState = React.useState(function () {\n      return new AudioListener();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    listener = _React$useState2[0];\n  var buffer = useLoader(AudioLoader, url);\n  React.useEffect(function () {\n    var _sound = sound.current;\n    if (_sound) {\n      _sound.setBuffer(buffer);\n      _sound.setRefDistance(distance);\n      _sound.setLoop(loop);\n      if (autoplay && !_sound.isPlaying) _sound.play();\n    }\n  }, [buffer, camera, distance, loop]);\n  React.useEffect(function () {\n    var _sound = sound.current;\n    camera.add(listener);\n    return function () {\n      camera.remove(listener);\n      if (_sound) {\n        if (_sound.isPlaying) _sound.stop();\n        if (_sound.source && _sound.source._connected) _sound.disconnect();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"positionalAudio\", _extends({\n    ref: mergeRefs([sound, ref]),\n    args: [listener]\n  }, props));\n});\nexport { PositionalAudio };","map":null,"metadata":{},"sourceType":"module"}