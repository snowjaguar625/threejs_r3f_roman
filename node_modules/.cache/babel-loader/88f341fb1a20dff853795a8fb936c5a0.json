{"ast":null,"code":"import _construct from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/construct\";\nimport { Color, Vector2, Vector3, Vector4, Matrix3, Matrix4 } from 'three';\nvar getNodesKeys = function getNodesKeys(object) {\n  var props = [];\n  for (var name in object) {\n    var value = object[name];\n    if (value && value.isNode === true) {\n      props.push(name);\n    }\n  }\n  return props;\n};\nvar getValueType = function getValueType(value) {\n  if (typeof value === 'number') {\n    return 'float';\n  } else if (typeof value === 'boolean') {\n    return 'bool';\n  } else if ((value === null || value === void 0 ? void 0 : value.isVector2) === true) {\n    return 'vec2';\n  } else if ((value === null || value === void 0 ? void 0 : value.isVector3) === true) {\n    return 'vec3';\n  } else if ((value === null || value === void 0 ? void 0 : value.isVector4) === true) {\n    return 'vec4';\n  } else if ((value === null || value === void 0 ? void 0 : value.isMatrix3) === true) {\n    return 'mat3';\n  } else if ((value === null || value === void 0 ? void 0 : value.isMatrix4) === true) {\n    return 'mat4';\n  } else if ((value === null || value === void 0 ? void 0 : value.isColor) === true) {\n    return 'color';\n  }\n  return null;\n};\nvar getValueFromType = function getValueFromType(type) {\n  var last4 = type === null || type === void 0 ? void 0 : type.slice(-4);\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  if (type === 'color') {\n    return _construct(Color, params);\n  } else if (last4 === 'vec2') {\n    return _construct(Vector2, params);\n  } else if (last4 === 'vec3') {\n    return _construct(Vector3, params);\n  } else if (last4 === 'vec4') {\n    return _construct(Vector4, params);\n  } else if (last4 === 'mat3') {\n    return _construct(Matrix3, params);\n  } else if (last4 === 'mat4') {\n    return _construct(Matrix4, params);\n  } else if (type === 'bool') {\n    return false;\n  } else if (type === 'float' || type === 'int' || type === 'uint') {\n    return 0;\n  }\n  return null;\n};\nexport { getNodesKeys, getValueFromType, getValueType };","map":null,"metadata":{},"sourceType":"module"}