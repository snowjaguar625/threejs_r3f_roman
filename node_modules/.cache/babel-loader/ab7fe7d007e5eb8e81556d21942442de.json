{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll_mid\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Loader, FileLoader, DataTexture, RGBAFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three';\n\n// http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492\nvar LUT3dlLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LUT3dlLoader, _Loader);\n  function LUT3dlLoader() {\n    _classCallCheck(this, LUT3dlLoader);\n    return _possibleConstructorReturn(this, _getPrototypeOf(LUT3dlLoader).apply(this, arguments));\n  }\n  _createClass(LUT3dlLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('text');\n      loader.load(url, function (text) {\n        try {\n          onLoad(_this.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          _this.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(str) {\n      // remove empty lines and comment lints\n      str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n      var lines = str.split(/[\\n\\r]+/g); // first line is the positions on the grid that are provided by the LUT\n\n      var gridLines = lines[0].trim().split(/\\s+/g).map(function (e) {\n        return parseFloat(e);\n      });\n      var gridStep = gridLines[1] - gridLines[0];\n      var size = gridLines.length;\n      for (var i = 1, l = gridLines.length; i < l; i++) {\n        if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n          throw new Error('LUT3dlLoader: Inconsistent grid size not supported.');\n        }\n      }\n      var dataArray = new Array(size * size * size * 4);\n      var index = 0;\n      var maxOutputValue = 0.0;\n      for (var _i = 1, _l = lines.length; _i < _l; _i++) {\n        var line = lines[_i].trim();\n        var split = line.split(/\\s/g);\n        var r = parseFloat(split[0]);\n        var g = parseFloat(split[1]);\n        var b = parseFloat(split[2]);\n        maxOutputValue = Math.max(maxOutputValue, r, g, b);\n        var bLayer = index % size;\n        var gLayer = Math.floor(index / size) % size;\n        var rLayer = Math.floor(index / (size * size)) % size; // b grows first, then g, then r\n\n        var pixelIndex = bLayer * size * size + gLayer * size + rLayer;\n        dataArray[4 * pixelIndex + 0] = r;\n        dataArray[4 * pixelIndex + 1] = g;\n        dataArray[4 * pixelIndex + 2] = b;\n        dataArray[4 * pixelIndex + 3] = 1.0;\n        index += 1;\n      } // Find the apparent bit depth of the stored RGB values and map the\n      // values to [ 0, 255 ].\n\n      var bits = Math.ceil(Math.log2(maxOutputValue));\n      var maxBitValue = Math.pow(2.0, bits);\n      for (var _i2 = 0, _l2 = dataArray.length; _i2 < _l2; _i2 += 4) {\n        var _r = dataArray[_i2 + 0];\n        var _g = dataArray[_i2 + 1];\n        var _b = dataArray[_i2 + 2];\n        dataArray[_i2 + 0] = 255 * _r / maxBitValue; // r\n\n        dataArray[_i2 + 1] = 255 * _g / maxBitValue; // g\n\n        dataArray[_i2 + 2] = 255 * _b / maxBitValue; // b\n      }\n\n      var data = new Uint8Array(dataArray);\n      var texture = new DataTexture();\n      texture.image.data = data;\n      texture.image.width = size;\n      texture.image.height = size * size;\n      texture.format = RGBAFormat;\n      texture.type = UnsignedByteType;\n      texture.magFilter = LinearFilter;\n      texture.minFilter = LinearFilter;\n      texture.wrapS = ClampToEdgeWrapping;\n      texture.wrapT = ClampToEdgeWrapping;\n      texture.generateMipmaps = false;\n      var texture3D = new DataTexture3D();\n      texture3D.image.data = data;\n      texture3D.image.width = size;\n      texture3D.image.height = size;\n      texture3D.image.depth = size;\n      texture3D.format = RGBAFormat;\n      texture3D.type = UnsignedByteType;\n      texture3D.magFilter = LinearFilter;\n      texture3D.minFilter = LinearFilter;\n      texture3D.wrapS = ClampToEdgeWrapping;\n      texture3D.wrapT = ClampToEdgeWrapping;\n      texture3D.wrapR = ClampToEdgeWrapping;\n      texture3D.generateMipmaps = false;\n      return {\n        size: size,\n        texture: texture,\n        texture3D: texture3D\n      };\n    }\n  }]);\n  return LUT3dlLoader;\n}(Loader);\nexport { LUT3dlLoader };","map":null,"metadata":{},"sourceType":"module"}