{"ast":null,"code":"import _classCallCheck from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Train\\\\Three.js\\\\New folder\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Mesh, Vector3, Matrix3 } from 'three';\n\n/**\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  const exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\nvar PLYExporter = /*#__PURE__*/function () {\n  function PLYExporter() {\n    _classCallCheck(this, PLYExporter);\n  }\n  _createClass(PLYExporter, [{\n    key: \"parse\",\n    value: function parse(object, onDone, options) {\n      if (onDone && typeof onDone === 'object') {\n        console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n        options = onDone;\n        onDone = undefined;\n      } // Default options\n\n      var defaultOptions = {\n        binary: false,\n        excludeAttributes: [],\n        // normal, uv, color, index\n        littleEndian: false\n      };\n      options = Object.assign(defaultOptions, options);\n      var excludeAttributes = options.excludeAttributes;\n      var includeNormals = false;\n      var includeColors = false;\n      var includeUVs = false; // count the vertices, check which properties are used,\n      // and cache the BufferGeometry\n\n      var vertexCount = 0;\n      var faceCount = 0;\n      object.traverse(function (child) {\n        if (child instanceof Mesh && child.isMesh) {\n          var mesh = child;\n          var geometry = mesh.geometry;\n          if (!geometry.isBufferGeometry) {\n            throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n          }\n          var vertices = geometry.getAttribute('position');\n          var normals = geometry.getAttribute('normal');\n          var uvs = geometry.getAttribute('uv');\n          var colors = geometry.getAttribute('color');\n          var indices = geometry.getIndex();\n          if (vertices === undefined) {\n            return;\n          }\n          vertexCount += vertices.count;\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n          if (normals !== undefined) includeNormals = true;\n          if (uvs !== undefined) includeUVs = true;\n          if (colors !== undefined) includeColors = true;\n        }\n      });\n      var includeIndices = (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('index')) === -1;\n      includeNormals = includeNormals && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('normal')) === -1;\n      includeColors = includeColors && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('color')) === -1;\n      includeUVs = includeUVs && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('uv')) === -1;\n      if (includeIndices && faceCount !== Math.floor(faceCount)) {\n        // point cloud meshes will not have an index array and may not have a\n        // number of vertices that is divisble by 3 (and therefore representable\n        // as triangles)\n        console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n        return null;\n      }\n      var indexByteCount = 4;\n      var header = 'ply\\n' + \"format \".concat(options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii', \" 1.0\\n\") + \"element vertex \".concat(vertexCount, \"\\n\") +\n      // position\n      'property float x\\n' + 'property float y\\n' + 'property float z\\n';\n      if (includeNormals) {\n        // normal\n        header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n      }\n      if (includeUVs) {\n        // uvs\n        header += 'property float s\\n' + 'property float t\\n';\n      }\n      if (includeColors) {\n        // colors\n        header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n      }\n      if (includeIndices) {\n        // faces\n        header += \"\".concat(\"element face \".concat(faceCount, \"\\n\"), \"property list uchar int vertex_index\\n\");\n      }\n      header += 'end_header\\n'; // Generate attribute data\n\n      var vertex = new Vector3();\n      var normalMatrixWorld = new Matrix3();\n      var result = null;\n      if (options.binary) {\n        // Binary File Generation\n        var headerBin = new TextEncoder().encode(header); // 3 position values at 4 bytes\n        // 3 normal values at 4 bytes\n        // 3 color channels with 1 byte\n        // 2 uv values at 4 bytes\n\n        var vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0)); // 1 byte shape desciptor\n        // 3 vertex indices at ${indexByteCount} bytes\n\n        var faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n        var output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n        new Uint8Array(output.buffer).set(headerBin, 0);\n        var vOffset = headerBin.length;\n        var fOffset = headerBin.length + vertexListLength;\n        var writtenVertices = 0;\n        this.traverseMeshes(object, function (mesh, geometry) {\n          var vertices = geometry.getAttribute('position');\n          var normals = geometry.getAttribute('normal');\n          var uvs = geometry.getAttribute('uv');\n          var colors = geometry.getAttribute('color');\n          var indices = geometry.getIndex();\n          normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n          for (var i = 0, l = vertices.count; i < l; i++) {\n            vertex.x = vertices.getX(i);\n            vertex.y = vertices.getY(i);\n            vertex.z = vertices.getZ(i);\n            vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n            output.setFloat32(vOffset, vertex.x, options.littleEndian);\n            vOffset += 4;\n            output.setFloat32(vOffset, vertex.y, options.littleEndian);\n            vOffset += 4;\n            output.setFloat32(vOffset, vertex.z, options.littleEndian);\n            vOffset += 4; // Normal information\n\n            if (includeNormals) {\n              if (normals != null) {\n                vertex.x = normals.getX(i);\n                vertex.y = normals.getY(i);\n                vertex.z = normals.getZ(i);\n                vertex.applyMatrix3(normalMatrixWorld).normalize();\n                output.setFloat32(vOffset, vertex.x, options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, vertex.y, options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, vertex.z, options.littleEndian);\n                vOffset += 4;\n              } else {\n                output.setFloat32(vOffset, 0, options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, 0, options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, 0, options.littleEndian);\n                vOffset += 4;\n              }\n            } // UV information\n\n            if (includeUVs) {\n              if (uvs != null) {\n                output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n                vOffset += 4;\n              } else if (!includeUVs) {\n                output.setFloat32(vOffset, 0, options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, 0, options.littleEndian);\n                vOffset += 4;\n              }\n            } // Color information\n\n            if (includeColors) {\n              if (colors != null) {\n                output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n                vOffset += 1;\n                output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n                vOffset += 1;\n                output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n                vOffset += 1;\n              } else {\n                output.setUint8(vOffset, 255);\n                vOffset += 1;\n                output.setUint8(vOffset, 255);\n                vOffset += 1;\n                output.setUint8(vOffset, 255);\n                vOffset += 1;\n              }\n            }\n          }\n          if (includeIndices) {\n            // Create the face list\n            if (indices !== null) {\n              for (var _i = 0, _l = indices.count; _i < _l; _i += 3) {\n                output.setUint8(fOffset, 3);\n                fOffset += 1;\n                output.setUint32(fOffset, indices.getX(_i + 0) + writtenVertices, options.littleEndian);\n                fOffset += indexByteCount;\n                output.setUint32(fOffset, indices.getX(_i + 1) + writtenVertices, options.littleEndian);\n                fOffset += indexByteCount;\n                output.setUint32(fOffset, indices.getX(_i + 2) + writtenVertices, options.littleEndian);\n                fOffset += indexByteCount;\n              }\n            } else {\n              for (var _i2 = 0, _l2 = vertices.count; _i2 < _l2; _i2 += 3) {\n                output.setUint8(fOffset, 3);\n                fOffset += 1;\n                output.setUint32(fOffset, writtenVertices + _i2, options.littleEndian);\n                fOffset += indexByteCount;\n                output.setUint32(fOffset, writtenVertices + _i2 + 1, options.littleEndian);\n                fOffset += indexByteCount;\n                output.setUint32(fOffset, writtenVertices + _i2 + 2, options.littleEndian);\n                fOffset += indexByteCount;\n              }\n            }\n          } // Save the amount of verts we've already written so we can offset\n          // the face index on the next mesh\n\n          writtenVertices += vertices.count;\n        });\n        result = output.buffer;\n      } else {\n        // Ascii File Generation\n        // count the number of vertices\n        var _writtenVertices = 0;\n        var vertexList = '';\n        var faceList = '';\n        this.traverseMeshes(object, function (mesh, geometry) {\n          var vertices = geometry.getAttribute('position');\n          var normals = geometry.getAttribute('normal');\n          var uvs = geometry.getAttribute('uv');\n          var colors = geometry.getAttribute('color');\n          var indices = geometry.getIndex();\n          normalMatrixWorld.getNormalMatrix(mesh.matrixWorld); // form each line\n\n          for (var i = 0, l = vertices.count; i < l; i++) {\n            vertex.x = vertices.getX(i);\n            vertex.y = vertices.getY(i);\n            vertex.z = vertices.getZ(i);\n            vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n            var line = vertex.x + ' ' + vertex.y + ' ' + vertex.z; // Normal information\n\n            if (includeNormals) {\n              if (normals != null) {\n                vertex.x = normals.getX(i);\n                vertex.y = normals.getY(i);\n                vertex.z = normals.getZ(i);\n                vertex.applyMatrix3(normalMatrixWorld).normalize();\n                line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n              } else {\n                line += ' 0 0 0';\n              }\n            } // UV information\n\n            if (includeUVs) {\n              if (uvs != null) {\n                line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\n              } else if (includeUVs) {\n                line += ' 0 0';\n              }\n            } // Color information\n\n            if (includeColors) {\n              if (colors != null) {\n                line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\n              } else {\n                line += ' 255 255 255';\n              }\n            }\n            vertexList += line + '\\n';\n          } // Create the face list\n\n          if (includeIndices) {\n            if (indices !== null) {\n              for (var _i3 = 0, _l3 = indices.count; _i3 < _l3; _i3 += 3) {\n                faceList += \"3 \".concat(indices.getX(_i3 + 0) + _writtenVertices);\n                faceList += \" \".concat(indices.getX(_i3 + 1) + _writtenVertices);\n                faceList += \" \".concat(indices.getX(_i3 + 2) + _writtenVertices, \"\\n\");\n              }\n            } else {\n              for (var _i4 = 0, _l4 = vertices.count; _i4 < _l4; _i4 += 3) {\n                faceList += \"3 \".concat(_writtenVertices + _i4, \" \").concat(_writtenVertices + _i4 + 1, \" \").concat(_writtenVertices + _i4 + 2, \"\\n\");\n              }\n            }\n            faceCount += indices ? indices.count / 3 : vertices.count / 3;\n          }\n          _writtenVertices += vertices.count;\n        });\n        result = \"\".concat(header).concat(vertexList).concat(includeIndices ? \"\".concat(faceList, \"\\n\") : '\\n');\n      }\n      if (typeof onDone === 'function') {\n        requestAnimationFrame(function () {\n          return onDone && onDone(typeof result === 'string' ? result : '');\n        });\n      }\n      return result;\n    } // Iterate over the valid meshes in the object\n  }, {\n    key: \"traverseMeshes\",\n    value: function traverseMeshes(object, cb) {\n      object.traverse(function (child) {\n        if (child instanceof Mesh && child.isMesh) {\n          var mesh = child;\n          var geometry = mesh.geometry;\n          if (!geometry.isBufferGeometry) {\n            throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n          }\n          if (geometry.hasAttribute('position')) {\n            cb(mesh, geometry);\n          }\n        }\n      });\n    }\n  }]);\n  return PLYExporter;\n}();\nexport { PLYExporter };","map":null,"metadata":{},"sourceType":"module"}