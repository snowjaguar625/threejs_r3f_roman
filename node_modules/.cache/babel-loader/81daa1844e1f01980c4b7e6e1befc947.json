{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Administrator\\\\Videos\\\\infinite-scroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { CompressedTextureLoader } from 'three';\n\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\nvar KTXLoader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(KTXLoader, _CompressedTextureLoa);\n  function KTXLoader(manager) {\n    _classCallCheck(this, KTXLoader);\n    return _possibleConstructorReturn(this, _getPrototypeOf(KTXLoader).call(this, manager));\n  }\n  _createClass(KTXLoader, [{\n    key: \"parse\",\n    value: function parse(buffer, loadMipmaps) {\n      var ktx = new KhronosTextureContainer(buffer, 1);\n      return {\n        mipmaps: ktx.mipmaps(loadMipmaps),\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        format: ktx.glInternalFormat,\n        isCubemap: ktx.numberOfFaces === 6,\n        mipmapCount: ktx.numberOfMipmapLevels\n      };\n    }\n  }]);\n  return KTXLoader;\n}(CompressedTextureLoader);\nvar HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n// load types\n\nvar COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n//const COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n//const TEX_2D = 2; // uses a gl.texImage2D()\n//const TEX_3D = 3; // uses a gl.texImage3D()\nvar KhronosTextureContainer = /*#__PURE__*/function () {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  function KhronosTextureContainer(arrayBuffer, facesExpected\n  /*, threeDExpected, textureArrayExpected */) {\n    _classCallCheck(this, KhronosTextureContainer);\n    this.arrayBuffer = arrayBuffer; // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\n    var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n    if (identifier[0] !== 0xab || identifier[1] !== 0x4b || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xbb || identifier[8] !== 0x0d || identifier[9] !== 0x0a || identifier[10] !== 0x1a || identifier[11] !== 0x0a) {\n      console.error('texture missing KTX identifier');\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported');\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported');\n      return;\n    }\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported');\n      return;\n    }\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n    this.loadType = COMPRESSED_2D;\n  }\n  _createClass(KhronosTextureContainer, [{\n    key: \"mipmaps\",\n    value: function mipmaps(loadMipmaps) {\n      var mipmaps = []; // initialize width & height for level 1\n\n      var dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n      var width = this.pixelWidth;\n      var height = this.pixelHeight;\n      var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n      for (var level = 0; level < mipmapCount; level++) {\n        var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n        dataOffset += 4; // size of the image + 4 for the imageSize field\n\n        for (var face = 0; face < this.numberOfFaces; face++) {\n          var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n          mipmaps.push({\n            data: byteArray,\n            width: width,\n            height: height\n          });\n          dataOffset += imageSize;\n          dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n        }\n\n        width = Math.max(1.0, width * 0.5);\n        height = Math.max(1.0, height * 0.5);\n      }\n      return mipmaps;\n    }\n  }]);\n  return KhronosTextureContainer;\n}();\nexport { KTXLoader };","map":null,"metadata":{},"sourceType":"module"}